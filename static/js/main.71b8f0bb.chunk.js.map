{"version":3,"sources":["store/Task.ts","store/TaskHistory.ts","store/Station.ts","store/index.ts","components/content-components/Breadcrumbs/index.js","components/content-components/Breadcrumbs/Breadcrumbs.tsx","components/content-components/Footer/index.js","components/content-components/Footer/Footer.tsx","components/content-components/NavMenu/index.js","components/content-components/NavMenu/NavMenu.tsx","components/Layout.tsx","components/content-pages/Home/index.js","components/content-pages/Home/Home.tsx","configuration.js","utils/timeUtils.js","services/fake.service.ts","services/restService.js","services/assistant.service.js","services/processOptimization.service.js","services/station.service.js","services/work.service.js","utils/numberUtils.js","components/content-pages/ProcessOptimization/ProcessOptimizationStep1.tsx","utils/toolUtils.js","components/content-parts/StationsPortList/index.js","components/content-parts/StationsPortList/StationsPortList.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep2.tsx","utils/cartridgeData/T470.js","utils/cartridgeData/T245.js","utils/cartridgeData/T210.js","utils/cartridgeData/PA120.js","utils/cartridgeData/NT105.js","utils/cartridgeData/NP105.js","utils/cartridgeData/HT420.js","utils/cartridgeData/DS360.js","utils/cartridgeData/DR560.js","utils/cartridgeData/AP250.js","utils/cartridgeUtils.tsx","components/content-parts/Plot2AxisSimple/Plot2AxisSimple.tsx","components/content-parts/Plot2AxisSimple/index.js","utils/portUtils.js","components/content-parts/PortStatusCard/index.js","components/content-parts/PortStatusCard/PortStatusCard.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep3.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep4.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep5.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationView.tsx","components/content-pages/ProcessOptimization/ProcessOptimization.tsx","components/content-pages/ProcessOptimization/index.js","components/content-pages/Stations/StationsView.tsx","components/content-pages/Stations/Stations.tsx","components/content-pages/Stations/index.js","services/tasks.service.js","components/content-components/PaginationNav/index.js","components/content-components/PaginationNav/PaginationNav.tsx","components/content-pages/Tasks/TasksView.tsx","components/content-pages/Tasks/Tasks.tsx","components/content-pages/Tasks/index.js","components/content-pages/TaskNew/TaskNewView.tsx","components/content-pages/TaskNew/TaskNew.tsx","components/content-pages/TaskNew/index.js","components/content-pages/TaskEdit/TaskEditView.tsx","components/content-pages/TaskEdit/TaskEdit.tsx","components/content-pages/TaskEdit/index.js","services/taskHistories.service.js","components/content-pages/TaskDetail/TaskDetailView.tsx","components/content-pages/TaskDetail/TaskDetail.tsx","components/content-pages/TaskDetail/index.js","utils/plotUtils.js","components/content-parts/Plot2Axis/Plot2Axis.tsx","components/content-parts/Plot2Axis/index.js","components/content-parts/PlotPowerAxisSimple/PlotPowerAxisSimple.tsx","components/content-parts/PlotPowerAxisSimple/index.js","components/content-pages/TaskHistoryDetail/TaskHistoryDetailView.tsx","utils/solderingClassificationUtils.js","components/content-pages/TaskHistoryDetail/TaskHistoryDetail.tsx","components/content-pages/TaskHistoryDetail/index.js","components/content-parts/StationListSide/StationListSideView.tsx","components/content-parts/StationListSide/StationListSide.tsx","components/content-parts/StationListSide/index.js","components/content-pages/Work/WorkStep1.tsx","components/content-pages/Work/WorkStep2.tsx","components/content-pages/Work/WorkStep3.tsx","components/content-pages/Work/Work.tsx","routes.js","App.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts"],"names":["actionCreators","createTask","task","type","result","deleteTask","id","deleteAllTasks","setTotalTasks","number","createTaskHistory","taskHistory","deleteTaskHistory","deleteAllTaskHistories","createStationController","sc","deleteStationController","deleteAllStationControllers","createStation","station","scId","deleteStation","reducers","state","incomingAction","undefined","tasks","nTotalTasks","action","find","x","concat","filter","taskHistories","stationControllers","stations","map","push","Breadcrumbs","this","props","crumbs","length","className","Container","Breadcrumb","key","name","path","BreadcrumbItem","active","NavLink","tag","Link","to","React","PureComponent","Footer","year","Date","getFullYear","NavMenu","isOpen","toggle","setState","Navbar","light","NavbarBrand","src","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","icon","faHome","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","faProjectDiagram","DropdownMenu","right","DropdownItem","faHourglassHalf","faRoute","faTasks","faBriefcase","faHdd","children","Home","Row","xs","sm","Col","Card","CardBody","CardTitle","CardText","Configuration","FakeMode","sleep","ms","Promise","resolve","setTimeout","FakeService","console","log","energy","similarity","tenthsOfSecondSoldering","_getTasks","nTasks","taskId","taskName","i","components","Math","floor","random","tool","selectedTemp","workConfig","changeSelectedTemp","timesPerformed","_getTaskHistories","historyId","finishDate","now","selected_temp","change_selected_temp","workData","stationId","stationName","stationPort","temperature","Array","from","power","workSolderings","solderingType","d","seconds","getSeconds","isPortEnabled","toolStatus","isCalibrating","isSoldering","data","reduce","total","time","cartridge","points","recommended","performance","durability","scs","iSc","url","isQSTMode","round","iSt","model","ports","nPorts","pow","p","port","RestService","doGetRequest","ENDPOINT_ASSISTANT","ENDPOINT_WORK","pageNumber","pageSize","doPostRequest","doPutRequest","doDeleteRequest","ENDPOINT_WORK_HISTORY","ENDPOINT_TRACE","ENDPOINT_REAL_TIME","queueId","solderings","ENDPOINT_PROCESS_OPTIMIZATION","ENDPOINT_STATIONS","scUrl","newState","resource","axios","get","success","error","method","delete","AssistantService","getSolderingResult","ProcessOptimizationService","betterSoldering","getBetterOptimizationByCartridge","getBetterOptimizationByTemperature","StationsService","getStations","setSelectedTemperature","setTraceabilityMode","WorkService","startTrace","stopTrace","startRealTimeData","stopRealTimeData","getRealTimeData","TryParseInt","str","defaultValue","retValue","isNaN","parseInt","ProcessOptimizationStep1","currentStep","Jumbotron","Button","outline","color","size","handleNextClick","ToolToString","1","2","3","4","5","6","7","8","9","31","32","33","34","ToolImagePath","toLowerCase","StationsPortList","isLoading","Spinner","options","s","handleStationClick","scope","getListOptionsStationControllers","ProcessOptimizationStep2","Alert","filtered","Input","selectedTemperature","onChange","e","handleSelecTempChange","target","value","isFormCorrect","LoadCartridges","cartridges","MapCatridges","T470data","T245data","T210data","PA120data","NT105data","NP105data","HT420data","DS360data","DR560data","AP250data","cartridgeRoot","_","family","F","def","Default","Cartridge_list","forEach","item","GetToolIdByFamily","fullName","N","isDefault","img","CartridgeImagePath","CartridgeImagePathByFullName","Plot2AxisSimple","width","aspect","plotData","margin","left","stroke","dataKey","height","label","interval","tick","yAxisId","orientation","domain","dot","defaultProps","showLabels","GetPortStatus2String","GetPortStatus2Lights","PortStatusCard","circleLight","portData","faCircle","ProcessOptimizationStep3","cartridgeImagePath","defaultCartridge","selectedTool","handleCartridgeChange","alerts","getAlerts","lastRealTimeData","stationDetail","selectedStation","selectedPort","card","getDetailsCard","selected","registeredPlots","detectedSolderings","solderingResult","handleDeleteRealTimeData","date","faTrashAlt","counterTenthSecond","md","getRegisteredPlotsCard","ProcessOptimizationStep4","cardBody","fasterSoldering","getConfigurationCard","ProcessOptimizationStep5","optimizedSoldering","padding","tickFormatter","ticks","x1","x2","y1","y2","fill","getOptimizedSolderingPlotCard","selectedCartridge","ProcessOptimizationView","ProcessOptimization","timerSelectedTemp","registeredData","readyGetMoreData","wasSoldering","detectedSolderingsToRemove","searchStations","setInterval","applyDetectedSolderingsToRemove","then","values","isArray","nDataSoldering","min","soldering","toString","splice","StationService","some","r","setSelectedTemperatureRequest","window","clearTimeout","nValue","connect","StationStore","StationsView","items","handleSetTraceabilityModeClick","Stations","TasksService","count","countTasks","getTasks","getTaskById","updateTask","PaginationNav","totalPages","ceil","totalElements","PaginationItem","PaginationLink","first","disabled","handlePageClick","previous","handlePreviousPageClick","zero","index","next","handleNextPageClick","last","getItems","Pagination","TasksView","faFile","InputGroup","InputGroupAddon","addonType","handleSearchFieldChange","faEye","faPen","getListOptionsTasks","Tasks","timer","searchTasks","max","bind","TaskStore","TaskNewView","toolImagePath","handleToolChange","newTask","newToolImagePath","form","handleNameChange","tools","Object","entries","getListTools","CustomInput","handleModifySelecTempChange","checked","pattern","CardImg","TaskNew","redirect","TaskEditView","showDeleteModal","handleDeleteClick","event","preventDefault","handleDeleteCancelClick","href","defaultChecked","Modal","ModalHeader","ModalBody","ModalFooter","TaskEdit","match","params","searchTask","history","TaskHistoriessService","countTaskHistories","getTaskHistories","getTaskHistoryById","TaskDetailView","isLoadingTask","COLORS","total2","entry","nTotalTaskHistories","isLoadingHistories","toLocaleDateString","getListHistoryTasks","TaskDetail","searchTaskHistories","taskActions","taskHistoryActions","TaskHistoriesService","dispatch","bindActionCreators","TaskHistoryStore","EmptyPlotSeriesData","maxPLotPoints","Plot2Axis","sec_num","hours","minutes","SecToString","PlotPowerAxisSimple","plotDataObj","TaskHistoryDetailView","correct","registeredSolderings","0","ClassificationToString","getSolderingsCard","GetPlotSeriesData","getRegisteredDataCard","TaskHistoryDetail","taskHistoryId","StationListSideView","ListGroupItem","ListGroup","StationListSide","WorkStep1","taskFilter","isLoadingTasks","handleTaskClick","WorkStep2","taskTool","WorkStep3","Work","selectedTask","showFinishTaskModal","realTimeData","PushPlotSeriesData","getDetails","taskDetail","getConfiguration","handleFinishTaskCancelClick","MAX_POINTS_PLOT","alert","getMetadata","getPreviousButton","text","isValid","getNextButton","handleFinishTaskConfirmClick","Component","Layout","routes","exact","render","includes","rest","keys","param","replace","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","baseUrl","document","getElementsByTagName","getAttribute","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71b8f0bb.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\n\r\nexport interface TaskConfig\r\n{\r\n    tool: number,\r\n    selectedTemp: number,\r\n    changeSelectedTemp: boolean\r\n}\r\n\r\nexport interface Task\r\n{\r\n    id: number,\r\n    name: string,\r\n    workConfig: TaskConfig,\r\n    timesPerformed: number\r\n}\r\n\r\nexport interface TaskState {\r\n    tasks: Task[],\r\n    nTotalTasks: number\r\n}\r\n\r\nexport interface CreateTaskAction { type: 'CREATE_TASK', result: Task }\r\nexport interface DeleteTaskAction { type: 'DELETE_TASK', result: number }\r\nexport interface DeleteAllTasksAction { type: 'DELETE_ALL_TASKS' }\r\n\r\nexport interface SetTotalTasksAction { type: 'SET_TOTAL_TASKS', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskAction\r\n    | DeleteTaskAction\r\n    | DeleteAllTasksAction\r\n    | SetTotalTasksAction;\r\n\r\nexport const actionCreators = {\r\n    createTask: (task: Task) => ({ type: 'CREATE_TASK', result: task } as CreateTaskAction),\r\n    deleteTask: (id: number) => ({ type: 'DELETE_TASK', result: id } as DeleteTaskAction),\r\n    deleteAllTasks: () => ({ type: 'DELETE_ALL_TASKS' } as DeleteAllTasksAction),\r\n    setTotalTasks: (number: number) => ({ type: 'SET_TOTAL_TASKS', result: number } as SetTotalTasksAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskState> = (\r\n    state: TaskState | undefined,\r\n    incomingAction: Action\r\n): TaskState => {\r\n    if (state === undefined) {\r\n        return {\r\n            tasks: [],\r\n            nTotalTasks: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK':\r\n            if (state.tasks.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASKS':\r\n            return {\r\n                ...state,\r\n                tasks: []\r\n            };\r\n\r\n        case 'SET_TOTAL_TASKS':\r\n            return {\r\n                ...state,\r\n                nTotalTasks: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface TaskConfig\r\n{\r\n    tool: number,\r\n    selected_temp: number,\r\n    change_selected_temp: boolean\r\n}\r\n\r\nexport interface WorkSolderings\r\n{\r\n    power: number[],\r\n    solderingType: number\r\n}\r\n\r\nexport interface TaskData\r\n{\r\n    stationId: string,\r\n    stationName: string,\r\n    stationPort: number,\r\n    temperature: number[],\r\n    power: number[],\r\n    workSolderings: WorkSolderings[]\r\n}\r\n\r\nexport interface TaskHistory\r\n{\r\n    id: number,\r\n    finishDate: Date,\r\n    workConfig: TaskConfig\r\n    workData: TaskData\r\n}\r\n\r\nexport interface TaskHistoryState {\r\n    taskHistories: TaskHistory[]\r\n}\r\n\r\nexport interface CreateTaskHistoryAction { type: 'CREATE_TASK_HISTORY', result: TaskHistory }\r\nexport interface DeleteTaskHistoryAction { type: 'DELETE_TASK_HISTORY', result: number }\r\nexport interface DeleteAllTaskHistoriesAction { type: 'DELETE_ALL_TASK_HISTORIES' }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskHistoryAction\r\n    | DeleteTaskHistoryAction\r\n    | DeleteAllTaskHistoriesAction;\r\n\r\nexport const actionCreators = {\r\n    createTaskHistory: (taskHistory: TaskHistory) => ({ type: 'CREATE_TASK_HISTORY', result: taskHistory } as CreateTaskHistoryAction),\r\n    deleteTaskHistory: (id: number) => ({ type: 'DELETE_TASK_HISTORY', result: id } as DeleteTaskHistoryAction),\r\n    deleteAllTaskHistories: () => ({ type: 'DELETE_ALL_TASK_HISTORIES' } as DeleteAllTaskHistoriesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskHistoryState> = (\r\n    state: TaskHistoryState | undefined,\r\n    incomingAction: Action\r\n): TaskHistoryState => {\r\n    if (state === undefined) {\r\n        return { taskHistories: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK_HISTORY':\r\n            if (state.taskHistories.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK_HISTORY':\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASK_HISTORIES':\r\n            return {\r\n                ...state,\r\n                taskHistories: []\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Port\r\n{\r\n    id: number,\r\n    tool: number\r\n}\r\n\r\nexport interface Station\r\n{\r\n    id: string,\r\n    name: string,\r\n    model: string,\r\n    isQSTMode: boolean,\r\n    ports: Port[]\r\n}\r\n\r\nexport interface StationController\r\n{\r\n    id: string,\r\n    url: string,\r\n    name: string,\r\n    isQSTMode: boolean,\r\n    stations: Station[]\r\n}\r\n\r\nexport interface StationState {\r\n    stationControllers: StationController[]\r\n}\r\n\r\nexport interface CreateStationControllerAction { type: 'CREATE_STATION_CONTROLLER', sc: StationController }\r\nexport interface DeleteStationControllerAction { type: 'DELETE_STATION_CONTROLLER', id: string }\r\nexport interface DeleteAllStationControllersAction { type: 'DELETE_ALL_STATION_CONTROLLERS' }\r\nexport interface CreateStationAction { type: 'CREATE_STATION', station: Station, scId: string }\r\nexport interface DeleteStationAction { type: 'DELETE_STATION', id: string }\r\n\r\nexport type KnownAction =\r\n    | CreateStationControllerAction\r\n    | DeleteStationControllerAction\r\n    | DeleteAllStationControllersAction\r\n    | CreateStationAction\r\n    | DeleteStationAction;\r\n\r\nexport const actionCreators = {\r\n    createStationController: (sc: StationController) => ({ type: 'CREATE_STATION_CONTROLLER', sc: sc } as CreateStationControllerAction),\r\n    deleteStationController: (id: string) => ({ type: 'DELETE_STATION_CONTROLLER', id: id } as DeleteStationControllerAction),\r\n    deleteAllStationControllers: () => ({ type: 'DELETE_ALL_STATION_CONTROLLERS' } as DeleteAllStationControllersAction),\r\n    createStation: (station: Station, scId: string) => ({ type: 'CREATE_STATION', station: station, scId: scId } as CreateStationAction),\r\n    deleteStation: (id: string) => ({ type: 'DELETE_STATION', id: id } as DeleteStationAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<StationState> = (\r\n    state: StationState | undefined,\r\n    incomingAction: Action\r\n): StationState => {\r\n    if (state === undefined) {\r\n        return { stationControllers: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_STATION_CONTROLLER':\r\n            if (state.stationControllers.find(x => x.id === action.sc.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.concat(action.sc)\r\n            };\r\n\r\n        case 'DELETE_STATION_CONTROLLER':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers\r\n                    .filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_STATION_CONTROLLERS':\r\n            return {\r\n                ...state,\r\n                stationControllers: []\r\n            };\r\n\r\n        case 'CREATE_STATION':\r\n            let sc = state.stationControllers.find(x => x.id === action.scId);\r\n            if (sc === undefined) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            if (sc.stations.find(x => x.id === action.station.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.map(x => {\r\n                    if (x.id === action.scId) {\r\n                        x.stations.push(action.station);\r\n                    }\r\n                    return x;\r\n                })\r\n            };\r\n\r\n        case 'DELETE_STATION':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.filter(sc => {\r\n                    return sc.stations.filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n                })\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as Task from './Task';\r\nimport * as TaskHistory from './TaskHistory';\r\nimport * as Station from './Station';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    task: Task.TaskState;\r\n    taskHistory: TaskHistory.TaskHistoryState;\r\n    station: Station.StationState;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    task: Task.reducer,\r\n    taskHistory: TaskHistory.reducer,\r\n    station: Station.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import Breadcrumbs from './Breadcrumbs';\r\n\r\nexport default Breadcrumbs;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Container } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\ninterface ICrumb {\r\n    name: string,\r\n    path: string\r\n}\r\n\r\ntype BreadcrumbsProps = {\r\n    crumbs: ICrumb[]\r\n}\r\n\r\nclass Breadcrumbs extends React.PureComponent<BreadcrumbsProps> {\r\n    public render() {\r\n        if (this.props.crumbs.length <= 1) {\r\n            return null;\r\n        }\r\n        \r\n        return (\r\n            <div id=\"breadcrumb-wrap\" className=\"box-shadow\">\r\n                <Container>\r\n                    <Breadcrumb>\r\n                            {/* Link back to any previous steps of the breadcrumb. */}\r\n                            {this.props.crumbs.map(({ name, path }, key) =>\r\n                                key + 1 === this.props.crumbs.length ? (\r\n                                    <BreadcrumbItem active>{name}</BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem>\r\n                                        <NavLink tag={Link} className=\"p-0 d-inline\" to={path}>{name}</NavLink>\r\n                                    </BreadcrumbItem>\r\n                                )\r\n                            )}\r\n                    </Breadcrumb>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\nclass Footer extends React.PureComponent {\r\n    public render() {\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n\r\n        return (\r\n            <footer className=\"border-top box-shadow\">\r\n                <Container className=\"clearfix pt-2 pb-2\">\r\n                    <div className=\"float-left\">\r\n                        <strong>Copyright</strong> JBC, Soldering S.L. © {year}\r\n                    </div>\r\n                    <div className=\"float-right\">\r\n                    <strong>QST 4.0</strong> - version 0.0.1\r\n                    </div>\r\n                </Container>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import NavMenu from './NavMenu';\r\n\r\nexport default NavMenu;\r\n","import * as React from 'react';\r\nimport { Collapse, Container } from 'reactstrap';\r\nimport { Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarToggler } from 'reactstrap';\r\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBriefcase, faHome, faHdd, faHourglassHalf, faTasks, faProjectDiagram, faRoute } from '@fortawesome/free-solid-svg-icons'\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">\r\n                            <img src=\"img/logo.png\" alt=\"JBC\" className=\"mr-2\"/>QST 4.0\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"flex-grow\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">\r\n                                        <FontAwesomeIcon icon={faHome} className=\"fa pr-1\"/> Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                \r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        <FontAwesomeIcon icon={faProjectDiagram} className=\"fa pr-1\"/> Processes\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/optimization\">\r\n                                                <FontAwesomeIcon icon={faHourglassHalf} className=\"fa pr-1\"/> Process optimization\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        <FontAwesomeIcon icon={faRoute} className=\"fa pr-1\"/> Traceability\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/task\">\r\n                                                <FontAwesomeIcon icon={faTasks} className=\"fa pr-1\"/> Tasks\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/work\">\r\n                                                <FontAwesomeIcon icon={faBriefcase} className=\"fa pr-1\"/> Work\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/stations\">\r\n                                                <FontAwesomeIcon icon={faHdd} className=\"fa pr-1\"/> Stations\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport Footer from './content-components/Footer';\r\nimport NavMenu from './content-components/NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        {props.children}\r\n        <Footer/>\r\n    </React.Fragment>\r\n);\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport './Home.scss';\r\n\r\nclass Home extends React.PureComponent {\r\n    public render() {\r\n        const getProcessoptimization = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/optimization\">\r\n                    <Card className=\"process-optimization\">\r\n                        <CardBody>\r\n                            <CardTitle>Process optimization</CardTitle>\r\n                            <CardText>\r\n                                Optimize your processes\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        const getTraceability = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/traceability/task\">\r\n                    <Card className=\"traceability\">\r\n                        <CardBody>\r\n                            <CardTitle>Traceability</CardTitle>\r\n                            <CardText>\r\n                                Access station data remotely\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"content-home\">\r\n                <Row xs={1} sm={2}>\r\n                    <Col>{getProcessoptimization()}</Col>\r\n                    <Col>{getTraceability()}</Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;\r\n","const Configuration = {\r\n    FakeMode: true\r\n}\r\n\r\nexport default Configuration\r\n","export function TimeToString(sec_num, format) {\r\n\r\n    var showHours = false;\r\n    var padHours = false;\r\n    var showMinutes = false;\r\n    var padMinutes = false;\r\n    var showSeconds = false;\r\n    var padSeconds = false;\r\n\r\n    if (format.indexOf(\"hh\") >= 0) { showHours = true; padHours = true; }\r\n    else if (format.indexOf(\"h\") >= 0) { showHours = true; padHours = false; }\r\n\r\n    if (format.indexOf(\"mm\") >= 0) { showMinutes = true; padMinutes = true; }\r\n    else if (format.indexOf(\"m\") >= 0) { showMinutes = true; padMinutes = false; }\r\n\r\n    if (format.indexOf(\"ss\") >= 0) { showSeconds = true; padSeconds = true; }\r\n    else if (format.indexOf(\"s\") >= 0) { showSeconds = true; padSeconds = false; }\r\n\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n    \r\n    if (showHours) {\r\n        if (hours < 10 && padHours) { hours = \"0\" + hours; }\r\n        result += hours;\r\n    }\r\n    if (showMinutes) {\r\n        if (minutes < 10 && padMinutes) { minutes = \"0\" + minutes; }\r\n        if (result != \"\") { result += \":\"; }\r\n        result += minutes;\r\n    }\r\n    if (showSeconds) {\r\n        if (seconds < 10 && padSeconds) { seconds = \"0\" + seconds; }\r\n        if (result != \"\") { result += \":\"; }\r\n        result += seconds;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function SecToString(sec_num) {\r\n    if (sec_num < 0) {\r\n        return \"\";\r\n    }\r\n\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n    \r\n    if (hours != 0) {\r\n        result += hours;\r\n        result += \":\";\r\n    }\r\n\r\n    if (minutes < 10) { minutes = \"0\" + minutes; }\r\n    result += minutes;\r\n    result += \":\";\r\n\r\n    if (seconds < 10) { seconds = \"0\" + seconds; }\r\n    result += seconds;\r\n\r\n    return result;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as StationStore from '../store/Station';\r\nimport * as TaskStore from '../store/Task';\r\nimport { sleep } from '../utils/timeUtils';\r\n\r\nclass FakeService {\r\n    static components = [\r\n        \"surface\", \"mount\", \"resistor\", \"led\",\r\n        \"R1\", \"R2\", \"R10\", \"R20\", \"PCB\",\r\n        \"C1\", \"C2\", \"C10\", \"C20\",\r\n        \"diode\", \"transistor\", \"capacitor\", \"magnetic\",\r\n        \"switches\", \"terminals\", \"thru-hole\"]\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult() {\r\n        console.log(\"FAKE SERVICE: getSolderingResult\");\r\n        return {\r\n            energy: 46,\r\n            similarity: 800,\r\n            tenthsOfSecondSoldering: 39\r\n        };\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks() {\r\n        console.log(\"FAKE SERVICE: countTasks\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTasks() {\r\n        console.log(\"FAKE SERVICE: getTasks\");\r\n        await sleep(1000);\r\n        return this._getTasks(25);\r\n    }\r\n\r\n    static async getTaskById() {\r\n        console.log(\"FAKE SERVICE: getTaskById\");\r\n        await sleep(1000);\r\n        return (await this._getTasks(1))[0];\r\n    }\r\n\r\n    static async _getTasks(nTasks: number) {\r\n        let tasks = [] as TaskStore.Task[];\r\n\r\n        for (var taskId = 1; taskId <= nTasks; taskId++) {\r\n\r\n            let taskName = \"\";\r\n            for (var i = 0; i < 4; i++) {\r\n                taskName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let change_selected_temp = true;\r\n\r\n            let task = {\r\n                id: taskId,\r\n                name: taskName,\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selectedTemp: selectedTemp,\r\n                    changeSelectedTemp: change_selected_temp\r\n                },\r\n                timesPerformed: Math.floor(Math.random() * 3)\r\n            };\r\n\r\n            tasks.push(task);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async createTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: createTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async updateTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: updateTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async deleteTask(id: number) {\r\n        console.log(\"FAKE SERVICE: deleteTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: countTaskHistories\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: getTaskHistories\");\r\n        await sleep(2000);\r\n        return this._getTaskHistories(25)\r\n    }\r\n\r\n    static async getTaskHistoryById() {\r\n        console.log(\"FAKE SERVICE: getTaskHistoryById\");\r\n        await sleep(1000);\r\n        return (await this._getTaskHistories(1))[0];\r\n    }\r\n\r\n    static async _getTaskHistories(nTasks: number) {\r\n        let taskHistories = []\r\n\r\n        for (var historyId = 1; historyId <= nTasks; historyId++) {\r\n            let length = Math.floor(Math.random() * 500) + 30;\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let change_selected_temp = true;\r\n\r\n            let taskHistory = {\r\n                id: historyId + 1000,\r\n                finishDate: Date.now(),\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selected_temp: selectedTemp,\r\n                    change_selected_temp: change_selected_temp\r\n                },\r\n                workData: {\r\n                    stationId: \"U1H23UI12HN3IBN\",\r\n                    stationName: \"Roberto's DDE\",\r\n                    stationPort: 1,\r\n                    temperature: Array.from({ length: length }, () => ((Math.floor(Math.random() * 100)) + 300) * 9),\r\n                    power: Array.from({ length: length }, () => Math.floor(Math.random() * 200)),\r\n                    workSolderings: [\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: 0\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n\r\n            taskHistories.push(taskHistory);\r\n        }\r\n\r\n        return taskHistories;\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace() {\r\n        console.log(\"FAKE SERVICE: startTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async stopTrace() {\r\n        console.log(\"FAKE SERVICE: stopTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async startRealTimeData() {\r\n        console.log(\"FAKE SERVICE: startRealTimeData\");\r\n        await sleep(1000);\r\n        return 1;\r\n    }\r\n\r\n    static async stopRealTimeData() {\r\n        console.log(\"FAKE SERVICE: stopRealTimeData\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async getRealTimeData() {\r\n        console.log(\"FAKE SERVICE: getRealTimeData\");\r\n\r\n        var d = new Date();\r\n        var seconds = d.getSeconds() % 10;\r\n\r\n        var isPortEnabled = seconds > 0;\r\n\r\n        var toolStatus = 0;\r\n        if (seconds === 1) toolStatus = 8;\r\n        if (seconds === 2) toolStatus = 4;\r\n        if (seconds === 3) toolStatus = 2;\r\n        if (seconds === 4) toolStatus = 1;\r\n\r\n        var isCalibrating =\r\n            (seconds >= 5) &&\r\n            (seconds <= 6);\r\n        \r\n        var isSoldering =\r\n            (seconds >= 8) &&\r\n            (seconds <= 9);\r\n\r\n        return [{\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        },\r\n        {\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        }]\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByCartridge\");\r\n        await sleep(2000);\r\n\r\n        let data = [];\r\n        for (var i = 0; i < 35; i++) {\r\n            data.push({\r\n                temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n                power: (Math.floor(Math.random() * 100) + 100) * 10\r\n            })\r\n        }\r\n\r\n        return {\r\n            data: data,\r\n            energy: data.reduce(((total, x) => total + x.power), 0),\r\n            time: data.length,\r\n            cartridge: \"C210004\",\r\n            selectedTemp: 350 * 9\r\n        }\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByTemperature\");\r\n        await sleep(2000);\r\n\r\n        let points = [{\r\n            temperature: 250 * 9,\r\n            time: 3\r\n        }, {\r\n            temperature: 300 * 9,\r\n            time: 1.75\r\n        }, {\r\n            temperature: 350 * 9,\r\n            time: 1\r\n        }, {\r\n            temperature: 400 * 9,\r\n            time: 0.5\r\n        }];\r\n\r\n        let recommended = {\r\n            temperature: 350 * 9,\r\n            time: 1\r\n        };\r\n\r\n        let performance = {\r\n            temperature: 400 * 9,\r\n            time: 0.5\r\n        };\r\n\r\n        let durability = {\r\n            temperature: 300 * 9,\r\n            time: 1.75\r\n        };\r\n\r\n        return {\r\n            points: points,\r\n            recommended: recommended,\r\n            performance: performance,\r\n            durability: durability\r\n        }\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        console.log(\"FAKE SERVICE: getStations\");\r\n        await sleep(2000);\r\n        let scs = [] as StationStore.StationController[]\r\n\r\n        for (var iSc = 1; iSc <= 2; iSc++) {\r\n            let scId = \"sc\" + iSc\r\n            let sc =\r\n                {\r\n                    id: scId,\r\n                    url: \"192.168.1.1\",\r\n                    name: \"Lab-\" + iSc,\r\n                    isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                    stations: []\r\n                } as StationStore.StationController;\r\n\r\n            for (var iSt = 1; iSt <= 2; iSt++) {\r\n                let stationId = scId + \"_\" + iSt;\r\n                let station =\r\n                    {\r\n                        id: stationId,\r\n                        name: \"Roberto's DDE \" + iSt,\r\n                        model: \"DDE\",\r\n                        isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                        ports: []\r\n                    } as StationStore.Station;\r\n\r\n                let nPorts = Math.pow(2, Math.floor(Math.random() * 3));\r\n                for (var p = 0; p < nPorts; p++) {\r\n                    let port =\r\n                        {\r\n                            id: p,\r\n                            tool: Math.floor(Math.random() * 8) + 1\r\n                        } as StationStore.Port;\r\n                    station.ports.push(port);\r\n                }\r\n\r\n                sc.stations.push(station);\r\n            }\r\n\r\n            scs.push(sc);\r\n        }\r\n\r\n        return scs;\r\n    }\r\n\r\n    static async setSelectedTemperature() {\r\n        console.log(\"FAKE SERVICE: setSelectedTemperature\");\r\n    }\r\n\r\n    static async setTraceabilityMode() {\r\n        console.log(\"FAKE SERVICE: setTraceabilityMode\");\r\n    }\r\n}\r\n\r\nexport default FakeService;\r\n","import axios from 'axios';\r\n\r\nconst ENDPOINT_ASSISTANT = 'api/assistant'\r\nconst ENDPOINT_PROCESS_OPTIMIZATION = 'api/processoptimization'\r\nconst ENDPOINT_REAL_TIME = '/api/realtimedata';\r\nconst ENDPOINT_STATIONS = '/api/station';\r\nconst ENDPOINT_TRACE = '/api/trace';\r\nconst ENDPOINT_WORK = '/api/work';\r\nconst ENDPOINT_WORK_HISTORY = '/api/workhistory';\r\n\r\nclass RestService {\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult(stationId, port) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/solderingresult?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks(filter) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/count?filter=\" + filter);\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"?filter=\" + filter + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    static async createTask(task) {\r\n        return await this.doPostRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        return await this.doPutRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/count?workid=\" + taskId);\r\n    }\r\n\r\n    static async getTaskHistories(taskId, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"?workid=\" + taskId + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/\" + id);\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace(taskId, stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_TRACE + \"/start?workid=\" + taskId + \"&stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopTrace(stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_TRACE + \"/stop?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    // real time data\r\n\r\n    static async startRealTimeData(stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_REAL_TIME + \"/start?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopRealTimeData(stationId, queueId) {\r\n        return await this.doPostRequest(ENDPOINT_REAL_TIME + \"/stop?stationid=\" + stationId + \"&queueid=\" + queueId);\r\n    }\r\n\r\n    static async getRealTimeData(stationId, queueId) {\r\n        return await this.doGetRequest(ENDPOINT_REAL_TIME + \"?stationid=\" + stationId + \"&queueid=\" + queueId);\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/cartridge\", solderings);\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/temperature\", solderings);\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        return await this.doGetRequest(ENDPOINT_STATIONS);\r\n    }\r\n\r\n    static async setSelectedTemperature(stationId, port, temperature) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS + \"/setselectedtemperature?stationid=\" + stationId + \"&stationport=\" + port + \"&temperature=\" + temperature);\r\n    }\r\n\r\n    static async setTraceabilityMode(scUrl, newState) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS + \"/settraceabilitymode?scurl=\" + scUrl + \"&qststate=\" + newState);\r\n    }\r\n\r\n    // api requests\r\n\r\n    static async doGetRequest(resource) {\r\n        try {\r\n            const success = await axios.get(resource);\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPostRequest(resource, data) {\r\n        try {\r\n            const success = await axios({\r\n                method: 'post',\r\n                url: resource,\r\n                data: data\r\n            });\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPutRequest(resource, data) {\r\n        try {\r\n            await axios({\r\n                method: 'put',\r\n                url: resource,\r\n                data: data\r\n            });\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n\r\n    static async doDeleteRequest(resource) {\r\n        try {\r\n            await axios.delete(resource);\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RestService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass AssistantService {\r\n    static async getSolderingResult(stationId, port) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.getSolderingResult();\r\n        }\r\n        else {\r\n            result = RestService.getSolderingResult(stationId, port);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default AssistantService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass ProcessOptimizationService {\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByCartridge();\r\n        }\r\n        else {\r\n            betterSoldering = RestService.getBetterOptimizationByCartridge(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByTemperature();\r\n        }\r\n        else {\r\n            betterSoldering = RestService.getBetterOptimizationByTemperature(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n}\r\n\r\nexport default ProcessOptimizationService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass StationsService {\r\n    static async getStations() {\r\n        let stations;\r\n\r\n        if (Configuration.FakeMode) {\r\n            stations = FakeService.getStations();\r\n        }\r\n        else {\r\n            stations = RestService.getStations();\r\n        }\r\n\r\n        return stations;\r\n    }\r\n\r\n    static async setSelectedTemperature(stationId, port, temperature) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setSelectedTemperature();\r\n        }\r\n        else {\r\n            RestService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n    }\r\n\r\n    static async setTraceabilityMode(scUrl, newState) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setTraceabilityMode();\r\n        }\r\n        else {\r\n            RestService.setTraceabilityMode(scUrl, newState);\r\n        }\r\n    }\r\n}\r\n\r\nexport default StationsService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass WorkService {\r\n    static async startTrace(taskId, stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.startTrace();\r\n        }\r\n        else {\r\n            RestService.startTrace(taskId, stationId, port);\r\n        }\r\n    }\r\n\r\n    static async stopTrace(stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopTrace();\r\n        }\r\n        else {\r\n            RestService.stopTrace(stationId, port);\r\n        }\r\n    }\r\n\r\n    static async startRealTimeData(stationId, port) {\r\n        let queueId;\r\n\r\n        if (Configuration.FakeMode) {\r\n            queueId = FakeService.startRealTimeData();\r\n        }\r\n        else {\r\n            queueId = RestService.startRealTimeData(stationId, port);\r\n        }\r\n\r\n        return queueId;\r\n    }\r\n\r\n    static async stopRealTimeData(stationId, queueId) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopRealTimeData();\r\n        }\r\n        else {\r\n            RestService.stopRealTimeData(stationId, queueId);\r\n        }\r\n    }\r\n\r\n    static async getRealTimeData(stationId, queueId) {\r\n        let data;\r\n\r\n        if (Configuration.FakeMode) {\r\n            data = FakeService.getRealTimeData();\r\n        }\r\n        else {\r\n            data = RestService.getRealTimeData(stationId, queueId);\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\nexport default WorkService;\r\n","export function TryParseInt(str,defaultValue) {\r\n    var retValue = defaultValue;\r\n    if(str !== null) {\r\n        if(str.length > 0) {\r\n            if (!isNaN(str)) {\r\n                retValue = parseInt(str);\r\n            }\r\n        }\r\n    }\r\n    return retValue;\r\n}\r\n","import * as React from 'react';\r\nimport { Jumbotron, Button } from 'reactstrap';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep1 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n\r\n        const getInformation = () => {\r\n            return (\r\n                <Jumbotron className=\"pr-opti\">\r\n                    <h1 className=\"display-4\">Process optimization</h1>\r\n                    <p className=\"lead\">Optimize your processes by choosing the best combination of working temperature and the ideal cartridge</p>\r\n                    <hr className=\"my-2\" />\r\n                    <p>Extend cartridge life, save time and reduce costs with smart optimization</p>\r\n                    <p className=\"lead\">\r\n                        <Button\r\n                            outline\r\n                            color=\"primary\"\r\n                            size=\"lg\"\r\n                            className=\"m-2\"\r\n                            onClick={this.props.handleNextClick}\r\n                        >Start</Button>\r\n                    </p>\r\n                </Jumbotron>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {getInformation()}\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep1;\r\n","export function GetTools()\r\n{\r\n    var tools =\r\n    {\r\n        1: \"T210\",\r\n        2: \"T245\",\r\n        3: \"PA\",\r\n        4: \"HT\",\r\n        5: \"DS\",\r\n        6: \"DR\",\r\n        7: \"NT105\",\r\n        8: \"NP105\",\r\n        9: \"T470\",\r\n\r\n        31: \"JT\",\r\n        32: \"TE\",\r\n        33: \"PHS\",\r\n        34: \"PHB\"\r\n    }\r\n    return tools;\r\n}\r\n\r\nexport function ToolToString(id)\r\n{\r\n    let tool = GetTools()[id];\r\n\r\n    if (typeof(tool) === \"undefined\") {\r\n        return \"No tool\";\r\n    }\r\n    else {\r\n        return tool;\r\n    }\r\n}\r\n\r\nexport function ToolImagePath(id)\r\n{\r\n    if (typeof(GetTools()[id]) === \"undefined\") {\r\n        return \"\";\r\n    }\r\n    else {\r\n        return \"img/tools/\" + GetTools()[id].toLowerCase() + \".png\";\r\n    }\r\n}\r\n","import StationsPortList from './StationsPortList';\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void\r\n}\r\n\r\nclass StationsPortList extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                            .map(p => (\r\n                                <tr onClick={() => this.props.handleStationClick(s, p.id, p.tool)}>\r\n                                    <td scope=\"row\">{s.name} [{s.model}]</td>\r\n                                    <td>{p.id + 1}</td>\r\n                                    <td>{ToolToString(p.tool)}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            getListOptionsStationControllers()\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport StationsPortList from '../../content-parts/StationsPortList';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n    selectedTemperature: number,\r\n    \r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep2 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoading}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={this.props.handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <CardText>\r\n                            <strong>Selected temperature:</strong>\r\n                            <Input\r\n                                type=\"select\"\r\n                                defaultValue={this.props.selectedTemperature / 9}\r\n                                onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                            >\r\n                                <option>425</option>\r\n                                <option>400</option>\r\n                                <option>375</option>\r\n                                <option>350</option>\r\n                                <option>325</option>\r\n                                <option>300</option>\r\n                            </Input>\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (!this.props.isFormCorrect) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <h4>Step 1 - Station selection</h4>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Alert color=\"warning\">\r\n                        Select temperature to test with different cartridges\r\n                    </Alert>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"8\">\r\n                        <Row>\r\n                            <Card>\r\n                                <CardBody>\r\n                                    <CardTitle>Stations available</CardTitle>\r\n                                    <CardText>\r\n                                        {getListOptionsStationControllers()}\r\n                                    </CardText>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep2;\r\n","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C470\",\r\n\"Default\":\"009\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"026\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"035\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"037\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"038\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"040\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"042\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"043\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"044\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"045\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"046\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"047\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"048\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"049\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"050\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"051\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"055\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"057\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"058\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"059\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"063\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"065\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"066\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"564\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP42\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C245\",\r\n\"Default\":\"029\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"2\",\r\n\"RT\":\"1022\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"3\",\r\n\"RT\":\"30\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"1\",\r\n\"RT\":\"1474\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"1\",\r\n\"RT\":\"1711\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"2\",\r\n\"RT\":\"408\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"1\",\r\n\"RT\":\"2602\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"2\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"053\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"054\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"3\",\r\n\"RT\":\"100\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"2\",\r\n\"RT\":\"765\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"3\",\r\n\"RT\":\"638\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"069\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"102\",\r\n\"G\":\"3\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"3\",\r\n\"RT\":\"118\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"1\",\r\n\"RT\":\"42\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"3\",\r\n\"RT\":\"195\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"3\",\r\n\"RT\":\"151\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"119\",\r\n\"G\":\"3\",\r\n\"RT\":\"2258\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"121\",\r\n\"G\":\"1\",\r\n\"RT\":\"166\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"122\",\r\n\"G\":\"2\",\r\n\"RT\":\"268\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"123\",\r\n\"G\":\"3\",\r\n\"RT\":\"143\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"3\",\r\n\"RT\":\"42\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"1\",\r\n\"RT\":\"1219\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"136\",\r\n\"G\":\"1\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"138\",\r\n\"G\":\"1\",\r\n\"RT\":\"36\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"150\",\r\n\"G\":\"3\",\r\n\"RT\":\"29\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"201\",\r\n\"G\":\"2\",\r\n\"RT\":\"1013\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"215\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"220\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"224\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"226\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"227\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"228\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"234\",\r\n\"G\":\"2\",\r\n\"RT\":\"463\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"247\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"248\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"250\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"256\",\r\n\"G\":\"3\",\r\n\"RT\":\"101\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"259\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"260\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"261\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"268\",\r\n\"G\":\"3\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"301\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"303\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"304\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"305\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"306\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"311\",\r\n\"G\":\"2\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"312\",\r\n\"G\":\"2\",\r\n\"RT\":\"244\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"313\",\r\n\"G\":\"2\",\r\n\"RT\":\"114\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"315\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"344\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"351\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"352\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"254\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"273\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"3\",\r\n\"RT\":\"139\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"627\",\r\n\"G\":\"3\",\r\n\"RT\":\"239\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"628\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"651\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"654\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"667\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"669\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"673\",\r\n\"G\":\"2\",\r\n\"RT\":\"168\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"708\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"710\",\r\n\"G\":\"2\",\r\n\"RT\":\"922\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"729\",\r\n\"G\":\"3\",\r\n\"RT\":\"213\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"730\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"731\",\r\n\"G\":\"2\",\r\n\"RT\":\"1233\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"732\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"741\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"742\",\r\n\"G\":\"2\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"747\",\r\n\"G\":\"1\",\r\n\"RT\":\"2530\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"748\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"749\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"751\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"752\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"754\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"755\",\r\n\"G\":\"3\",\r\n\"RT\":\"72\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"756\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"757\",\r\n\"G\":\"3\",\r\n\"RT\":\"253\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"758\",\r\n\"G\":\"3\",\r\n\"RT\":\"196\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"759\",\r\n\"G\":\"2\",\r\n\"RT\":\"162\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"760\",\r\n\"G\":\"4\",\r\n\"RT\":\"39\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"761\",\r\n\"G\":\"3\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"762\",\r\n\"G\":\"4\",\r\n\"RT\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"763\",\r\n\"G\":\"3\",\r\n\"RT\":\"48\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"764\",\r\n\"G\":\"1\",\r\n\"RT\":\"2977\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"765\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"766\",\r\n\"G\":\"3\",\r\n\"RT\":\"55\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"768\",\r\n\"G\":\"3\",\r\n\"RT\":\"174\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"770\",\r\n\"G\":\"3\",\r\n\"RT\":\"56\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"771\",\r\n\"G\":\"1\",\r\n\"RT\":\"8830\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"772\",\r\n\"G\":\"1\",\r\n\"RT\":\"1483\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"773\",\r\n\"G\":\"2\",\r\n\"RT\":\"465\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"774\",\r\n\"G\":\"2\",\r\n\"RT\":\"302\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"775\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"776\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"784\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"785\",\r\n\"G\":\"2\",\r\n\"RT\":\"70\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"786\",\r\n\"G\":\"0\",\r\n\"RT\":\"728\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"789\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"790\",\r\n\"G\":\"0\",\r\n\"RT\":\"149\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"792\",\r\n\"G\":\"0\",\r\n\"RT\":\"96\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"793\",\r\n\"G\":\"0\",\r\n\"RT\":\"162\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"795\",\r\n\"G\":\"0\",\r\n\"RT\":\"776\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"796\",\r\n\"G\":\"0\",\r\n\"RT\":\"81\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"797\",\r\n\"G\":\"0\",\r\n\"RT\":\"191\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"803\",\r\n\"G\":\"2\",\r\n\"RT\":\"573\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"804\",\r\n\"G\":\"2\",\r\n\"RT\":\"579\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"806\",\r\n\"G\":\"2\",\r\n\"RT\":\"472\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"807\",\r\n\"G\":\"3\",\r\n\"RT\":\"223\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"808\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"811\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"812\",\r\n\"G\":\"3\",\r\n\"RT\":\"105\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"844\",\r\n\"G\":\"3\",\r\n\"RT\":\"158\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"845\",\r\n\"G\":\"3\",\r\n\"RT\":\"312\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"846\",\r\n\"G\":\"3\",\r\n\"RT\":\"220\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"862\",\r\n\"G\":\"2\",\r\n\"RT\":\"469\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"863\",\r\n\"G\":\"3\",\r\n\"RT\":\"2117\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"866\",\r\n\"G\":\"4\",\r\n\"RT\":\"46\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"903\",\r\n\"G\":\"2\",\r\n\"RT\":\"552\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"904\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"905\",\r\n\"G\":\"3\",\r\n\"RT\":\"585\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"906\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"907\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"908\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"911\",\r\n\"G\":\"3\",\r\n\"RT\":\"173\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"912\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"913\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"914\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"929\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"930\",\r\n\"G\":\"1\",\r\n\"RT\":\"1395\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"931\",\r\n\"G\":\"3\",\r\n\"RT\":\"152\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"933\",\r\n\"G\":\"4\",\r\n\"RT\":\"262\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"935\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"937\",\r\n\"G\":\"2\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"938\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"939\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"943\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"944\",\r\n\"G\":\"3\",\r\n\"RT\":\"188\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"945\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"946\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"949\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"951\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"955\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"957\",\r\n\"G\":\"1\",\r\n\"RT\":\"1157\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"962\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"963\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"965\",\r\n\"G\":\"3\",\r\n\"RT\":\"620\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"966\",\r\n\"G\":\"4\",\r\n\"RT\":\"14\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"617\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C210\",\r\n\"Default\":\"003\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"421\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"380\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"2\",\r\n\"RT\":\"929\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"2\",\r\n\"RT\":\"374\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"2\",\r\n\"RT\":\"349\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"195\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"299\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"1332\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"1137\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"2\",\r\n\"RT\":\"273\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"2\",\r\n\"RT\":\"1656\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"2\",\r\n\"RT\":\"780\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"2\",\r\n\"RT\":\"2494\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"2\",\r\n\"RT\":\"161\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"2\",\r\n\"RT\":\"1368\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"1\",\r\n\"RT\":\"2861\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"2\",\r\n\"RT\":\"745\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"2\",\r\n\"RT\":\"80\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"1\",\r\n\"RT\":\"1222\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"024\",\r\n\"G\":\"2\",\r\n\"RT\":\"451\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"2\",\r\n\"RT\":\"115\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"355\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"536\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"287\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"259\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"210\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"891\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"692\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C120\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"680\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"938\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"517\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"247\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"207\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"1381\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"86\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"959\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"902\",\r\n\"G\":\"1\",\r\n\"RT\":\"2266\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C420\",\r\n\"Default\":\"281\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"271\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"272\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"273\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"274\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"275\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"276\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"277\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"278\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"279\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"280\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"281\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"282\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"283\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"285\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"286\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"287\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"288\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C360\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C560\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C250\",\r\n\"Default\":\"401\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"401\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"402\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"404\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"408\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"409\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"410\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"411\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"412\",\r\n\"G\":\"3\",\r\n\"RT\":\"50\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"413\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"414\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"415\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"418\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"420\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"424\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","import T470data from './cartridgeData/T470';\r\nimport T245data from './cartridgeData/T245';\r\nimport T210data from './cartridgeData/T210';\r\nimport PA120data from './cartridgeData/PA120';\r\nimport NT105data from './cartridgeData/NT105';\r\nimport NP105data from './cartridgeData/NP105';\r\nimport HT420data from './cartridgeData/HT420';\r\nimport DS360data from './cartridgeData/DS360';\r\nimport DR560data from './cartridgeData/DR560';\r\nimport AP250data from './cartridgeData/AP250';\r\n\r\ninterface CartridgeList {\r\n    N: string;\r\n    G: string;\r\n    RT: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeGroup {\r\n    G: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeData {\r\n    F: string;\r\n    Default: string;\r\n    Cartridge_list: CartridgeList[];\r\n    Cartridge_group: CartridgeGroup[];\r\n}\r\n\r\ninterface CartridgeRoot {\r\n    _Type: string;\r\n    _V: number;\r\n    _: CartridgeData;\r\n}\r\n\r\nexport interface ICartridge {\r\n    tool: number,\r\n    fullName: string,\r\n    family: string,\r\n    name: string,\r\n    isDefault: boolean,\r\n    img: string\r\n}\r\n\r\nexport function LoadCartridges() {\r\n    let cartridges: ICartridge[] = [];\r\n    cartridges = cartridges.concat(MapCatridges(T470data));\r\n    cartridges = cartridges.concat(MapCatridges(T245data));\r\n    cartridges = cartridges.concat(MapCatridges(T210data));\r\n    cartridges = cartridges.concat(MapCatridges(PA120data));\r\n    cartridges = cartridges.concat(MapCatridges(NT105data));\r\n    cartridges = cartridges.concat(MapCatridges(NP105data));\r\n    cartridges = cartridges.concat(MapCatridges(HT420data));\r\n    cartridges = cartridges.concat(MapCatridges(DS360data));\r\n    cartridges = cartridges.concat(MapCatridges(DR560data));\r\n    cartridges = cartridges.concat(MapCatridges(AP250data));\r\n\r\n    return cartridges;\r\n}\r\n\r\nexport function MapCatridges(cartridgeRoot: CartridgeRoot) {\r\n    let result: ICartridge[] = [];\r\n\r\n    let cartridge = cartridgeRoot._;\r\n    let family = cartridge.F;\r\n    let def = cartridge.Default;\r\n\r\n    cartridge.Cartridge_list.forEach(item => {\r\n        result.push({\r\n            tool: GetToolIdByFamily(family),\r\n            fullName: family + item.N,\r\n            family: family,\r\n            name: item.N,\r\n            isDefault: def === item.N,\r\n            img: CartridgeImagePath(family, item.N)\r\n        });\r\n    })\r\n\r\n    return result;\r\n};\r\n\r\nexport function GetToolIdByFamily(family: string)\r\n{\r\n    family = family.toLowerCase();\r\n\r\n    if (family === \"c210\") return 1; // T210\r\n    if (family === \"c245\") return 2; // T245\r\n    if (family === \"c120\") return 3; // PA\r\n    if (family === \"c420\") return 4; // HT\r\n    if (family === \"c360\") return 5; // DS\r\n    if (family === \"c560\") return 6; // DR\r\n    if (family === \"c105\" || family === \"c115\") return 7; // NT105, NP105\r\n    if (family === \"c470\") return 9; // T470\r\n\r\n    return 0;\r\n}\r\n\r\nexport function CartridgeImagePath(family: string, name: string)\r\n{\r\n    return \"img/cartidges/\" + family.toLowerCase() + name.toLowerCase() + \"_detail.png\";\r\n}\r\n\r\nexport function CartridgeImagePathByFullName(name: string)\r\n{\r\n    let cartridge = LoadCartridges().find(x => x.fullName.toLowerCase() === name.toLowerCase());\r\n\r\n    if (cartridge === undefined) {\r\n        return \"\";\r\n    }\r\n\r\n    return CartridgeImagePath(cartridge.family, cartridge.name);\r\n}\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2AxisSimple extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -60,\r\n                        right: -60\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0}\r\n                        label=\"\"\r\n                        interval={this.props.interval}\r\n                        tick={false} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2AxisSimple;\r\n","import Plot2AxisSimple from './Plot2AxisSimple';\r\n\r\nexport default Plot2AxisSimple;\r\n","const DESOLDER = 16;\r\nconst EXTRACTOR = 8;\r\nconst HIBERNATION = 4;\r\nconst SLEEP = 2;\r\nconst STAND = 1;\r\nconst NONE = 0;\r\n\r\nexport function GetPortStatus2String(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return \"Port locked\";\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return \"Tool in the extractor\";\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return \"Tool in hibernation\";\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return \"Tool in sleep\";\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return \"Tool in the stand\";\r\n    }\r\n    else if (isCalibrating) {\r\n        return \"Calibrating\";\r\n    }\r\n    else if (isSoldering) {\r\n        return \"Soldering\";\r\n    }\r\n    else {\r\n        return \"Ready\";\r\n    }\r\n}\r\n\r\nexport function GetPortStatus2Lights(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return 3;\r\n    }\r\n    else if (isCalibrating) {\r\n        return 2;\r\n    }\r\n    else if (isSoldering) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n","import PortStatusCard from './PortStatusCard';\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../utils/portUtils';\r\nimport './PortStatusCard.css';\r\n\r\ntype PortStatusCardProps = {\r\n    portData: IRealTimeData\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number,\r\n    toolStatus: number,\r\n    isPortEnabled: boolean,\r\n    isCalibrating: boolean,\r\n    isSoldering: boolean,\r\n    tenthsOfSecondSoldering: number\r\n}\r\n\r\nclass PortStatusCard extends React.PureComponent<PortStatusCardProps> {\r\n    public render() {\r\n        let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n            this.props.portData.toolStatus,\r\n            this.props.portData.isCalibrating,\r\n            this.props.portData.isSoldering,\r\n            this.props.portData.isPortEnabled);\r\n            \r\n        return (\r\n            <Card>\r\n                <CardBody>\r\n                    <Row>\r\n                        <Col xs=\"auto\">\r\n                            Temperature:{' '}\r\n                            <span className=\"temp-value\"> {Math.floor(this.props.portData.temperature / 9)} ºC</span>\r\n                        </Col>\r\n                        <Col>\r\n                            Power:{' '}\r\n                            <span className=\"power-value\">{Math.floor(this.props.portData.power / 10)} %</span>\r\n                        </Col>\r\n                        <Col className=\"text-right\">\r\n                            <FontAwesomeIcon icon={faCircle} className={circleLight}/>\r\n                            <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                this.props.portData.toolStatus,\r\n                                this.props.portData.isCalibrating,\r\n                                this.props.portData.isSoldering,\r\n                                this.props.portData.isPortEnabled\r\n                            )}</strong>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as StationStore from '../../../store/Station';\r\nimport { LoadCartridges, ICartridge } from '../../../utils/cartridgeUtils';\r\nimport Plot2AxisSimple from '../../content-parts/Plot2AxisSimple';\r\nimport PortStatusCard from '../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    \r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string\r\n}\r\n\r\nclass ProcessOptimizationStep3 extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n        \r\n        let cartridgeImagePath = \"\";\r\n        let cartridges = LoadCartridges();\r\n        let defaultCartridge = cartridges.find(x => x.isDefault && x.tool === this.props.selectedTool);\r\n        \r\n        if (defaultCartridge !== undefined) {\r\n            cartridgeImagePath = defaultCartridge.img;\r\n            this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n        }\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeImagePath: cartridgeImagePath\r\n        };\r\n    }\r\n    \r\n    public render() {\r\n        if (this.props.currentStep !== 3) {\r\n            return null\r\n        }\r\n\r\n        const getAlerts = () => {\r\n            let alerts = [];\r\n\r\n            alerts.push(\r\n                <Alert color=\"warning\">\r\n                    Performs multiple solderings with different cartridges\r\n                </Alert>);\r\n\r\n            return alerts;\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let stationDetail;\r\n            if (this.props.selectedStation.id != \"\") {\r\n                stationDetail =\r\n                    <React.Fragment>\r\n                        <CardText>Station Id: {this.props.selectedStation.id}</CardText>\r\n                        <CardText>Station: {this.props.selectedStation.name} [{this.props.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.props.selectedPort + 1}</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        };\r\n        \r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath\r\n            });\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Selected temperature: {this.props.selectedTemperature / 9} ºC</CardText>\r\n                                <CardText>\r\n                                    <strong>Selected cartridge:</strong>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={this.state.cartridgeImagePath} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"pr-opti-plot\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Energy: <strong>{x.solderingResult.energy} w·s</strong></CardText>\r\n                                        <CardText>Cartridge: <strong>{x.cartridge}</strong></CardText>\r\n                                    </Col>\r\n                                    <Col className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Plot2AxisSimple\r\n                                    plotData={data}\r\n                                    counterTenthSecond={x.data.length}\r\n                                    interval={Math.floor(x.data.length / 2)}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered processes</CardTitle>\r\n                        <Row xs={1} sm={2} md={3}>\r\n                            {registeredPlots}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <h4>Step 2 - Cartridge selection</h4>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    {getAlerts()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep3;\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as StationStore from '../../../store/Station';\r\nimport { CartridgeImagePathByFullName } from '../../../utils/cartridgeUtils';\r\nimport Plot2AxisSimple from '../../content-parts/Plot2AxisSimple';\r\nimport PortStatusCard from '../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    \r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTemperature: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep4 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 4) {\r\n            return null\r\n        }\r\n\r\n        const getAlerts = () => {\r\n            let alerts = [];\r\n\r\n            alerts.push(\r\n                <Alert color=\"warning\">\r\n                    Performs multiple solderings with different temperatures and the selected cartridge\r\n                </Alert>);\r\n\r\n            return alerts;\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let stationDetail;\r\n            if (this.props.selectedStation.id != \"\") {\r\n                stationDetail =\r\n                    <React.Fragment>\r\n                        <CardText>Station Id: {this.props.selectedStation.id}</CardText>\r\n                        <CardText>Station: {this.props.selectedStation.name} [{this.props.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.props.selectedPort + 1}</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        };\r\n\r\n        const getConfigurationCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <Row>\r\n                        <Col xs=\"6\">\r\n                            <CardText>Selected cartridge: {this.props.fasterSoldering.cartridge}</CardText>\r\n                            <CardText>\r\n                                <strong>Selected temperature:</strong>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    defaultValue={this.props.selectedTemperature / 9}\r\n                                    onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                >\r\n                                    <option>425</option>\r\n                                    <option>400</option>\r\n                                    <option>375</option>\r\n                                    <option>350</option>\r\n                                    <option>325</option>\r\n                                    <option>300</option>\r\n                                </Input>\r\n                            </CardText>\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <img src={CartridgeImagePathByFullName(this.props.fasterSoldering.cartridge)} />\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"pr-opti-plot\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Energy: <strong>{x.solderingResult.energy} w·s</strong></CardText>\r\n                                        <CardText>Selected temperature: <strong>{x.selectedTemperature / 9} ºC</strong></CardText>\r\n                                    </Col>\r\n                                    <Col className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Plot2AxisSimple\r\n                                    plotData={data}\r\n                                    counterTenthSecond={x.data.length}\r\n                                    interval={Math.floor(x.data.length / 2)}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered processes</CardTitle>\r\n                        <Row xs={1} sm={2} md={3}>\r\n                            {registeredPlots}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <h4>Step 3 - Temperature selection</h4>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    {getAlerts()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep4;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, ReferenceArea } from 'recharts';\r\nimport { CartridgeImagePathByFullName } from '../../../utils/cartridgeUtils';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    optimizedSoldering: IOptimizedSoldering,\r\n    selectedCartridge: string,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep5 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 5) {\r\n            return null\r\n        }\r\n\r\n        const getPlot = (temperature: number) => {\r\n            return (\r\n                <ResponsiveContainer width='100%' aspect={2.5}>\r\n                    <LineChart\r\n                        data={this.props.optimizedSoldering.points}\r\n                        margin={{\r\n                            left: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                        <XAxis\r\n                            dataKey=\"temperature\"\r\n                            height={50}\r\n                            padding={{ left: 30, right: 30 }}\r\n                            label=\"Temperature\"\r\n                            tickFormatter={(value) => Math.floor(value / 9)}\r\n                            domain={[250 * 9, 400 * 9]}\r\n                            ticks={[250 * 9, 300 * 9, 350 * 9, 400 * 9]}\r\n                            type=\"number\" />\r\n                        <YAxis\r\n                            orientation=\"left\"\r\n                            label=\"Tip life\"\r\n                            tickFormatter={(value) => value + \"x\"}\r\n                            domain={[0, 3]}\r\n                            ticks={[1, 2, 3]}\r\n                            type=\"number\" />\r\n    \r\n                        <Line dataKey=\"time\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                        <ReferenceArea\r\n                            x1={temperature - 20 * 9} x2={temperature + 20 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#fff8e1\" />\r\n                        <ReferenceArea\r\n                            x1={temperature + 20 * 9} x2={400 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ffebeb\" />\r\n                        <ReferenceArea\r\n                            x1={280 * 9} x2={temperature - 20 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ebebff\" />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            );\r\n        }\r\n\r\n        const getOptimizedSolderingPlotCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody = getPlot(this.props.optimizedSoldering.recommended.temperature)\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Performance curve</CardTitle>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <Row>\r\n                        <Col xs=\"6\">\r\n                            <CardText>Cartridge: <strong>{this.props.selectedCartridge}</strong></CardText>\r\n\r\n                            <CardText>\r\n                                <strong>Optimized:</strong>\r\n                            </CardText>\r\n                            <CardText>Tip live: {this.props.optimizedSoldering.recommended.time}x</CardText>\r\n                            <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.recommended.temperature / 9)} ºC</CardText>\r\n\r\n                            <CardText>\r\n                                <strong>Better performance:</strong>\r\n                            </CardText>\r\n                            <CardText>Tip live: {this.props.optimizedSoldering.performance.time}x\r\n                            </CardText>\r\n                            <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.performance.temperature / 9)} ºC\r\n                            </CardText>\r\n\r\n                            <CardText>\r\n                                <strong>Better durability:</strong>\r\n                            </CardText>\r\n                            <CardText>Tip live: {this.props.optimizedSoldering.durability.time}x</CardText>\r\n                            <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.durability.temperature / 9)} ºC\r\n                            </CardText>\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <img src={CartridgeImagePathByFullName(this.props.selectedCartridge)} />\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Performance result</CardTitle>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Start again</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"8\" className=\"pl-0\">\r\n                        {getOptimizedSolderingPlotCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"d-flex flex-column\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep5;\r\n","import * as React from 'react';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationStep1 from './ProcessOptimizationStep1';\r\nimport ProcessOptimizationStep2 from './ProcessOptimizationStep2';\r\nimport ProcessOptimizationStep3 from './ProcessOptimizationStep3';\r\nimport ProcessOptimizationStep4 from './ProcessOptimizationStep4';\r\nimport ProcessOptimizationStep5 from './ProcessOptimizationStep5';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nclass ProcessOptimizationView extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <ProcessOptimizationStep1\r\n                    currentStep={this.props.currentStep}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep2\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n                    isFormCorrect={this.props.isFormCorrect}\r\n                    \r\n                    stationControllers={this.props.stationControllers}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n                    \r\n                    handleStationClick={this.props.handleStationClick}\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep3\r\n                    currentStep={this.props.currentStep}\r\n                    \r\n                    selectedStation={this.props.selectedStation}\r\n                    selectedPort={this.props.selectedPort}\r\n                    selectedTool={this.props.selectedTool}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                    detectedSolderings={this.props.detectedSolderings}\r\n\r\n                    handleCartridgeChange={this.props.handleCartridgeChange}\r\n                    handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep4\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n\r\n                    selectedStation={this.props.selectedStation}\r\n                    selectedPort={this.props.selectedPort}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                    detectedSolderings={this.props.detectedSolderings}\r\n                    fasterSoldering={this.props.fasterSoldering}\r\n\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep5\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n\r\n                    optimizedSoldering={this.props.optimizedSoldering}\r\n                    selectedCartridge={this.props.selectedCartridge}\r\n\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport AssistantService from '../../../services/assistant.service'\r\nimport ProcessOptimizationService from '../../../services/processOptimization.service'\r\nimport StationService from '../../../services/station.service';\r\nimport WorkService from '../../../services/work.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationView from './ProcessOptimizationView';\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\n\r\ntype ProcessOptimizationProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSolderings: ISolderingData[],\r\n    detectedSolderingsToRemove: string[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass ProcessOptimization extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: 0,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSolderings: [],\r\n            detectedSolderingsToRemove: [],\r\n            fasterSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            },\r\n            optimizedSoldering: {\r\n                points: [],\r\n                recommended: {\r\n                    temperature: 0,\r\n                    time: 0\r\n                },\r\n                performance: {\r\n                    temperature: 0,\r\n                    time: 0\r\n                },\r\n                durability: {\r\n                    temperature: 0,\r\n                    time: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                this.applyDetectedSolderingsToRemove();\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !this.state.wasSoldering) {\r\n\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(this.state.registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = this.state.registeredData.length - nDataSoldering; i < this.state.registeredData.length; i++) {\r\n                                        data.push(this.state.registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: this.state.selectedCartridge,\r\n                                        selectedTemperature: this.state.selectedTemperature,\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                        return {\r\n                                            detectedSolderings: state.detectedSolderings.concat(soldering),\r\n                                            wasSoldering: true\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && this.state.wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                                let detectedSolderings = state.detectedSolderings;\r\n                                                let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                                let solderingResult = soldering.solderingResult;\r\n\r\n                                                solderingResult.energy = x.energy;\r\n                                                solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n                                                soldering.solderingResult = solderingResult;\r\n                                                soldering.cartridge = state.selectedCartridge;\r\n\r\n                                                detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n\r\n                                                return {\r\n                                                    detectedSolderings: detectedSolderings,\r\n                                                    wasSoldering: false\r\n                                                };\r\n                                            });\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                        let detectedSolderings = state.detectedSolderings;\r\n                                        let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                        let data = soldering.data;\r\n\r\n                                        data.push(x);\r\n                                        soldering.data = data;\r\n\r\n                                        let solderingResult = soldering.solderingResult;\r\n                                        solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                        soldering.solderingResult = solderingResult;\r\n\r\n                                        detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n\r\n                                        return {\r\n                                            detectedSolderings: detectedSolderings\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                    let registeredData = state.registeredData.concat(x);\r\n                                    registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n\r\n                                    return {\r\n                                        registeredData: registeredData,\r\n                                        lastRealTimeData: x,\r\n                                        counterTenthSecond: state.counterTenthSecond + 1\r\n                                    };\r\n                                });\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            readyGetMoreData: true\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: ProcessOptimizationProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    applyDetectedSolderingsToRemove() {\r\n        if (this.state.detectedSolderingsToRemove.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n            return {\r\n                detectedSolderings:\r\n                    state.detectedSolderings\r\n                        .filter(x => !state.detectedSolderingsToRemove\r\n                            .some(r => r === x.date)),\r\n                detectedSolderingsToRemove: []\r\n            };\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleDeleteRealTimeData = (value: string) => {\r\n            this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                return {\r\n                    detectedSolderingsToRemove: state.detectedSolderingsToRemove.concat(value)\r\n                };\r\n            });\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId != -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n\r\n            if (this.state.currentStep == 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep == 2) {\r\n                this.setState({\r\n                    currentStep: 3,\r\n                    counterTenthSecond: 0,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 3) {\r\n                this.setState({\r\n                    currentStep: 4,\r\n                    isLoading: true,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByCartridge(this.state.detectedSolderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            fasterSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 4) {\r\n                this.setState({\r\n                    currentStep: 5,\r\n                    isLoading: true\r\n                })\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByTemperature(this.state.detectedSolderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            optimizedSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 5) {\r\n                this.setState({\r\n                    currentStep: 2,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ProcessOptimizationView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n                isFormCorrect={this.state.selectedStation.id != \"\" && this.state.selectedTemperature > 0}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleDeleteRealTimeData={handleDeleteRealTimeData}\r\n                handleNextClick={handleNextClick}\r\n\r\n                selectedStation={this.state.selectedStation}\r\n                selectedPort={this.state.selectedPort}\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                counterTenthSecond={this.state.counterTenthSecond}\r\n\r\n                detectedSolderings={this.state.detectedSolderings}\r\n                fasterSoldering={this.state.fasterSoldering}\r\n                optimizedSoldering={this.state.optimizedSoldering}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(ProcessOptimization);\r\n","import ProcessOptimization from './ProcessOptimization';\r\n\r\nexport default ProcessOptimization;\r\n","import * as React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\n\r\ntype StationsProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    isLoading: boolean,\r\n    handleSetTraceabilityModeClick: (scUrl: string, newState: boolean) => void\r\n}\r\n\r\nclass StationsView extends React.PureComponent<StationsProps> {\r\n    constructor(props: StationsProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => {\r\n                        let items = [];\r\n                        items.push(\r\n                            <tr className=\"level-1\">\r\n                                <td scope=\"row\" className=\"text-left\"><strong>{sc.name}</strong></td>\r\n                                <td></td>\r\n                                <td>\r\n                                    <Button\r\n                                        outline\r\n                                        color={(sc.isQSTMode ? \"danger\" : \"secondary\")}\r\n                                        size=\"sm\"\r\n                                        className=\"pt-0 pb-0\"\r\n                                        onClick={() => this.props.handleSetTraceabilityModeClick(sc.url, !sc.isQSTMode)}\r\n                                    >\r\n                                        {sc.isQSTMode ? \"Enabled\" : \"Disabled\"}\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                        items.push(\r\n                            sc.stations.map(s => (\r\n                                <tr className=\"level-2\">\r\n                                    <td scope=\"row\" className=\"pl-3 text-left\">{s.name}</td>\r\n                                    <td>{s.model}</td>\r\n                                    <td>\r\n                                        <span className={(sc.isQSTMode && s.isQSTMode) ? \"highlight-color\" : \"\"}>{\r\n                                            sc.isQSTMode ?\r\n                                                (s.isQSTMode ? \"QST enabled\" : \"QST disabled\" ) :\r\n                                                \"--\"\r\n                                        }</span>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        )\r\n                        return items;\r\n                    })\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm station-list\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Station model</th>\r\n                            <th scope=\"col\">Traceability state</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Stations</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardText>\r\n                                {getListOptionsStationControllers()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport StationService from '../../../services/station.service';\r\nimport StationsView from './StationsView';\r\n\r\ntype StationsProps =\r\n    StationStore.StationState &\r\n    typeof StationStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean\r\n}\r\n\r\nclass Stations extends React.PureComponent<StationsProps, IState> {\r\n    constructor(props: StationsProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n    }\r\n\r\n    searchStations(props: StationsProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleSetTraceabilityModeClick = (scUrl: string, newState: boolean) => {\r\n            StationService.setTraceabilityMode(scUrl, newState);\r\n        }\r\n\r\n        return (\r\n            <StationsView\r\n                stationControllers={this.props.stationControllers}\r\n                isLoading={this.state.isLoading}\r\n                handleSetTraceabilityModeClick={handleSetTraceabilityModeClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(Stations);\r\n","import Stations from './Stations';\r\n\r\nexport default Stations;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TasksService {\r\n    static async countTasks(filter) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTasks();\r\n        }\r\n        else {\r\n            count = RestService.countTasks(filter);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTasks();\r\n        }\r\n        else {\r\n            tasks = RestService.getTasks(filter, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskById();\r\n        }\r\n        else {\r\n            task = RestService.getTaskById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n\r\n    static async createTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.createTask();\r\n        }\r\n        else {\r\n            RestService.createTask(task);\r\n        }\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.updateTask();\r\n        }\r\n        else {\r\n            RestService.updateTask(task);\r\n        }\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteTask();\r\n        }\r\n        else {\r\n            RestService.deleteTask(id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TasksService;\r\n","import PaginationNav from './PaginationNav';\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\n\r\ntype PaginationNavProps = {\r\n    totalElements: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    handlePageClick: (page: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass PaginationNav extends React.PureComponent<PaginationNavProps> {\r\n    public render() {\r\n        const getItems = (pageNumber: number, totalPages: number) => {\r\n            let items = [];\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        first\r\n                        disabled={pageNumber === 1}\r\n                        onClick={() => this.props.handlePageClick(1)} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        previous\r\n                        disabled={pageNumber === 1}\r\n                        onClick={this.props.handlePreviousPageClick} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            items.push(new Array(totalPages).fill(0).map((zero, index) =>\r\n                <PaginationItem active={pageNumber === index + 1}>\r\n                    <PaginationLink onClick={() => this.props.handlePageClick(index + 1)}>\r\n                        {index + 1}\r\n                    </PaginationLink>\r\n                </PaginationItem>\r\n            ));\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        next\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={this.props.handleNextPageClick} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        last\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={() => this.props.handlePageClick(totalPages)} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            return items;\r\n        }\r\n\r\n        let totalPages = Math.ceil(this.props.totalElements / this.props.pageSize);\r\n        let items = getItems(this.props.pageNumber, totalPages);\r\n\r\n        return (\r\n            <Pagination>\r\n                {items}\r\n            </Pagination>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons'\r\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { faFile } from '@fortawesome/free-regular-svg-icons'\r\nimport * as TaskStore from '../../../store/Task';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\n\r\ntype TasksProps = {\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\nclass TasksView extends React.PureComponent<TasksProps> {\r\n\r\n    public render() {\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.tasks) {\r\n                options.push(\r\n                    <tr>\r\n                        <td scope=\"row\">{value.id}</td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.timesPerformed}</td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + value.id + \"/detail\"}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + value.id + \"/edit\"}>\r\n                                <FontAwesomeIcon icon={faPen} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\"># of times performed</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <h1>List of Tasks</h1>\r\n\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4 float-right\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/traceability/task/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TasksView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TasksView from './TasksView';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype TasksProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    timer: number,\r\n    isLoading: boolean,\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    filter: string\r\n}\r\n\r\nclass Tasks extends React.PureComponent<TasksProps, IState> {\r\n    constructor(props: TasksProps) {\r\n        super(props);\r\n        this.state = {\r\n            timer: -1,\r\n            isLoading: true,\r\n            nTotalTasks: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1,\r\n            filter: \"\"\r\n        };\r\n\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n    }\r\n\r\n    searchTasks(props: TasksProps, filter: string, pageNumber: number) {\r\n        props.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                tasks.forEach((x: TaskStore.Task) =>\r\n                    props.createTask(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks.bind(this), WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <TasksView\r\n                tasks={this.props.tasks}\r\n                nTotalTasks={this.state.nTotalTasks}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n                handleSearchFieldChange={handleSearchFieldChange}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    TaskStore.actionCreators\r\n)(Tasks);\r\n","import Tasks from './Tasks';\r\n\r\nexport default Tasks;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport { GetTools, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\n\r\ntype TaskNewProps = {\r\n    newTask: (task: TaskStore.Task) => void,\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n    toolImagePath: string;\r\n}\r\n\r\nclass TaskNewView extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        let task = {\r\n            id: 0,\r\n            name: \"\",\r\n            workConfig: {\r\n                tool: 1,\r\n                selectedTemp: 350 * 9,\r\n                changeSelectedTemp: false\r\n            },\r\n            timesPerformed: 0\r\n        }\r\n\r\n        this.state = {\r\n            task: task,\r\n            toolImagePath: ToolImagePath(task.workConfig.tool)\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n            \r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n            let newToolImagePath = ToolImagePath(newTask.workConfig.tool);\r\n\r\n            this.setState({\r\n                task: newTask,\r\n                toolImagePath: newToolImagePath\r\n            });\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            this.props.newTask(this.state.task);\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New task</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Details</CardTitle>\r\n                            <CardText>\r\n                                <Row form>\r\n                                    <Col md=\"auto\" className=\"p-1\">Name:</Col>\r\n                                    <Col>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            onChange={(e) => handleNameChange(e.target.value)} />\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Configuration</CardTitle>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                className=\"danger\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    <CardImg src={this.state.toolImagePath} alt=\"No image available.\"/>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Create\r\n                    </Button>\r\n\r\n                    <Button color=\"danger\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to=\"/traceability/task\">Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as TaskStore from '../../../store/Task';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TaskNewView from './TaskNewView';\r\n\r\ntype TaskNewProps = {\r\n}\r\n\r\ninterface IState {\r\n    redirect: string\r\n}\r\n\r\nclass TaskNew extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\"\r\n        };\r\n    }\r\n    \r\n    public render() {\r\n        const handleNewTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .createTask(task);\r\n            \r\n            this.setState({\r\n                redirect: \"/traceability/task\"\r\n            });\r\n        }\r\n\r\n        if (this.state.redirect.length > 0) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        \r\n        return (\r\n            <TaskNewView\r\n                newTask={handleNewTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    TaskStore.actionCreators\r\n)(TaskNew);\r\n","import TaskNew from './TaskNew';\r\n\r\nexport default TaskNew;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as TaskStore from '../../../store/Task';\r\nimport { GetTools, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\n\r\ntype TaskEditProps = {\r\n    task: TaskStore.Task,\r\n    updateTask: (task: TaskStore.Task) => void,\r\n    deleteTask: (id: number) => void\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n    showDeleteModal: boolean;\r\n    toolImagePath: string;\r\n}\r\n\r\nclass TaskEditView extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            task: props.task,\r\n            showDeleteModal: false,\r\n            toolImagePath: ToolImagePath(props.task.workConfig.tool)\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const getDeleteButton = () => {\r\n            if (this.props.task.timesPerformed > 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4\">\r\n                    <a href=\"#\" className=\"p-0\" onClick={(event) => handleDeleteClick(event)}>\r\n                        <FontAwesomeIcon icon={faTrashAlt} className=\"pr-1\"/> Delete task\r\n                    </a>\r\n                </Button>\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n            \r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n            let newToolImagePath = ToolImagePath(newTask.workConfig.tool);\r\n\r\n            this.setState({\r\n                task: newTask,\r\n                toolImagePath: newToolImagePath\r\n            });\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            if (this.state.task === undefined) {\r\n                return;\r\n            }\r\n\r\n            this.props.updateTask(this.state.task);\r\n        };\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n            event.preventDefault();\r\n            this.setState({\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteTask(this.state.task.id);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.state.task.name}</h1>\r\n                    {getDeleteButton()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Details</CardTitle>\r\n                            <CardText>Code: {this.state.task.id}</CardText>\r\n                            <CardText>\r\n                                <Row form>\r\n                                    <Col md=\"auto\" className=\"p-1\">Name:</Col>\r\n                                    <Col>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            defaultValue={this.state.task.name}\r\n                                            onChange={(e) => handleNameChange(e.target.value)} />\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Configuration</CardTitle>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                className=\"danger\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                defaultChecked={this.state.task.workConfig.changeSelectedTemp}\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                defaultValue={this.state.task.workConfig.selectedTemp / 9}\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    <CardImg src={this.state.toolImagePath} alt=\"No image available.\"/>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Confirm\r\n                    </Button>\r\n\r\n                    <Button color=\"danger\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/traceability/task/\" + this.state.task.id + \"/detail\"}>Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete task</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the task? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"danger\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"danger\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskEditView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport TaskEditView from './TaskEditView';\r\n\r\ntype TaskEditProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{id: string}>;\r\n\r\ninterface IState {\r\n    id: number,\r\n    isLoading: boolean\r\n}\r\n\r\nclass TaskEdit extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n    }\r\n\r\n    searchTask(props: TaskEditProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x => {\r\n                props.createTask(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleUpdateTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .updateTask(task)\r\n                .then(() =>\r\n                    this.props.history.push(\"/traceability/task/\" + this.state.id + \"/detail\")\r\n                );\r\n        }\r\n\r\n        const handleDeleteTask = (id: number) => {\r\n            TasksService\r\n                .deleteTask(id)\r\n                .then(() =>\r\n                    this.props.history.push(\"/traceability/task\")\r\n                );\r\n        }\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id == this.state.id);\r\n\r\n        if (task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        return (\r\n            <TaskEditView\r\n                task={task}\r\n                updateTask={handleUpdateTask}\r\n                deleteTask={handleDeleteTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.task,\r\n    TaskStore.actionCreators\r\n)(TaskEdit);\r\n","import TaskEdit from './TaskEdit';\r\n\r\nexport default TaskEdit;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TaskHistoriessService {\r\n    static async countTaskHistories(taskId) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTaskHistories();\r\n        }\r\n        else {\r\n            count = RestService.countTaskHistories(taskId);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTaskHistories(id, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTaskHistories(id);\r\n\r\n        }\r\n        else {\r\n            tasks = RestService.getTaskHistories(id, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskHistoryById(id);\r\n\r\n        }\r\n        else {\r\n            task = RestService.getTaskHistoryById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n}\r\n\r\nexport default TaskHistoriessService;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle, faEye, faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport { ToolToString, ToolImagePath } from '../../../utils/toolUtils';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\n\r\ntype TaskDetailProps = {\r\n    task: TaskStore.Task | undefined,\r\n    taskHistories: TaskHistoryStore.TaskHistory[],\r\n    nTotalTaskHistories: number,\r\n\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass TaskDetailView extends React.PureComponent<TaskDetailProps> {\r\n    public render() {\r\n        if (this.props.isLoadingTask) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n\r\n        if (this.props.task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            const COLORS = ['#00C49F', '#dc3545'];\r\n\r\n            let correct = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType === 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            let incorrect = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType !== 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            let stationDetail =\r\n                <Row className=\"h-100\">\r\n                    <Col xs=\"6\">\r\n                        <CardText>Code: {this.props.task.id}</CardText>\r\n                        <CardText># of times performed: {this.props.task.timesPerformed}</CardText>\r\n                    </Col>\r\n                    <Col xs=\"6\">\r\n                        <ResponsiveContainer>\r\n                            <PieChart>\r\n                                <Pie\r\n                                    data={data}\r\n                                    dataKey=\"value\"\r\n                                >\r\n                                    {\r\n                                        data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                                    }\r\n                                </Pie>\r\n                            </PieChart>\r\n                        </ResponsiveContainer>\r\n                    </Col>\r\n                </Row>\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                        <Col xs=\"8\">\r\n                            <CardText>Tool: {ToolToString(this.props.task.workConfig.tool)}</CardText>\r\n                                <CardText>\r\n                                    Selected temperature:{\" \"}\r\n                                    {this.props.task.workConfig.changeSelectedTemp ?\r\n                                        Math.floor(this.props.task.workConfig.selectedTemp / 9) + \" ºC\" : \" No change\"}\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"4\">\r\n                                <CardImg\r\n                                    src={ToolImagePath(this.props.task.workConfig.tool)}\r\n                                    alt={ToolToString(this.props.task.workConfig.tool)} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getListHistoryTasks = () => {\r\n            if (this.props.task === undefined)\r\n                return \"\";\r\n\r\n            if (this.props.isLoadingHistories) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let items = [];\r\n\r\n            for (const value of this.props.taskHistories) {\r\n                let circleLight = \"circle-light-\" + (value.workData.workSolderings.filter(x => x.solderingType === 1).length === 0 ? \"0\" : \"1\")\r\n\r\n                items.push(\r\n                    <tr>\r\n                        <td scope=\"row\">{value.id}</td>\r\n                        <td>{new Date(value.finishDate).toLocaleDateString('es-ES')}</td>\r\n                        <td>\r\n                            <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"}/>\r\n                        </td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + this.props.task.id + \"/history/\" + value.id}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Id</th>\r\n                            <th scope=\"col\">Finished date</th>\r\n                            <th scope=\"col\">Detected defects</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.props.task.name}</h1>\r\n\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4 float-right\">\r\n                        <NavLink tag={Link} className=\"p-0\" to={\"/traceability/task/\" + this.props.task.id + \"/edit\"}>\r\n                            <FontAwesomeIcon icon={faPen} className=\"pr-1\" /> Edit task\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Task history ({this.props.nTotalTaskHistories} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListHistoryTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTaskHistories}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskDetailView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport TaskDetailView from './TaskDetailView';\r\n\r\ntype TaskDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n  & TaskHistoryStore.TaskHistoryState\r\n  & RouteComponentProps<{ id: string }>\r\n\r\ninterface IState {\r\n    id: number,\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n    nTotalTaskHistories: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass TaskDetail extends React.PureComponent<TaskDetailProps, IState> {\r\n    constructor(props: TaskDetailProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            isLoadingTask: true,\r\n            isLoadingHistories: true,\r\n            nTotalTaskHistories: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n        this.searchTaskHistories(this.props, id, this.state.pageNumber);\r\n    }\r\n\r\n    searchTask(props: TaskDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x => {\r\n                props.taskActions.createTask(x)\r\n                \r\n                this.setState({\r\n                    isLoadingTask: false\r\n                })\r\n            });\r\n    }\r\n\r\n    searchTaskHistories(props: TaskDetailProps, id: string, pageNumber: number) {\r\n        props.taskHistoryActions.deleteAllTaskHistories();\r\n\r\n        TaskHistoriesService\r\n            .getTaskHistories(id, pageNumber, this.state.pageSize)\r\n            .then(taskHistories => {\r\n                taskHistories.forEach((x: TaskHistoryStore.TaskHistory) =>\r\n                    props.taskHistoryActions.createTaskHistory(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoadingHistories: false,\r\n                    pageNumber: pageNumber\r\n                })\r\n            });\r\n\r\n        TaskHistoriesService\r\n            .countTaskHistories(id)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTaskHistories: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTaskHistories / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id == this.state.id);\r\n        const taskHistories = this.props.taskHistories;\r\n\r\n        return (\r\n            <TaskDetailView\r\n                task={task}\r\n                taskHistories={taskHistories}\r\n                nTotalTaskHistories={this.state.nTotalTaskHistories}\r\n\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n\r\n                isLoadingTask={this.state.isLoadingTask}\r\n                isLoadingHistories={this.state.isLoadingHistories}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskDetail);\r\n","import TaskDetail from './TaskDetail';\r\n\r\nexport default TaskDetail;\r\n","export function GetPlotSeriesData(temperature, power) {\r\n    let plotData = [];\r\n\r\n    for (var i = 0; i < temperature.length; i++) {\r\n        plotData.push({\r\n            tick: i,\r\n            temperature: temperature[i] / 9,\r\n            power: power[i] / 10\r\n        });\r\n    }\r\n\r\n    return plotData;\r\n}\r\n\r\nexport function EmptyPlotSeriesData(maxPLotPoints) {\r\n    let data = [];\r\n\r\n    for (var i = 0; i < maxPLotPoints; i++) {\r\n        data.push({\r\n            tick: -1,\r\n            temperature: 0,\r\n            power: 0,\r\n            toolStatus: 0,\r\n            isPortEnabled: true,\r\n            isCalibrating: false,\r\n            isSoldering: false,\r\n            tenthsOfSecondSoldering: 0\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function PushPlotSeriesData(data, realTimeData, maxPLotPoints = 100) {\r\n    data.push({\r\n        tick: data.length > 0 ? data[data.length - 1].tick + 1 : 0,\r\n        temperature: realTimeData.temperature / 9,\r\n        power: realTimeData.power / 10,\r\n        toolStatus: realTimeData.toolStatus,\r\n        isPortEnabled: realTimeData.isPortEnabled,\r\n        isCalibrating: realTimeData.isCalibrating,\r\n        isSoldering: realTimeData.isSoldering\r\n    });\r\n\r\n    if (maxPLotPoints > 0 && maxPLotPoints < data.length) {\r\n        data.splice(0, data.length - maxPLotPoints);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport { SecToString } from '../../../utils/timeUtils';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2Axis extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -10,\r\n                        right: -10\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={50}\r\n                        label={\"Time (s)\"}\r\n                        tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                        interval={this.props.interval} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={[0, 400]} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        domain={[0, 100]} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2Axis;\r\n","import Plot2Axis from './Plot2Axis';\r\n\r\nexport default Plot2Axis;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: number[]\r\n}\r\n\r\ninterface IPowerData {\r\n    power: number\r\n}\r\n\r\nclass PlotPowerAxisSimple extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        let plotDataObj = this.props.plotData.map((x) => {\r\n            return {power: x}\r\n        });\r\n\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -60,\r\n                        right: -60\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0}\r\n                        label=\"\"\r\n                        tick={false} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"power\" yAxisId=\"left\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotPowerAxisSimple;\r\n","import PlotPowerAxisSimple from './PlotPowerAxisSimple';\r\n\r\nexport default PlotPowerAxisSimple;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Button, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport { ToolToString, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { GetPlotSeriesData } from '../../../utils/plotUtils';\r\nimport { ClassificationToString } from '../../../utils/solderingClassificationUtils';\r\nimport Plot2Axis from '../../content-parts/Plot2Axis';\r\nimport PlotPowerAxisSimple from '../../content-parts/PlotPowerAxisSimple';\r\nimport './TaskHistoryDetail.css';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    task: TaskStore.Task,\r\n    taskHistory: TaskHistoryStore.TaskHistory\r\n}\r\n\r\nclass TaskHistoryDetailView extends React.PureComponent<TaskHistoryDetailProps> {\r\n    public render() {\r\n        const getDetailsCard = () => {\r\n            const COLORS = ['#00C49F', '#dc3545'];\r\n\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n\r\n            let correct = workSolderings.filter(x => x.solderingType === 0).length;\r\n            let incorrect = workSolderings.length - correct;\r\n\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            let stationDetail =\r\n                <Row>\r\n                    <Col xs=\"6\">\r\n                        <CardText>Finished date: {new Date(this.props.taskHistory.finishDate).toLocaleDateString('es-ES')}</CardText>\r\n                        <CardText>Task name: {this.props.task.name}</CardText>\r\n                        <CardText>Task code: {this.props.task.id}</CardText>\r\n                        <CardText>Station Id: {this.props.taskHistory.workData.stationId}</CardText>\r\n                        <CardText>Station name: {this.props.taskHistory.workData.stationName}</CardText>\r\n                        <CardText>Port: {this.props.taskHistory.workData.stationPort + 1}</CardText>\r\n                    </Col>\r\n                    <Col xs=\"6\">\r\n                        <ResponsiveContainer>\r\n                            <PieChart>\r\n                                <Pie\r\n                                    data={data}\r\n                                    dataKey=\"value\"\r\n                                >\r\n                                    {\r\n                                        data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                                    }\r\n                                </Pie>\r\n                            </PieChart>\r\n                        </ResponsiveContainer>\r\n                    </Col>\r\n                </Row>\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"8\">\r\n                                <CardText>Tool: {ToolToString(this.props.taskHistory.workConfig.tool)}</CardText>\r\n                                {this.props.taskHistory.workConfig.change_selected_temp ?\r\n                                    <CardText>Selected temperature: {this.props.taskHistory.workConfig.selected_temp / 9} ºC </CardText>: \"\"}\r\n                            </Col>\r\n                            <Col xs=\"4\">\r\n                                <CardImg\r\n                                    src={ToolImagePath(this.props.taskHistory.workConfig.tool)}\r\n                                    alt={ToolToString(this.props.taskHistory.workConfig.tool)} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredDataCard = () => {\r\n            let plotData = GetPlotSeriesData(this.props.taskHistory.workData.temperature, this.props.taskHistory.workData.power);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered data</CardTitle>\r\n                        <CardText className=\"p-3\">\r\n                            <Plot2Axis\r\n                                plotData={plotData}\r\n                                counterTenthSecond={plotData.length}\r\n                                interval={Math.floor(plotData.length / 5)}\r\n                            />\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getSolderingsCard = () => {\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n\r\n            let registeredSolderings = workSolderings.map(x => {\r\n                let circleLight = \"circle-light-\" + (x.solderingType === 0 ? \"0\" : \"1\")\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"pr-opti-plot\">\r\n                            <CardBody>\r\n                                <CardText>\r\n                                    Detected defect: <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"}/>\r\n                                    <strong className=\"pl-1\">{ClassificationToString(x.solderingType)}</strong>\r\n                                </CardText>\r\n                                <PlotPowerAxisSimple\r\n                                    plotData={x.power}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Detected solderings</CardTitle>\r\n                        <Row xs={1} sm={2} md={3}>\r\n                            {registeredSolderings}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.props.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getSolderingsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredDataCard()}\r\n                </Row>\r\n                <Row>\r\n                    <Button color=\"danger\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/traceability/task/\" + this.props.task.id + \"/detail\"}>Return</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskHistoryDetailView;\r\n","export function GetClassifications()\r\n{\r\n    var values =\r\n    {\r\n        0: \"Correct\",\r\n        1: \"Low thermal contact\",\r\n        2: \"Slow soldering\",\r\n        3: \"Fact soldering\",\r\n        4: \"Oscillations\",\r\n        5: \"Excess tin\",\r\n        6: \"Little tin\"\r\n    }\r\n    return values;\r\n}\r\n\r\nexport function ClassificationToString(id)\r\n{\r\n    let value = GetClassifications()[id];\r\n\r\n    if (typeof(value) === \"undefined\") {\r\n        return \"Undefined\";\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport TaskHistoryDetailView from './TaskHistoryDetailView';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n  & TaskHistoryStore.TaskHistoryState\r\n  & RouteComponentProps<{ taskId: string, historyId: string }>\r\n\r\ninterface IState {\r\n    taskId: number,\r\n    taskHistoryId: number,\r\n    isLoading: boolean\r\n}\r\n\r\nclass TaskHistoryDetail extends React.PureComponent<TaskHistoryDetailProps, IState> {\r\n    constructor(props: TaskHistoryDetailProps) {\r\n        super(props);\r\n        const taskId = TryParseInt(this.props.match.params['taskId'], 0);\r\n        const taskHistoryId = TryParseInt(this.props.match.params['historyId'], 0);\r\n\r\n        this.state = {\r\n            taskId: taskId,\r\n            taskHistoryId: taskHistoryId,\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchTask(this.props, taskId);\r\n        this.searchTaskHistories(this.props, taskHistoryId);\r\n    }\r\n\r\n    searchTask(props: TaskHistoryDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x =>\r\n                props.taskActions.createTask(x)\r\n            );\r\n    }\r\n\r\n    searchTaskHistories(props: TaskHistoryDetailProps, id: string) {\r\n        TaskHistoriesService\r\n            .getTaskHistoryById(id)\r\n            .then(x => {\r\n                props.taskHistoryActions.createTaskHistory(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const task = this.props.tasks.find(x => x.id == this.state.taskId);\r\n        const taskHistory = this.props.taskHistories.find(x => x.id == this.state.taskHistoryId);\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n\r\n        if (task === undefined || taskHistory === undefined) {\r\n            return \"No item founded.\";\r\n        }\r\n\r\n        return (\r\n            <TaskHistoryDetailView\r\n                task={task}\r\n                taskHistory={taskHistory}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskHistoryDetail);\r\n","import TaskHistoryDetail from './TaskHistoryDetail';\r\n\r\nexport default TaskHistoryDetail;\r\n","import * as React from 'react';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\n\r\ntype StationsProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    isLoading: boolean\r\n}\r\n\r\nclass StationListSideView extends React.PureComponent<StationsProps> {\r\n    public render() {\r\n        let items = [];\r\n        items.push(<ListGroupItem className=\"level-0\">Stations</ListGroupItem>);\r\n        \r\n        if (this.props.isLoading) {\r\n            items.push(\r\n                <div className=\"text-center mt-3\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n        else {\r\n            for (const sc of this.props.stationControllers) {\r\n                items.push(<ListGroupItem className=\"level-1\"><strong>{sc.name}</strong></ListGroupItem>)\r\n\r\n                for (const s of sc.stations) {\r\n                    items.push(<ListGroupItem className=\"level-2\">{s.name} [{s.model}]</ListGroupItem>)\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ListGroup className=\"station-list\">{items}</ListGroup>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StationListSideView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport StationService from '../../../services/station.service';\r\nimport StationListSideView from './StationListSideView';\r\n\r\ntype StationsProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n\r\ninterface IState {\r\n    isLoading: boolean\r\n}\r\n\r\nclass StationListSide extends React.PureComponent<StationsProps, IState> {\r\n    constructor(props: StationsProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n    }\r\n\r\n    searchStations(props: StationsProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <StationListSideView\r\n                stationControllers={this.props.stationControllers}\r\n                isLoading={this.state.isLoading}\r\n            />\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(StationListSide);\r\n","import StationListSide from './StationListSide';\r\n\r\nexport default StationListSide;\r\n","import * as React from 'react';\r\nimport { Input } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\n\r\ntype WorkProps = {\r\n    currentStep: number,\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoadingTasks: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleTaskClick: (task: TaskStore.Task) => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\ninterface IState {\r\n    taskFilter: string[]\r\n}\r\n\r\nclass WorkStep1 extends React.PureComponent<WorkProps, IState> {\r\n    constructor(props: WorkProps) {\r\n        super(props);\r\n        this.state = {\r\n            taskFilter: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoadingTasks) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.tasks.map(x => (\r\n                    <tr onClick={() => this.props.handleTaskClick(x)}>\r\n                        <td scope=\"row\">{x.id}</td>\r\n                        <td>{x.name}</td>\r\n                        <td>{ToolToString(x.workConfig.tool)}</td>\r\n                    </tr>\r\n                ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkStep1;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\n\r\ntype WorkProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    taskTool: number,\r\n    currentStep: number,\r\n    handleStationClick: (station: StationStore.Station, port: number) => void\r\n}\r\n\r\nclass WorkStep2 extends React.PureComponent<WorkProps> {\r\n    constructor(props: WorkProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsStationControllers = () => {\r\n            let options =\r\n                this.props.stationControllers\r\n                    .filter(sc => (\r\n                        sc.stations.some(s => (\r\n                            s.ports.some(p => (\r\n                                p.tool == this.props.taskTool\r\n                            ))\r\n                        ))\r\n                    ))\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                            .filter(p => (\r\n                                p.tool == this.props.taskTool\r\n                            ))\r\n                            .map(p => (\r\n                                <tr onClick={() => this.props.handleStationClick(s, p.id)}>\r\n                                    <td scope=\"row\">{s.name}</td>\r\n                                    <td>{p.id + 1}</td>\r\n                                    <td>{ToolToString(p.tool)}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Stations available</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsStationControllers()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkStep2;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../utils/portUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport Plot2Axis from '../../content-parts/Plot2Axis';\r\n\r\ntype WorkProps = {\r\n    taskId: number,\r\n    stationId: string,\r\n    queueId: number,\r\n    currentStep: number,\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\nclass WorkStep3 extends React.PureComponent<WorkProps> {\r\n    constructor(props: WorkProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 3) {\r\n            return null\r\n        }\r\n\r\n        let portData = this.props.plotData[this.props.plotData.length - 1];\r\n        let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n            portData.toolStatus,\r\n            portData.isCalibrating,\r\n            portData.isSoldering,\r\n            portData.isPortEnabled);\r\n\r\n        return (\r\n            <Row className=\"mb-2\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row className=\"pb-2\">\r\n                            <Col xs=\"auto\">\r\n                                Temperature:{' '}\r\n                                <span className=\"temp-value\"> {Math.floor(portData.temperature)} ºC</span>\r\n                            </Col>\r\n                            <Col>\r\n                                Power:{' '}\r\n                                <span className=\"power-value\">{Math.floor(portData.power)} %</span>\r\n                            </Col>\r\n                            <Col className=\"text-right\">\r\n                                <FontAwesomeIcon icon={faCircle} className={circleLight}/>\r\n                                <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                    portData.toolStatus,\r\n                                    portData.isCalibrating,\r\n                                    portData.isSoldering,\r\n                                    portData.isPortEnabled\r\n                                )}</strong>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Plot2Axis\r\n                                plotData={this.props.plotData}\r\n                                counterTenthSecond={this.props.counterTenthSecond}\r\n                                interval={this.props.interval}\r\n                            />\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkStep3;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button } from 'reactstrap';\r\nimport { Alert } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as StationStore from '../../../store/Station';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport WorkService from '../../../services/work.service';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ToolToString, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { EmptyPlotSeriesData, PushPlotSeriesData } from '../../../utils/plotUtils';\r\nimport StationListSide from '../../content-parts/StationListSide';\r\nimport WorkStep1 from './WorkStep1';\r\nimport WorkStep2 from './WorkStep2';\r\nimport WorkStep3 from './WorkStep3';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype WorkProps =\r\n    TaskStore.TaskState &\r\n    StationStore.StationState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    selectedTask: TaskStore.Task,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n\r\n    queueId: number,\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n\r\n    currentStep: number,\r\n    showFinishTaskModal: boolean,\r\n    timer: number,\r\n\r\n    nTotalTasks: number,\r\n    pageNumber: number,\r\n    pageSize: number,\r\n    filter: string,\r\n\r\n    isLoadingTasks: boolean\r\n}\r\n\r\nconst MAX_POINTS_PLOT = 400;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 100;\r\n\r\nclass Work extends React.PureComponent<WorkProps, IState> {\r\n    constructor(props: WorkProps) {\r\n        super(props);\r\n\r\n        let plotData = EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n        this.state = {\r\n            selectedTask: {\r\n                id: 0,\r\n                name: \"\",\r\n                workConfig: {\r\n                    tool: 0,\r\n                    selectedTemp: 0,\r\n                    changeSelectedTemp: false\r\n                },\r\n                timesPerformed: 0\r\n            },\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n\r\n            queueId: -1,\r\n            plotData: plotData,\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n\r\n            currentStep: 1,\r\n            showFinishTaskModal: false,\r\n            timer: -1,\r\n\r\n            nTotalTasks: 0,\r\n            pageNumber: 1,\r\n            pageSize: 25,\r\n            filter: \"\",\r\n\r\n            isLoadingTasks: true\r\n        };\r\n\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        let plotData = this.state.plotData;\r\n                        let counterTenthSecond = this.state.counterTenthSecond\r\n\r\n                        values.forEach(x => {\r\n                            PushPlotSeriesData(plotData, x, MAX_POINTS_PLOT);\r\n                            counterTenthSecond++\r\n                        });\r\n\r\n                        this.setState({\r\n                            plotData: plotData,\r\n                            readyGetMoreData: true,\r\n                            counterTenthSecond: counterTenthSecond\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchTasks(props: WorkProps, filter: string, pageNumber: number) {\r\n        props.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoadingTasks: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                tasks.forEach((x: TaskStore.Task) =>\r\n                    props.createTask(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoadingTasks: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const getMetadata = () => {\r\n            if (this.state.currentStep == 1) {\r\n                return (\r\n                    <Alert color=\"danger\">\r\n                        Select a task to continue.\r\n                    </Alert>\r\n                )\r\n            }\r\n\r\n            let alert;\r\n            if (this.state.selectedStation.id == \"\") {\r\n                alert =\r\n                    <Alert color=\"danger\" className=\"mt-3\">\r\n                        Select a station to continue.\r\n                    </Alert>\r\n            }\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {getDetails()}\r\n                    {getConfiguration()}\r\n                    {alert}\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        const getDetails = () => {\r\n            let taskDetail =\r\n                <React.Fragment>\r\n                    <CardText>Task name: {this.state.selectedTask.name}</CardText>\r\n                    <CardText>Task code: {this.state.selectedTask.id}</CardText>\r\n                </React.Fragment>\r\n\r\n            let stationDetail;\r\n            if (this.state.selectedStation.id != \"\") {\r\n                stationDetail =\r\n                    <React.Fragment>\r\n                        <CardText>Station Id: {this.state.selectedStation.id}</CardText>\r\n                        <CardText>Station: {this.state.selectedStation.name} [{this.state.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.state.selectedPort + 1}</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        <Row className=\"pd-1\">\r\n                            <Col xs=\"6\">{taskDetail}</Col>\r\n                            <Col xs=\"6\">{stationDetail}</Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <Row className=\"mb-2\">\r\n                    {card}\r\n                </Row>\r\n            )\r\n        };\r\n\r\n        const getConfiguration = () => {\r\n            return (\r\n                <Row className=\"mb-2\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Configuration</CardTitle>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n                                    <CardText>Tool: {ToolToString(this.state.selectedTask.workConfig.tool)}</CardText>\r\n                                    {this.state.selectedTask.workConfig.changeSelectedTemp ?\r\n                                        <CardText>Selected temperature: {this.state.selectedTask.workConfig.selectedTemp / 9} ºC </CardText>: \"\"}\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    <CardImg\r\n                                        src={ToolImagePath(this.state.selectedTask.workConfig.tool)}\r\n                                        alt={ToolToString(this.state.selectedTask.workConfig.tool)} />\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        const getPreviousButton = () => {\r\n            if (this.state.currentStep == 2) {\r\n                return (\r\n                    <Button\r\n                        outline\r\n                        color=\"danger\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={() => previous()}\r\n                    >Previous</Button>\r\n                )\r\n            }\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            let text = \"\";\r\n            let isValid = false;\r\n\r\n            if (this.state.currentStep == 2) {\r\n                text = \"Start task\";\r\n                isValid = this.state.selectedStation.id != \"\";\r\n            }\r\n            else if (this.state.currentStep == 3) {\r\n                text = \"Stop task\";\r\n                isValid = true;\r\n            }\r\n\r\n            if (!isValid) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={() => next()}\r\n                >{text}</Button>\r\n            )\r\n        }\r\n\r\n        const previous = () => {\r\n            this.setState({\r\n                currentStep: this.state.currentStep - 1\r\n            })\r\n        }\r\n\r\n        const next = () => {\r\n            if (this.state.currentStep == 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep == 2) {\r\n                let plotData = EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n                this.setState({\r\n                    plotData: plotData,\r\n                    counterTenthSecond: 0\r\n                })\r\n\r\n                WorkService\r\n                    .startTrace(this.state.selectedTask.id, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then(() =>\r\n                        this.setState({\r\n                            currentStep: 3\r\n                        })\r\n                );\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    showFinishTaskModal: true\r\n                })\r\n            }\r\n        }\r\n\r\n        const handleTaskClick = (task: TaskStore.Task) => {\r\n            this.setState({\r\n                selectedTask: task,\r\n                currentStep: 2\r\n            })\r\n        }\r\n\r\n        const handleStationClick = (station: StationStore.Station, port: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port\r\n            })\r\n        }\r\n\r\n        const handleFinishTaskConfirmClick = () => {\r\n            WorkService\r\n                .stopTrace(this.state.selectedStation.id, this.state.selectedPort);\r\n\r\n            var queueId = this.state.queueId;\r\n\r\n            this.setState({\r\n                queueId: -1,\r\n                currentStep: 2,\r\n                showFinishTaskModal: false\r\n            });\r\n\r\n            WorkService\r\n                .stopRealTimeData(this.state.selectedStation.id, queueId);\r\n        };\r\n\r\n        const handleFinishTaskCancelClick = () => {\r\n            this.setState({\r\n                showFinishTaskModal: false\r\n            });\r\n        };\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks, WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Work process</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"9\">\r\n                        <WorkStep3\r\n                            taskId={this.state.selectedTask.id}\r\n                            stationId={this.state.selectedStation.id}\r\n                            queueId={this.state.queueId}\r\n                            currentStep={this.state.currentStep}\r\n                            plotData={this.state.plotData}\r\n                            counterTenthSecond={this.state.counterTenthSecond}\r\n                            interval={MAX_POINTS_PLOT / 5}\r\n                        />\r\n                        {getMetadata()}\r\n                        <WorkStep1\r\n                            currentStep={this.state.currentStep}\r\n                            tasks={this.props.tasks}\r\n                            nTotalTasks={this.state.nTotalTasks}\r\n                            pageSize={this.state.pageSize}\r\n                            pageNumber={this.state.pageNumber}\r\n                            isLoadingTasks={this.state.isLoadingTasks}\r\n\r\n                            handlePageClick={handlePageClick}\r\n                            handlePreviousPageClick={handlePreviousPageClick}\r\n                            handleNextPageClick={handleNextPageClick}\r\n                            handleTaskClick={handleTaskClick}\r\n                            handleSearchFieldChange={handleSearchFieldChange}\r\n                        />\r\n                        <WorkStep2\r\n                            stationControllers={this.props.stationControllers}\r\n                            taskTool={this.state.selectedTask.workConfig.tool}\r\n                            currentStep={this.state.currentStep}\r\n                            handleStationClick={handleStationClick}\r\n                        />\r\n                        <Row>\r\n                            {getPreviousButton()}\r\n                            {getNextButton()}\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"3\">\r\n                        <StationListSide/>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showFinishTaskModal} toggle={() => handleFinishTaskCancelClick()}>\r\n                    <ModalHeader toggle={() => handleFinishTaskCancelClick()}>Finish task</ModalHeader>\r\n                    <ModalBody>Are you sure to finish the task?</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"danger\" onClick={() => handleFinishTaskConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"danger\" onClick={() => handleFinishTaskCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers,\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    TaskStore.actionCreators\r\n)(Work);\r\n","import Home from './components/content-pages/Home';\r\nimport ProcessOptimization from './components/content-pages/ProcessOptimization';\r\nimport Stations from './components/content-pages/Stations';\r\nimport Tasks from './components/content-pages/Tasks';\r\nimport TaskNew from './components/content-pages/TaskNew';\r\nimport TaskEdit from './components/content-pages/TaskEdit';\r\nimport TaskDetail from './components/content-pages/TaskDetail';\r\nimport TaskHistoryDetail from './components/content-pages/TaskHistoryDetail';\r\nimport Work from './components/content-pages/Work';\r\n\r\nexport default [\r\n  { path: \"/\", name: \"Home\", Component: Home },\r\n  { path: \"/processes/optimization\", name: \"Processes\", Component: ProcessOptimization },\r\n  { path: \"/traceability/stations\", name: \"Stations\", Component: Stations },\r\n  { path: \"/traceability/task\", name: \"Tasks\", Component: Tasks },\r\n  { path: \"/traceability/task/new\", name: \"New\", Component: TaskNew },\r\n  { path: \"/traceability/task/:id/detail\", name: \"Details\", Component: TaskDetail },\r\n  { path: \"/traceability/task/:id/edit\", name: \"Edit\", Component: TaskEdit },\r\n  { path: \"/traceability/task/:taskId/history/:historyId\", name: \"History\", Component: TaskHistoryDetail },\r\n  { path: \"/traceability/work\", name: \"Work\", Component: Work }\r\n];\r\n","import * as React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { Container } from 'reactstrap';\r\nimport Breadcrumbs from './components/content-components/Breadcrumbs';\r\nimport Layout from './components/Layout';\r\nimport routes from \"./routes\";\r\n\r\nimport './custom.scss'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Switch>\r\n            {routes.map(({ path, name, Component }, key) => (\r\n                <Route\r\n                    exact\r\n                    path={path}\r\n                    key={key}\r\n                    render={props => {\r\n                        const crumbs = routes\r\n                            .filter(({ path }) => props.match.path.includes(path))\r\n                            .map(({ path, ...rest }) => ({\r\n                                path: Object.keys(props.match.params).length\r\n                                    ? Object.keys(props.match.params).reduce(\r\n                                        (path, param) =>\r\n                                            path.replace(`:${param}`, props.match.params[param]),\r\n                                            path\r\n                                    )\r\n                                    : path,\r\n                                ...rest\r\n                            }));\r\n\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Breadcrumbs crumbs={crumbs} />\r\n                                <Container id=\"content-wrap\" className=\"mt-3\">\r\n                                    <Route exact path={path} key={key} component={Component} />\r\n                                </Container>\r\n                            </React.Fragment>\r\n                        );\r\n                    }}\r\n                />\r\n            ))}\r\n        </Switch>\r\n    </Layout>\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}