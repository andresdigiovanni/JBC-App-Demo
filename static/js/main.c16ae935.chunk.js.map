{"version":3,"sources":["store/Task.ts","store/TaskHistory.ts","store/Station.ts","store/index.ts","store/Assistant.ts","components/content-components/Breadcrumbs/index.js","components/content-components/Breadcrumbs/Breadcrumbs.tsx","components/content-components/Footer/index.js","components/content-components/Footer/Footer.tsx","components/content-components/NavMenu/index.js","components/content-components/NavMenu/NavMenu.tsx","components/Layout.tsx","components/content-parts/Card/CardView.tsx","components/content-pages/Home/index.js","components/content-pages/Home/Home.tsx","components/content-pages/processes/Processes/index.js","components/content-pages/processes/Processes/Processes.tsx","configuration.js","utils/timeUtils.js","services/fake.service.ts","services/restService.js","services/assistant.service.js","services/processOptimization.service.js","services/station.service.js","services/work.service.js","utils/numberUtils.js","components/content-parts/MultiStepNav/index.js","components/content-parts/MultiStepNav/MultiStepNav.tsx","utils/toolUtils.js","components/content-parts/StationsPortList/index.js","components/content-parts/StationsPortList/StationsPortList.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_Station.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_Temp.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_ProcessParameters.tsx","utils/cartridgeData/T470.js","utils/cartridgeData/T245.js","utils/cartridgeData/T210.js","utils/cartridgeData/PA120.js","utils/cartridgeData/NT105.js","utils/cartridgeData/NP105.js","utils/cartridgeData/HT420.js","utils/cartridgeData/DS360.js","utils/cartridgeData/DR560.js","utils/cartridgeData/AP250.js","utils/cartridgeUtils.tsx","components/content-parts/Plot2AxisTiny/index.js","components/content-parts/Plot2AxisTiny/Plot2AxisTiny.tsx","utils/portUtils.js","components/content-parts/PortStatusCard/index.js","components/content-parts/PortStatusCard/PortStatusCard.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_CartridgeTest.tsx","utils/arrayUtils.js","utils/mathUtils.js","utils/plotUtils.js","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_CartridgeResult.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_TempTest.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_Performance.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationView.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimization.tsx","components/content-pages/processes/ProcessOptimization/index.js","components/content-components/PaginationNav/index.js","components/content-components/PaginationNav/PaginationNav.tsx","components/content-parts/PlotPowerAxisTiny/PlotPowerAxisTiny.tsx","components/content-parts/PlotPowerAxisTiny/index.js","components/content-pages/processes/SolderingAssistant/SolderingAssistantView.tsx","components/content-pages/processes/SolderingAssistant/SolderingAssistant.tsx","components/content-pages/processes/SolderingAssistant/index.js","components/content-pages/processes/SolderingAssistantNew/SolderingAssistantNewStep1.tsx","components/content-parts/Plot2Axis/Plot2Axis.tsx","components/content-parts/Plot2Axis/index.js","components/content-pages/processes/SolderingAssistantNew/SolderingAssistantNewStep2.tsx","components/content-pages/processes/SolderingAssistantNew/SolderingAssistantNewView.tsx","components/content-pages/processes/SolderingAssistantNew/SolderingAssistantNew.tsx","components/content-pages/processes/SolderingAssistantNew/index.js","components/content-pages/traceability/Traceability/index.js","components/content-pages/traceability/Traceability/Traceability.tsx","services/tasks.service.js","components/content-pages/traceability/Tasks/TasksView.tsx","components/content-pages/traceability/Tasks/Tasks.tsx","components/content-pages/traceability/Tasks/index.js","components/content-pages/traceability/TaskNew/TaskNewView.tsx","components/content-pages/traceability/TaskNew/TaskNew.tsx","components/content-pages/traceability/TaskNew/index.js","components/content-pages/traceability/TaskEdit/TaskEditView.tsx","components/content-pages/traceability/TaskEdit/TaskEdit.tsx","components/content-pages/traceability/TaskEdit/index.js","services/taskHistories.service.js","components/content-parts/ResponsivePieChart/index.js","components/content-parts/ResponsivePieChart/ResponsivePieChart.tsx","components/content-pages/traceability/TaskDetail/TaskDetailView.tsx","components/content-pages/traceability/TaskDetail/TaskDetail.tsx","components/content-pages/traceability/TaskDetail/index.js","components/content-parts/PlotReferenceTiny/index.js","components/content-parts/PlotReferenceTiny/PlotReferenceTiny.tsx","components/content-pages/traceability/TaskHistoryDetail/TaskHistoryDetailView.tsx","utils/solderingClassificationUtils.js","components/content-pages/traceability/TaskHistoryDetail/TaskHistoryDetail.tsx","components/content-pages/traceability/TaskHistoryDetail/index.js","components/content-pages/traceability/WorkProcess/WorkProcessStep1.tsx","components/content-pages/traceability/WorkProcess/WorkProcessStep2.tsx","components/content-parts/PlotReference/index.js","components/content-parts/PlotReference/PlotReference.tsx","components/content-pages/traceability/WorkProcess/WorkProcessStep3.tsx","components/content-pages/traceability/WorkProcess/WorkProcess.tsx","components/content-pages/traceability/WorkProcess/index.js","components/content-pages/traceability/Workbenchs/WorkbenchsView.tsx","components/content-pages/traceability/Workbenchs/Workbenchs.tsx","routes.js","App.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts"],"names":["actionCreators","createTask","task","type","result","deleteTask","id","deleteAllTasks","setTotalTasks","number","createTaskHistory","taskHistory","deleteTaskHistory","deleteAllTaskHistories","createStationController","sc","deleteStationController","deleteAllStationControllers","createStation","station","scId","deleteStation","reducers","assistant","state","incomingAction","undefined","references","nTotalReferences","action","find","x","concat","filter","tasks","nTotalTasks","taskHistories","stationControllers","stations","map","push","Breadcrumbs","this","props","crumbs","length","className","Container","Breadcrumb","key","name","path","BreadcrumbItem","active","NavLink","tag","Link","to","React","PureComponent","Footer","year","Date","getFullYear","pkg","version","NavMenu","isOpen","toggle","setState","Navbar","light","NavbarBrand","src","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","children","CardView","imgPath","cardText","cardTitle","Card","CardBody","CardImg","CardText","CardTitle","Home","Row","xs","sm","md","Col","Processes","Configuration","FakeMode","SecToString","sec_num","hours","Math","floor","minutes","seconds","sleep","ms","Promise","resolve","setTimeout","FakeService","console","log","energy","random","similarity","tenthsOfSecondSoldering","_getReferences","nReferences","referenceName","i","components","reference","power","cartridge","temperature","durationTenthsSeconds","_getTasks","nTasks","taskId","taskName","tool","selectedTemp","changeSelectedTemp","round","changeSolderingReference","qualityControl","workConfig","solderingReferenceId","timesPerformed","_getTaskHistories","historyId","change_selected_temp","change_soldering_ref","now","solderingReference","stationId","stationName","stationPort","Array","from","workSolderings","solderingType","finishDate","workData","d","getSeconds","isPortEnabled","toolStatus","isCalibrating","isSoldering","data","reduce","total","time","points","tipLife","rateSoldMin","recommended","performance","durability","scs","iSc","url","isQSTMode","iSt","model","ports","nPorts","pow","p","port","RestService","doGetRequest","ENDPOINT_ASSISTANT","pageNumber","pageSize","doDeleteRequest","file","doFormDataPostRequest","doPostRequest","ENDPOINT_WORK","doPutRequest","ENDPOINT_WORK_HISTORY","ENDPOINT_TRACE","ENDPOINT_REAL_TIME","queueId","solderings","ENDPOINT_PROCESS_OPTIMIZATION","ENDPOINT_STATIONS","scUrl","newState","resource","axios","get","success","error","method","post","headers","delete","AssistantService","getSolderingResult","count","countReferences","getReferences","getReferenceById","deleteReference","uploadReference","downloadReference","generateReferenceSoldering","ProcessOptimizationService","betterSoldering","getBetterOptimizationByCartridge","getBetterOptimizationByTemperature","StationsService","getStations","setSelectedTemperature","setTraceabilityMode","WorkService","startTrace","stopTrace","startRealTimeData","stopRealTimeData","getRealTimeData","TryParseInt","str","defaultValue","retValue","isNaN","parseInt","Round","num","decimals","f","Number","EPSILON","MultiStepNav","items","labels","index","current","ToolToString","1","2","3","4","5","6","7","8","9","31","32","33","34","StationsPortList","isLoading","Spinner","color","options","s","handleStationClick","scope","getListOptionsStationControllers","ProcessOptimizationStep_Station","filtered","isLoadingStations","ProcessOptimizationStep_Temp","Input","selectedTemperature","onChange","e","handleSelecTempChange","target","value","ProcessOptimizationStep_ProcessParameters","selectedOffsetTime","handleOffsetTimeChange","LoadCartridges","cartridges","MapCatridges","T470data","T245data","T210data","PA120data","NT105data","NP105data","HT420data","DS360data","DR560data","AP250data","cartridgeRoot","_","family","F","def","Default","Cartridge_list","forEach","item","GetToolIdByFamily","fullName","N","isDefault","img","CartridgeImagePath","toLowerCase","CartridgeImagePathByFullName","Plot2AxisTiny","width","aspect","plotData","margin","left","dataKey","height","yAxisId","orientation","tick","domain","stroke","dot","GetPortStatus2String","GetPortStatus2Lights","PortStatusCard","portData","circleLight","icon","faCircle","ProcessOptimizationStep_CartridgeTest","cartridgeImagePath","cartridgeName","defaultCartridge","selectedTool","handleCartridgeChange","lastRealTimeData","selected","detectedSolderings","registeredPlots","solderingResult","handleDeleteRealTimeData","date","faTrashAlt","counterTenthSecond","interval","getRegisteredPlots","RemoveDuplicates","values","indexOf","Average","sum","Variance","avg","diff","EmptyPlotSeriesData","maxPLotPoints","PushPlotSeriesData","realTimeData","maxPlotPoints","splice","ProcessOptimizationStep_CartridgeResult","getPlot","vals","min","max","step","Range","valuesCart","variance","mean","m","sqrt","PI","exp","ProbabilityDensityFunction","colors","fill","areas","fillOpacity","label","tickFormatter","cardBody","fasterSoldering","getPlotCard","std","StandardDeviation","getTableCard","ProcessOptimizationStep_TempTest","getConfigurationCard","ProcessOptimizationStep_Performance","tempRecommended","tempDurability","tempPerformance","optimizedSoldering","padding","ticks","x1","x2","y1","y2","getOptimizedSolderingPlotCard","selectedCartridge","getDetailsCard","ProcessOptimizationView","currentStep","selectedStation","selectedPort","nextButton","Button","size","handleNextClick","getButtons","ProcessOptimization","timerSelectedTemp","registeredData","readyGetMoreData","wasSoldering","detectedSolderingsToRemove","searchStations","setInterval","applyDetectedSolderingsToRemove","then","isArray","nDataSoldering","soldering","toString","StationService","some","r","setSelectedTemperatureRequest","window","clearTimeout","nValue","connect","StationStore","PaginationNav","totalPages","ceil","totalElements","PaginationItem","PaginationLink","first","disabled","handlePageClick","previous","handlePreviousPageClick","zero","next","handleNextPageClick","last","getItems","Pagination","PlotPowerAxisTiny","plotDataObj","defaultProps","showLabels","SolderingAssistantView","showDeleteModal","referenceIdToDelete","handleDeleteClick","event","preventDefault","handleDeleteCancelClick","fileSelector","document","createElement","setAttribute","addEventListener","input","files","formData","FormData","append","outline","faFile","click","faUpload","faDownload","href","getListReferences","Modal","ModalHeader","ModalBody","ModalFooter","SolderingAssistant","searchReferences","deleteAllReferences","createReference","JSON","stringify","URL","createObjectURL","Blob","link","body","appendChild","removeChild","setTotalReferences","SolderingAssistantNewStep1","handleNameChange","isFormCorrect","Plot2Axis","SolderingAssistantNewStep2","detectedSoldering","registeredPlot","saveButton","handleSaveReferenceClick","getLastSolderingCard","selectedName","SolderingAssistantNewView","SolderingAssistantNew","history","Traceability","TasksService","countTasks","getTasks","getTaskById","updateTask","TasksView","InputGroup","InputGroupAddon","addonType","handleSearchFieldChange","faEye","faPen","getListOptionsTasks","Tasks","timer","searchTasks","bind","TaskStore","TaskNewView","handleToolChange","newTask","form","tools","Object","entries","getListTools","CustomInput","handleModifySelecTempChange","checked","pattern","prevState","handleRefSolderingChange","handleSolderingRefChange","TaskNew","redirect","TaskEditView","defaultChecked","TaskEdit","match","params","isLoadingRefSoldering","searchTask","TaskHistoriessService","countTaskHistories","getTaskHistories","getTaskHistoryById","ResponsivePieChart","COLORS","entry","TaskDetailView","isLoadingTask","details","getQualityCard","correct","total2","incorrect","percent","getDefectsChart","nTotalTaskHistories","isLoadingHistories","toLocaleDateString","getListHistoryTasks","TaskDetail","searchTaskHistories","taskActions","taskHistoryActions","TaskHistoriesService","dispatch","bindActionCreators","TaskHistoryStore","PlotReferenceTiny","TaskHistoryDetailView","showReference","referencePower","registeredSolderings","0","ClassificationToString","getSolderingsCard","GetPlotSeriesData","getRegisteredDataCard","TaskHistoryDetail","taskHistoryId","WorkProcessStep1","taskFilter","handleTaskClick","WorkProcessStep2","taskTool","PlotReference","WorkProcessStep3","getDetails","selectedTask","getPlotRecordData","WorkProcess","showFinishTaskModal","isLoadingTasks","stationActions","handleFinishTaskCancelClick","MAX_POINTS_PLOT","getPreviousButton","text","isValid","getNextButton","handleFinishTaskConfirmClick","WorkbenchsView","handleSetTraceabilityModeClick","Workbenchs","Component","Layout","routes","exact","render","includes","rest","keys","param","replace","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","baseUrl","getElementsByTagName","getAttribute","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById","process","origin","fetch","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c16ae935.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\n\r\nexport interface TaskConfig\r\n{\r\n    tool: number,\r\n    selectedTemp: number,\r\n    changeSelectedTemp: boolean,\r\n    solderingReferenceId: number,\r\n    changeSolderingReference: boolean,\r\n    qualityControl: boolean\r\n}\r\n\r\nexport interface Task\r\n{\r\n    id: number,\r\n    name: string,\r\n    workConfig: TaskConfig,\r\n    timesPerformed: number\r\n}\r\n\r\nexport interface TaskState {\r\n    tasks: Task[],\r\n    nTotalTasks: number\r\n}\r\n\r\nexport interface CreateTaskAction { type: 'CREATE_TASK', result: Task }\r\nexport interface DeleteTaskAction { type: 'DELETE_TASK', result: number }\r\nexport interface DeleteAllTasksAction { type: 'DELETE_ALL_TASKS' }\r\n\r\nexport interface SetTotalTasksAction { type: 'SET_TOTAL_TASKS', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskAction\r\n    | DeleteTaskAction\r\n    | DeleteAllTasksAction\r\n    | SetTotalTasksAction;\r\n\r\nexport const actionCreators = {\r\n    createTask: (task: Task) => ({ type: 'CREATE_TASK', result: task } as CreateTaskAction),\r\n    deleteTask: (id: number) => ({ type: 'DELETE_TASK', result: id } as DeleteTaskAction),\r\n    deleteAllTasks: () => ({ type: 'DELETE_ALL_TASKS' } as DeleteAllTasksAction),\r\n    setTotalTasks: (number: number) => ({ type: 'SET_TOTAL_TASKS', result: number } as SetTotalTasksAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskState> = (\r\n    state: TaskState | undefined,\r\n    incomingAction: Action\r\n): TaskState => {\r\n    if (state === undefined) {\r\n        return {\r\n            tasks: [],\r\n            nTotalTasks: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK':\r\n            if (state.tasks.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASKS':\r\n            return {\r\n                ...state,\r\n                tasks: []\r\n            };\r\n\r\n        case 'SET_TOTAL_TASKS':\r\n            return {\r\n                ...state,\r\n                nTotalTasks: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Reference\r\n{\r\n    id: number,\r\n    name: string,\r\n    power: number[],\r\n    cartridge: string,\r\n    temperature: number,\r\n    durationTenthsSeconds: number\r\n}\r\n\r\nexport interface TaskConfig\r\n{\r\n    tool: number,\r\n    selectedTemp: number,\r\n    changeSelectedTemp: boolean,\r\n    solderingReference: Reference,\r\n    changeSolderingReference: boolean\r\n}\r\n\r\nexport interface WorkSolderings\r\n{\r\n    power: number[],\r\n    solderingType: number\r\n}\r\n\r\nexport interface TaskData\r\n{\r\n    stationId: string,\r\n    stationName: string,\r\n    stationPort: number,\r\n    temperature: number[],\r\n    power: number[],\r\n    workSolderings: WorkSolderings[]\r\n}\r\n\r\nexport interface TaskHistory\r\n{\r\n    id: number,\r\n    finishDate: Date,\r\n    workConfig: TaskConfig\r\n    workData: TaskData\r\n}\r\n\r\nexport interface TaskHistoryState {\r\n    taskHistories: TaskHistory[]\r\n}\r\n\r\nexport interface CreateTaskHistoryAction { type: 'CREATE_TASK_HISTORY', result: TaskHistory }\r\nexport interface DeleteTaskHistoryAction { type: 'DELETE_TASK_HISTORY', result: number }\r\nexport interface DeleteAllTaskHistoriesAction { type: 'DELETE_ALL_TASK_HISTORIES' }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskHistoryAction\r\n    | DeleteTaskHistoryAction\r\n    | DeleteAllTaskHistoriesAction;\r\n\r\nexport const actionCreators = {\r\n    createTaskHistory: (taskHistory: TaskHistory) => ({ type: 'CREATE_TASK_HISTORY', result: taskHistory } as CreateTaskHistoryAction),\r\n    deleteTaskHistory: (id: number) => ({ type: 'DELETE_TASK_HISTORY', result: id } as DeleteTaskHistoryAction),\r\n    deleteAllTaskHistories: () => ({ type: 'DELETE_ALL_TASK_HISTORIES' } as DeleteAllTaskHistoriesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskHistoryState> = (\r\n    state: TaskHistoryState | undefined,\r\n    incomingAction: Action\r\n): TaskHistoryState => {\r\n    if (state === undefined) {\r\n        return { taskHistories: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK_HISTORY':\r\n            if (state.taskHistories.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK_HISTORY':\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASK_HISTORIES':\r\n            return {\r\n                ...state,\r\n                taskHistories: []\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Port\r\n{\r\n    id: number,\r\n    tool: number\r\n}\r\n\r\nexport interface Station\r\n{\r\n    id: string,\r\n    name: string,\r\n    model: string,\r\n    isQSTMode: boolean,\r\n    ports: Port[]\r\n}\r\n\r\nexport interface StationController\r\n{\r\n    id: string,\r\n    url: string,\r\n    name: string,\r\n    isQSTMode: boolean,\r\n    stations: Station[]\r\n}\r\n\r\nexport interface StationState {\r\n    stationControllers: StationController[]\r\n}\r\n\r\nexport interface CreateStationControllerAction { type: 'CREATE_STATION_CONTROLLER', sc: StationController }\r\nexport interface DeleteStationControllerAction { type: 'DELETE_STATION_CONTROLLER', id: string }\r\nexport interface DeleteAllStationControllersAction { type: 'DELETE_ALL_STATION_CONTROLLERS' }\r\nexport interface CreateStationAction { type: 'CREATE_STATION', station: Station, scId: string }\r\nexport interface DeleteStationAction { type: 'DELETE_STATION', id: string }\r\n\r\nexport type KnownAction =\r\n    | CreateStationControllerAction\r\n    | DeleteStationControllerAction\r\n    | DeleteAllStationControllersAction\r\n    | CreateStationAction\r\n    | DeleteStationAction;\r\n\r\nexport const actionCreators = {\r\n    createStationController: (sc: StationController) => ({ type: 'CREATE_STATION_CONTROLLER', sc: sc } as CreateStationControllerAction),\r\n    deleteStationController: (id: string) => ({ type: 'DELETE_STATION_CONTROLLER', id: id } as DeleteStationControllerAction),\r\n    deleteAllStationControllers: () => ({ type: 'DELETE_ALL_STATION_CONTROLLERS' } as DeleteAllStationControllersAction),\r\n    createStation: (station: Station, scId: string) => ({ type: 'CREATE_STATION', station: station, scId: scId } as CreateStationAction),\r\n    deleteStation: (id: string) => ({ type: 'DELETE_STATION', id: id } as DeleteStationAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<StationState> = (\r\n    state: StationState | undefined,\r\n    incomingAction: Action\r\n): StationState => {\r\n    if (state === undefined) {\r\n        return { stationControllers: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_STATION_CONTROLLER':\r\n            if (state.stationControllers.find(x => x.id === action.sc.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.concat(action.sc)\r\n            };\r\n\r\n        case 'DELETE_STATION_CONTROLLER':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers\r\n                    .filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_STATION_CONTROLLERS':\r\n            return {\r\n                ...state,\r\n                stationControllers: []\r\n            };\r\n\r\n        case 'CREATE_STATION':\r\n            let sc = state.stationControllers.find(x => x.id === action.scId);\r\n            if (sc === undefined) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            if (sc.stations.find(x => x.id === action.station.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.map(x => {\r\n                    if (x.id === action.scId) {\r\n                        x.stations.push(action.station);\r\n                    }\r\n                    return x;\r\n                })\r\n            };\r\n\r\n        case 'DELETE_STATION':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.filter(sc => {\r\n                    return sc.stations.filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n                })\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as Assistant from './Assistant';\r\nimport * as Task from './Task';\r\nimport * as TaskHistory from './TaskHistory';\r\nimport * as Station from './Station';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    assistant: Assistant.AssistantState;\r\n    task: Task.TaskState;\r\n    taskHistory: TaskHistory.TaskHistoryState;\r\n    station: Station.StationState;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    assistant: Assistant.reducer,\r\n    task: Task.reducer,\r\n    taskHistory: TaskHistory.reducer,\r\n    station: Station.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Reference\r\n{\r\n    id: number,\r\n    name: string,\r\n    power: number[],\r\n    cartridge: string,\r\n    temperature: number,\r\n    durationTenthsSeconds: number\r\n}\r\n\r\nexport interface AssistantState {\r\n    references: Reference[],\r\n    nTotalReferences: number\r\n}\r\n\r\nexport interface CreateReferenceAction { type: 'CREATE_REFERENCE', result: Reference }\r\nexport interface DeleteReferenceAction { type: 'DELETE_REFERENCE', result: number }\r\nexport interface DeleteAllReferencesAction { type: 'DELETE_ALL_REFERENCES' }\r\n\r\nexport interface SetTotalReferencesAction { type: 'SET_TOTAL_REFERENCES', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateReferenceAction\r\n    | DeleteReferenceAction\r\n    | DeleteAllReferencesAction\r\n    | SetTotalReferencesAction;\r\n\r\nexport const actionCreators = {\r\n    createReference: (reference: Reference) => ({ type: 'CREATE_REFERENCE', result: reference } as CreateReferenceAction),\r\n    deleteReference: (id: number) => ({ type: 'DELETE_REFERENCE', result: id } as DeleteReferenceAction),\r\n    deleteAllReferences: () => ({ type: 'DELETE_ALL_REFERENCES' } as DeleteAllReferencesAction),\r\n    setTotalReferences: (number: number) => ({ type: 'SET_TOTAL_REFERENCES', result: number } as SetTotalReferencesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<AssistantState> = (\r\n    state: AssistantState | undefined,\r\n    incomingAction: Action\r\n): AssistantState => {\r\n    if (state === undefined) {\r\n        return {\r\n            references: [],\r\n            nTotalReferences: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_REFERENCE':\r\n            if (state.references.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                references: state.references.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_REFERENCE':\r\n            return {\r\n                ...state,\r\n                references: state.references\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_REFERENCES':\r\n            return {\r\n                ...state,\r\n                references: []\r\n            };\r\n\r\n        case 'SET_TOTAL_REFERENCES':\r\n            return {\r\n                ...state,\r\n                nTotalReferences: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import Breadcrumbs from './Breadcrumbs';\r\n\r\nexport default Breadcrumbs;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Container } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\ninterface ICrumb {\r\n    name: string,\r\n    path: string\r\n}\r\n\r\ntype BreadcrumbsProps = {\r\n    crumbs: ICrumb[]\r\n}\r\n\r\nclass Breadcrumbs extends React.PureComponent<BreadcrumbsProps> {\r\n    public render() {\r\n        if (this.props.crumbs.length <= 1) {\r\n            return null;\r\n        }\r\n        \r\n        return (\r\n            <div id=\"breadcrumb-wrap\" className=\"box-shadow\">\r\n                <Container>\r\n                    <Breadcrumb>\r\n                            {/* Link back to any previous steps of the breadcrumb. */}\r\n                            {this.props.crumbs.map(({ name, path }, key) =>\r\n                                key + 1 === this.props.crumbs.length ? (\r\n                                    <BreadcrumbItem active>{name}</BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem>\r\n                                        <NavLink tag={Link} className=\"p-0 d-inline\" to={path}>{name}</NavLink>\r\n                                    </BreadcrumbItem>\r\n                                )\r\n                            )}\r\n                    </Breadcrumb>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport pkg from '../../../../package.json';\r\n\r\nclass Footer extends React.PureComponent {\r\n    public render() {\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n\r\n        return (\r\n            <footer className=\"border-top box-shadow\">\r\n                <Container className=\"clearfix pt-2 pb-2\">\r\n                    <div className=\"float-left\">\r\n                        <strong>Copyright</strong> JBC, Soldering S.L. © {year}\r\n                    </div>\r\n                    <div className=\"float-right\">\r\n                    <strong>QST 4.0</strong> - version {pkg.version}\r\n                    </div>\r\n                </Container>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import NavMenu from './NavMenu';\r\n\r\nexport default NavMenu;\r\n","import * as React from 'react';\r\nimport { Collapse, Container } from 'reactstrap';\r\nimport { Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarToggler } from 'reactstrap';\r\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">\r\n                            <img src=\"img/logo.png\" alt=\"JBC\" className=\"mr-2\"/>QST 4.0\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"flex-grow\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">\r\n                                        Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                \r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Processes\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/optimization\">\r\n                                                Process optimization\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/assistant\">\r\n                                                Soldering assistant\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Traceability\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/task\">\r\n                                                Tasks\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/workprocess\">\r\n                                                Work process\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/workbenchs\">\r\n                                                Workbenchs\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport Footer from './content-components/Footer';\r\nimport NavMenu from './content-components/NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        {props.children}\r\n        <Footer/>\r\n    </React.Fragment>\r\n);\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardText, CardBody, CardTitle, CardImg } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\ntype CardProps = {\r\n    to: string,\r\n    imgPath: string,\r\n    cardText: string,\r\n    cardTitle: string,\r\n    alt: string\r\n};\r\n\r\nconst CardView = ({ to, imgPath, cardText, cardTitle, alt }: CardProps) => {\r\n    return (\r\n        <NavLink tag={Link} to={to}>\r\n            <Card className=\"box-shadow-v2\">\r\n                <CardBody>\r\n                    <CardImg src={imgPath} alt={alt} />\r\n                    <CardText className=\"pt-4\">{cardText}</CardText>\r\n                    <CardTitle>{cardTitle}</CardTitle>\r\n                </CardBody>\r\n            </Card>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default CardView;\r\n\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport CardView from '../../content-parts/Card/CardView'\r\n\r\n\r\nclass Home extends React.PureComponent {\r\n    public render() {               \r\n\r\n        return (\r\n            <Row className=\"list-cards content-center\" xs={1} sm={2} md={4}>\r\n                <Col>\r\n                    <CardView to=\"/processes/optimization\" imgPath=\"img/iconImg/processOptimization.png\" alt=\"Process Optimization\" \r\n                                cardText=\"Optimize your processes by choosing the best combination of working temperature and the ideal cartridge.\" \r\n                                cardTitle=\"Process optimization\"/>\r\n                </Col>\r\n                <Col>\r\n                    <CardView to=\"/processes/assistant\" imgPath=\"img/iconImg/solderingAssistant.png\" alt=\"Soldering Assistant\" \r\n                                cardText=\"Pre-stored soldering joint and compare in real-time with all the new soldering processes.\" \r\n                                cardTitle=\"Soldering assistant\"/>\r\n                </Col>\r\n                <Col>\r\n                    <CardView to=\"/traceability/task\" imgPath=\"img/iconImg/traceability.png\" alt=\"Traceability\" \r\n                                cardText=\"Record the data of all connected stations.\" \r\n                                cardTitle=\"Traceability\"/>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;\r\n","import Processes from './Processes';\r\n\r\nexport default Processes;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport CardView from '../../../content-parts/Card/CardView'\r\n\r\nclass Processes extends React.PureComponent {\r\n    public render() {       \r\n\r\n        return (\r\n            <Row className=\"list-cards content-center\" xs={1} sm={2} md={4}>\r\n                <Col>\r\n                    <CardView to=\"/processes/optimization\" imgPath=\"img/iconImg/processOptimization.png\" alt=\"Process Optimization\" \r\n                                cardText=\"Optimize your processes by choosing the best combination of working temperature and the ideal cartridge.\" \r\n                                cardTitle=\"Process optimization\"/>\r\n                </Col>\r\n                <Col>\r\n                    <CardView to=\"/processes/assistant\" imgPath=\"img/iconImg/solderingAssistant.png\" alt=\"Soldering Assistant\" \r\n                                cardText=\"Pre-stored soldering joint and compare in real-time with all the new soldering processes.\" \r\n                                cardTitle=\"Soldering assistant\"/>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Processes;\r\n","const Configuration = {\r\n    FakeMode: true\r\n}\r\n\r\nexport default Configuration\r\n","export function TimeToString(sec_num, format) {\r\n\r\n    var showHours = false;\r\n    var padHours = false;\r\n    var showMinutes = false;\r\n    var padMinutes = false;\r\n    var showSeconds = false;\r\n    var padSeconds = false;\r\n\r\n    if (format.indexOf(\"hh\") >= 0) { showHours = true; padHours = true; }\r\n    else if (format.indexOf(\"h\") >= 0) { showHours = true; padHours = false; }\r\n\r\n    if (format.indexOf(\"mm\") >= 0) { showMinutes = true; padMinutes = true; }\r\n    else if (format.indexOf(\"m\") >= 0) { showMinutes = true; padMinutes = false; }\r\n\r\n    if (format.indexOf(\"ss\") >= 0) { showSeconds = true; padSeconds = true; }\r\n    else if (format.indexOf(\"s\") >= 0) { showSeconds = true; padSeconds = false; }\r\n\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n    \r\n    if (showHours) {\r\n        if (hours < 10 && padHours) { hours = \"0\" + hours; }\r\n        result += hours;\r\n    }\r\n    if (showMinutes) {\r\n        if (minutes < 10 && padMinutes) { minutes = \"0\" + minutes; }\r\n        if (result !== \"\") { result += \":\"; }\r\n        result += minutes;\r\n    }\r\n    if (showSeconds) {\r\n        if (seconds < 10 && padSeconds) { seconds = \"0\" + seconds; }\r\n        if (result !== \"\") { result += \":\"; }\r\n        result += seconds;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function SecToString(sec_num) {\r\n    if (sec_num < 0) {\r\n        return \"\";\r\n    }\r\n\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n    \r\n    if (hours !== 0) {\r\n        result += hours;\r\n        result += \":\";\r\n    }\r\n\r\n    if (minutes < 10) { minutes = \"0\" + minutes; }\r\n    result += minutes;\r\n    result += \":\";\r\n\r\n    if (seconds < 10) { seconds = \"0\" + seconds; }\r\n    result += seconds;\r\n\r\n    return result;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as AssistantStore from '../store/Assistant';\r\nimport * as StationStore from '../store/Station';\r\nimport * as TaskStore from '../store/Task';\r\nimport { sleep } from '../utils/timeUtils';\r\n\r\nclass FakeService {\r\n    static components = [\r\n        \"surface\", \"mount\", \"resistor\", \"led\",\r\n        \"R1\", \"R2\", \"R10\", \"R20\", \"PCB\",\r\n        \"C1\", \"C2\", \"C10\", \"C20\",\r\n        \"diode\", \"transistor\", \"capacitor\", \"magnetic\",\r\n        \"switches\", \"terminals\", \"thru-hole\"]\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult() {\r\n        console.log(\"FAKE SERVICE: getSolderingResult\");\r\n        return {\r\n            energy: Math.floor(Math.random() * 10) + 40,\r\n            similarity: Math.floor(Math.random() * 500) + 500,\r\n            tenthsOfSecondSoldering: Math.floor(Math.random() * 10) + 30\r\n        };\r\n    }\r\n\r\n    static async countReferences() {\r\n        console.log(\"FAKE SERVICE: countReferences\");\r\n        return 60;\r\n    }\r\n\r\n    static async getReferences() {\r\n        console.log(\"FAKE SERVICE: getReferences\");\r\n        await sleep(1000);\r\n        return this._getReferences(15);\r\n    }\r\n\r\n    static async getReferenceById() {\r\n        console.log(\"FAKE SERVICE: getReferenceById\");\r\n        await sleep(1000);\r\n        return (await this._getReferences(1))[0];\r\n    }\r\n\r\n    static async _getReferences(nReferences: number) {\r\n        let references = [] as AssistantStore.Reference[];\r\n\r\n        for (var id = 1; id <= nReferences; id++) {\r\n            let referenceName = \"\";\r\n            for (var i = 0; i < Math.floor(Math.random() * 4); i++) {\r\n                referenceName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let reference = {\r\n                id: id,\r\n                name: referenceName,\r\n                power: [109, 136, 162, 181, 205, 216, 208, 205, 216, 208, 205, 216, 208,\r\n                        199, 182, 165, 151, 141, 136, 132, 131, 131, 134, 131, 134, 131],\r\n                cartridge: 'C245004',\r\n                temperature: 350 * 9,\r\n                durationTenthsSeconds: 64\r\n            };\r\n\r\n            references.push(reference);\r\n        }\r\n\r\n        return references;\r\n    }\r\n\r\n    static async deleteReference() {\r\n        console.log(\"FAKE SERVICE: deleteReference\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async uploadReference() {\r\n        console.log(\"FAKE SERVICE: uploadReference\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async downloadReference() {\r\n        console.log(\"FAKE SERVICE: downloadReference\");\r\n        return '{\"_Type\":\"REFERENCE\",\"_V\":1,\"_\":{\"NumData\":[{\"P\":84,\"T\":3170},{\"P\":84,\"T\":3169}]}}';\r\n    }\r\n\r\n    static async generateReferenceSoldering() {\r\n        console.log(\"FAKE SERVICE: generateReferenceSoldering\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks() {\r\n        console.log(\"FAKE SERVICE: countTasks\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTasks() {\r\n        console.log(\"FAKE SERVICE: getTasks\");\r\n        await sleep(1000);\r\n        return this._getTasks(25);\r\n    }\r\n\r\n    static async getTaskById() {\r\n        console.log(\"FAKE SERVICE: getTaskById\");\r\n        await sleep(1000);\r\n        return (await this._getTasks(1))[0];\r\n    }\r\n\r\n    static async _getTasks(nTasks: number) {\r\n        let tasks = [] as TaskStore.Task[];\r\n\r\n        for (var taskId = 1; taskId <= nTasks; taskId++) {\r\n\r\n            let taskName = \"\";\r\n            for (var i = 0; i < 4; i++) {\r\n                taskName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let changeSelectedTemp = Math.round(Math.random() * 1) === 1 ? true : false;\r\n            let changeSolderingReference = Math.round(Math.random() * 1) === 1 ? true : false;\r\n            let qualityControl = Math.round(Math.random() * 1) === 1 ? true : false;\r\n\r\n            let task = {\r\n                id: taskId,\r\n                name: taskName,\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selectedTemp: selectedTemp,\r\n                    changeSelectedTemp: changeSelectedTemp,\r\n                    solderingReferenceId: 1,\r\n                    changeSolderingReference: changeSolderingReference,\r\n                    qualityControl: qualityControl\r\n                },\r\n                timesPerformed: Math.floor(Math.random() * 3)\r\n            };\r\n\r\n            tasks.push(task);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async createTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: createTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async updateTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: updateTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async deleteTask(id: number) {\r\n        console.log(\"FAKE SERVICE: deleteTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: countTaskHistories\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: getTaskHistories\");\r\n        await sleep(2000);\r\n        return this._getTaskHistories(25)\r\n    }\r\n\r\n    static async getTaskHistoryById() {\r\n        console.log(\"FAKE SERVICE: getTaskHistoryById\");\r\n        await sleep(1000);\r\n        return (await this._getTaskHistories(1))[0];\r\n    }\r\n\r\n    static async _getTaskHistories(nTasks: number) {\r\n        let taskHistories = []\r\n\r\n        for (var historyId = 1; historyId <= nTasks; historyId++) {\r\n            let length = Math.floor(Math.random() * 500) + 30;\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let change_selected_temp = Math.round(Math.random() * 1) === 1 ? true : false;\r\n            let change_soldering_ref = Math.round(Math.random() * 1) === 1 ? true : false;\r\n\r\n            let taskHistory = {\r\n                id: historyId + 1000,\r\n                finishDate: Date.now(),\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selectedTemp: selectedTemp,\r\n                    changeSelectedTemp: change_selected_temp,\r\n                    solderingReference: (await this._getReferences(1))[0],\r\n                    changeSolderingReference: change_soldering_ref\r\n                },\r\n                workData: {\r\n                    stationId: \"U1H23UI12HN3IBN\",\r\n                    stationName: \"Roberto's DDE\",\r\n                    stationPort: 1,\r\n                    temperature: Array.from({ length: length }, () => ((Math.floor(Math.random() * 100)) + 300) * 9),\r\n                    power: Array.from({ length: length }, () => Math.floor(Math.random() * 200)),\r\n                    workSolderings: [\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: 0\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n\r\n            taskHistories.push(taskHistory);\r\n        }\r\n\r\n        return taskHistories;\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace() {\r\n        console.log(\"FAKE SERVICE: startTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async stopTrace() {\r\n        console.log(\"FAKE SERVICE: stopTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async startRealTimeData() {\r\n        console.log(\"FAKE SERVICE: startRealTimeData\");\r\n        await sleep(1000);\r\n        return 1;\r\n    }\r\n\r\n    static async stopRealTimeData() {\r\n        console.log(\"FAKE SERVICE: stopRealTimeData\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async getRealTimeData() {\r\n        console.log(\"FAKE SERVICE: getRealTimeData\");\r\n\r\n        var d = new Date();\r\n        var seconds = d.getSeconds() % 10;\r\n\r\n        var isPortEnabled = seconds > 0;\r\n\r\n        var toolStatus = 0;\r\n        if (seconds === 1) toolStatus = 8;\r\n        if (seconds === 2) toolStatus = 4;\r\n        if (seconds === 3) toolStatus = 2;\r\n        if (seconds === 4) toolStatus = 1;\r\n\r\n        var isCalibrating =\r\n            (seconds >= 5) &&\r\n            (seconds <= 6);\r\n        \r\n        var isSoldering =\r\n            (seconds >= 8) &&\r\n            (seconds <= 9);\r\n\r\n        return [{\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        },\r\n        {\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        }]\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByCartridge\");\r\n        await sleep(2000);\r\n\r\n        let data = [];\r\n        for (var i = 0; i < 35; i++) {\r\n            data.push({\r\n                temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n                power: (Math.floor(Math.random() * 100) + 100) * 10\r\n            })\r\n        }\r\n\r\n        return {\r\n            data: data,\r\n            energy: data.reduce(((total, x) => total + x.power), 0),\r\n            time: data.length,\r\n            cartridge: \"C245029\",\r\n            selectedTemp: 350 * 9\r\n        }\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByTemperature\");\r\n        await sleep(2000);\r\n\r\n        let points = [{\r\n            temperature: 250 * 9,\r\n            tipLife: 3,\r\n            rateSoldMin: 3\r\n        }, {\r\n            temperature: 300 * 9,\r\n            tipLife: 1.75,\r\n            rateSoldMin: 5\r\n        }, {\r\n            temperature: 350 * 9,\r\n            tipLife: 1,\r\n            rateSoldMin:8\r\n        }, {\r\n            temperature: 400 * 9,\r\n            tipLife: 0.5,\r\n            rateSoldMin: 11\r\n        }];\r\n\r\n        let recommended = {\r\n            temperature: 350 * 9,\r\n            tipLife: 1,\r\n            rateSoldMin: 8\r\n        };\r\n\r\n        let performance = {\r\n            temperature: 400 * 9,\r\n            tipLife: 0.5,\r\n            rateSoldMin: 11\r\n        };\r\n\r\n        let durability = {\r\n            temperature: 300 * 9,\r\n            tipLife: 1.75,\r\n            rateSoldMin: 5\r\n        };\r\n\r\n        return {\r\n            points: points,\r\n            recommended: recommended,\r\n            performance: performance,\r\n            durability: durability\r\n        }\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        console.log(\"FAKE SERVICE: getStations\");\r\n        await sleep(2000);\r\n        let scs = [] as StationStore.StationController[]\r\n\r\n        for (var iSc = 1; iSc <= 2; iSc++) {\r\n            let scId = \"sc\" + iSc\r\n            let sc =\r\n                {\r\n                    id: scId,\r\n                    url: \"192.168.1.1\",\r\n                    name: \"Lab-\" + iSc,\r\n                    isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                    stations: []\r\n                } as StationStore.StationController;\r\n\r\n            for (var iSt = 1; iSt <= 2; iSt++) {\r\n                let stationId = scId + \"_\" + iSt;\r\n                let station =\r\n                    {\r\n                        id: stationId,\r\n                        name: \"Roberto's DDE \" + iSt,\r\n                        model: \"DDE\",\r\n                        isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                        ports: []\r\n                    } as StationStore.Station;\r\n\r\n                let nPorts = Math.pow(2, Math.floor(Math.random() * 3));\r\n                for (var p = 0; p < nPorts; p++) {\r\n                    let port =\r\n                        {\r\n                            id: p,\r\n                            tool: Math.floor(Math.random() * 8) + 1\r\n                        } as StationStore.Port;\r\n                    station.ports.push(port);\r\n                }\r\n\r\n                sc.stations.push(station);\r\n            }\r\n\r\n            scs.push(sc);\r\n        }\r\n\r\n        return scs;\r\n    }\r\n\r\n    static async setSelectedTemperature() {\r\n        console.log(\"FAKE SERVICE: setSelectedTemperature\");\r\n    }\r\n\r\n    static async setTraceabilityMode() {\r\n        console.log(\"FAKE SERVICE: setTraceabilityMode\");\r\n    }\r\n}\r\n\r\nexport default FakeService;\r\n","import axios from 'axios';\r\n\r\nconst ENDPOINT_ASSISTANT = 'api/assistant'\r\nconst ENDPOINT_PROCESS_OPTIMIZATION = 'api/processoptimization'\r\nconst ENDPOINT_REAL_TIME = '/api/realtimedata';\r\nconst ENDPOINT_STATIONS = '/api/station';\r\nconst ENDPOINT_TRACE = '/api/trace';\r\nconst ENDPOINT_WORK = '/api/work';\r\nconst ENDPOINT_WORK_HISTORY = '/api/workhistory';\r\n\r\nclass RestService {\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult(stationId, port) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/solderingresult?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async countReferences() {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/count\");\r\n    }\r\n\r\n    static async getReferences(pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"?pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getReferenceById(id) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/\" + id);\r\n    }\r\n\r\n    static async deleteReference(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_ASSISTANT + \"/\" + id);\r\n    }\r\n\r\n    static async uploadReference(file) {\r\n        return await this.doFormDataPostRequest(ENDPOINT_ASSISTANT + \"/uploadreference\", file);\r\n    }\r\n\r\n    static async downloadReference(id) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/downloadreference?id=\" + id);\r\n    }\r\n\r\n    static async generateReferenceSoldering(stationId, port, name, cartridge) {\r\n        return await this.doPostRequest(ENDPOINT_ASSISTANT + \"/generatereferencesoldering?stationid=\" + stationId + \"&stationport=\" + port + \"&name=\" + name + \"&cartridge=\" + cartridge);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks(filter) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/count?filter=\" + filter);\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"?filter=\" + filter + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    static async createTask(task) {\r\n        return await this.doPostRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        return await this.doPutRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/count?workid=\" + taskId);\r\n    }\r\n\r\n    static async getTaskHistories(taskId, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"?workid=\" + taskId + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/\" + id);\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace(taskId, stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_TRACE + \"/start?workid=\" + taskId + \"&stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopTrace(stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_TRACE + \"/stop?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    // real time data\r\n\r\n    static async startRealTimeData(stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_REAL_TIME + \"/start?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopRealTimeData(stationId, queueId) {\r\n        return await this.doPostRequest(ENDPOINT_REAL_TIME + \"/stop?stationid=\" + stationId + \"&queueid=\" + queueId);\r\n    }\r\n\r\n    static async getRealTimeData(stationId, queueId) {\r\n        return await this.doGetRequest(ENDPOINT_REAL_TIME + \"?stationid=\" + stationId + \"&queueid=\" + queueId);\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/cartridge\", solderings);\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/temperature\", solderings);\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        return await this.doGetRequest(ENDPOINT_STATIONS);\r\n    }\r\n\r\n    static async setSelectedTemperature(stationId, port, temperature) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS + \"/setselectedtemperature?stationid=\" + stationId + \"&stationport=\" + port + \"&temperature=\" + temperature);\r\n    }\r\n\r\n    static async setTraceabilityMode(scUrl, newState) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS + \"/settraceabilitymode?scurl=\" + scUrl + \"&qststate=\" + newState);\r\n    }\r\n\r\n    // api requests\r\n\r\n    static async doGetRequest(resource) {\r\n        try {\r\n            const success = await axios.get(resource);\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPostRequest(resource, data) {\r\n        try {\r\n            const success = await axios({\r\n                method: 'post',\r\n                url: resource,\r\n                data: data\r\n            });\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doFormDataPostRequest(resource, data) {\r\n        try {\r\n            const success = await axios.post(\r\n                resource,\r\n                data,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPutRequest(resource, data) {\r\n        try {\r\n            await axios({\r\n                method: 'put',\r\n                url: resource,\r\n                data: data\r\n            });\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n\r\n    static async doDeleteRequest(resource) {\r\n        try {\r\n            await axios.delete(resource);\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RestService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass AssistantService {\r\n    static async getSolderingResult(stationId, port) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.getSolderingResult();\r\n        }\r\n        else {\r\n            result = RestService.getSolderingResult(stationId, port);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async countReferences() {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countReferences();\r\n        }\r\n        else {\r\n            count = RestService.countReferences();\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getReferences(pageNumber, pageSize) {\r\n        let references;\r\n\r\n        if (Configuration.FakeMode) {\r\n            references = FakeService.getReferences();\r\n        }\r\n        else {\r\n            references = RestService.getReferences(pageNumber, pageSize);\r\n        }\r\n\r\n        return references;\r\n    }\r\n\r\n    static async getReferenceById(id) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.getReferenceById();\r\n        }\r\n        else {\r\n            result = RestService.getReferenceById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async deleteReference(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteReference();\r\n        }\r\n        else {\r\n            RestService.deleteReference(id);\r\n        }\r\n    }\r\n\r\n    static async uploadReference(file) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.uploadReference();\r\n        }\r\n        else {\r\n            RestService.uploadReference(file);\r\n        }\r\n    }\r\n\r\n    static async downloadReference(id) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.downloadReference();\r\n        }\r\n        else {\r\n            result = RestService.downloadReference(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async generateReferenceSoldering(stationId, port, name, cartridge) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.generateReferenceSoldering();\r\n        }\r\n        else {\r\n            RestService.generateReferenceSoldering(stationId, port, name, cartridge);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AssistantService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass ProcessOptimizationService {\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByCartridge();\r\n        }\r\n        else {\r\n            betterSoldering = RestService.getBetterOptimizationByCartridge(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByTemperature();\r\n        }\r\n        else {\r\n            betterSoldering = RestService.getBetterOptimizationByTemperature(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n}\r\n\r\nexport default ProcessOptimizationService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass StationsService {\r\n    static async getStations() {\r\n        let stations;\r\n\r\n        if (Configuration.FakeMode) {\r\n            stations = FakeService.getStations();\r\n        }\r\n        else {\r\n            stations = RestService.getStations();\r\n        }\r\n\r\n        return stations;\r\n    }\r\n\r\n    static async setSelectedTemperature(stationId, port, temperature) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setSelectedTemperature();\r\n        }\r\n        else {\r\n            RestService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n    }\r\n\r\n    static async setTraceabilityMode(scUrl, newState) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setTraceabilityMode();\r\n        }\r\n        else {\r\n            RestService.setTraceabilityMode(scUrl, newState);\r\n        }\r\n    }\r\n}\r\n\r\nexport default StationsService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass WorkService {\r\n    static async startTrace(taskId, stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.startTrace();\r\n        }\r\n        else {\r\n            RestService.startTrace(taskId, stationId, port);\r\n        }\r\n    }\r\n\r\n    static async stopTrace(stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopTrace();\r\n        }\r\n        else {\r\n            RestService.stopTrace(stationId, port);\r\n        }\r\n    }\r\n\r\n    static async startRealTimeData(stationId, port) {\r\n        let queueId;\r\n\r\n        if (Configuration.FakeMode) {\r\n            queueId = FakeService.startRealTimeData();\r\n        }\r\n        else {\r\n            queueId = RestService.startRealTimeData(stationId, port);\r\n        }\r\n\r\n        return queueId;\r\n    }\r\n\r\n    static async stopRealTimeData(stationId, queueId) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopRealTimeData();\r\n        }\r\n        else {\r\n            RestService.stopRealTimeData(stationId, queueId);\r\n        }\r\n    }\r\n\r\n    static async getRealTimeData(stationId, queueId) {\r\n        let data;\r\n\r\n        if (Configuration.FakeMode) {\r\n            data = FakeService.getRealTimeData();\r\n        }\r\n        else {\r\n            data = RestService.getRealTimeData(stationId, queueId);\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\nexport default WorkService;\r\n","export function TryParseInt(str,defaultValue) {\r\n    var retValue = defaultValue;\r\n    if(str !== null) {\r\n        if(str.length > 0) {\r\n            if (!isNaN(str)) {\r\n                retValue = parseInt(str);\r\n            }\r\n        }\r\n    }\r\n    return retValue;\r\n}\r\n\r\nexport function Round(num, decimals = 2) {\r\n    var f = 1;\r\n    for (var i = 0; i < decimals; i++) {\r\n        f *= 10;\r\n    }\r\n\r\n    return Math.round((num + Number.EPSILON) * f) / f;\r\n}\r\n","import MultiStepNav from './MultiStepNav';\r\n\r\nexport default MultiStepNav;\r\n","import * as React from 'react';\r\nimport './MultiStepNav.scss';\r\n\r\ntype MultiStepNavProps = {\r\n    labels: string[],\r\n    current: number\r\n}\r\n\r\nclass MultiStepNav extends React.PureComponent<MultiStepNavProps> {\r\n    public render() {\r\n        let items = this.props.labels.map((x, index) =>\r\n            <li className={index === this.props.current ? \"active\" : \"\"}>\r\n                <span>{x}</span>\r\n            </li>\r\n        )\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ul className=\"multi-step-nav\">{items}</ul>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default MultiStepNav;\r\n","export function GetTools()\r\n{\r\n    var tools =\r\n    {\r\n        1: \"T210\",\r\n        2: \"T245\",\r\n        3: \"PA\",\r\n        4: \"HT\",\r\n        5: \"DS\",\r\n        6: \"DR\",\r\n        7: \"NT105\",\r\n        8: \"NP105\",\r\n        9: \"T470\",\r\n\r\n        31: \"JT\",\r\n        32: \"TE\",\r\n        33: \"PHS\",\r\n        34: \"PHB\"\r\n    }\r\n    return tools;\r\n}\r\n\r\nexport function ToolToString(id)\r\n{\r\n    let tool = GetTools()[id];\r\n\r\n    if (typeof(tool) === \"undefined\") {\r\n        return \"No tool\";\r\n    }\r\n    else {\r\n        return tool;\r\n    }\r\n}\r\n\r\nexport function ToolImagePath(id)\r\n{\r\n    if (typeof(GetTools()[id]) === \"undefined\") {\r\n        return \"\";\r\n    }\r\n    else {\r\n        return \"img/tools/\" + GetTools()[id].toLowerCase() + \".png\";\r\n    }\r\n}\r\n","import StationsPortList from './StationsPortList';\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void\r\n}\r\n\r\nclass StationsPortList extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let count = this.props.stationControllers.reduce(((total, x) =>\r\n                total + x.stations.length\r\n            ), 0);\r\n\r\n            if (count === 0) {\r\n                return \"No stations connected.\";\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                            .map(p => (\r\n                                <tr className=\"pointer\" onClick={() => this.props.handleStationClick(s, p.id, p.tool)}>\r\n                                    <td>{s.name} [{s.model}]</td>\r\n                                    <td>{p.id + 1}</td>\r\n                                    <td>{ToolToString(p.tool)}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            getListOptionsStationControllers()\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport StationsPortList from '../../../content-parts/StationsPortList';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoadingStations: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_Station extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoadingStations}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={this.props.handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const getStationsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {getStationsCard()}\r\n                </Row>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_Station;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Input } from 'reactstrap';\r\n\r\ntype ProcessOptimizationProps = {\r\n    selectedTemperature: number,\r\n    handleSelecTempChange: (temperature: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_Temp extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            <strong>Selected temperature:</strong>\r\n                            <Input\r\n                                type=\"select\"\r\n                                defaultValue={this.props.selectedTemperature / 9}\r\n                                onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                            >\r\n                                <option>425</option>\r\n                                <option>400</option>\r\n                                <option>375</option>\r\n                                <option>350</option>\r\n                                <option>325</option>\r\n                                <option>300</option>\r\n                            </Input>\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_Temp;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Input } from 'reactstrap';\r\n\r\ntype ProcessOptimizationProps = {\r\n    selectedOffsetTime: number,\r\n    handleOffsetTimeChange: (value: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_ProcessParameters extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            <strong>Offset between solderings (seconds):</strong>\r\n                            <Input\r\n                                defaultValue={this.props.selectedOffsetTime}\r\n                                onChange={(e) => this.props.handleOffsetTimeChange(e.target.value)} />\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_ProcessParameters;\r\n","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C470\",\r\n\"Default\":\"009\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"026\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"035\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"037\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"038\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"040\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"042\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"043\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"044\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"045\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"046\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"047\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"048\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"049\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"050\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"051\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"055\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"057\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"058\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"059\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"063\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"065\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"066\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"564\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP42\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C245\",\r\n\"Default\":\"029\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"2\",\r\n\"RT\":\"1022\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"3\",\r\n\"RT\":\"30\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"1\",\r\n\"RT\":\"1474\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"1\",\r\n\"RT\":\"1711\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"2\",\r\n\"RT\":\"408\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"1\",\r\n\"RT\":\"2602\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"2\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"053\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"054\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"3\",\r\n\"RT\":\"100\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"2\",\r\n\"RT\":\"765\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"3\",\r\n\"RT\":\"638\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"069\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"102\",\r\n\"G\":\"3\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"3\",\r\n\"RT\":\"118\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"1\",\r\n\"RT\":\"42\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"3\",\r\n\"RT\":\"195\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"3\",\r\n\"RT\":\"151\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"119\",\r\n\"G\":\"3\",\r\n\"RT\":\"2258\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"121\",\r\n\"G\":\"1\",\r\n\"RT\":\"166\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"122\",\r\n\"G\":\"2\",\r\n\"RT\":\"268\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"123\",\r\n\"G\":\"3\",\r\n\"RT\":\"143\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"3\",\r\n\"RT\":\"42\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"1\",\r\n\"RT\":\"1219\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"136\",\r\n\"G\":\"1\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"138\",\r\n\"G\":\"1\",\r\n\"RT\":\"36\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"150\",\r\n\"G\":\"3\",\r\n\"RT\":\"29\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"201\",\r\n\"G\":\"2\",\r\n\"RT\":\"1013\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"215\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"220\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"224\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"226\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"227\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"228\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"234\",\r\n\"G\":\"2\",\r\n\"RT\":\"463\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"247\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"248\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"250\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"256\",\r\n\"G\":\"3\",\r\n\"RT\":\"101\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"259\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"260\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"261\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"268\",\r\n\"G\":\"3\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"301\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"303\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"304\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"305\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"306\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"311\",\r\n\"G\":\"2\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"312\",\r\n\"G\":\"2\",\r\n\"RT\":\"244\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"313\",\r\n\"G\":\"2\",\r\n\"RT\":\"114\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"315\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"344\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"351\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"352\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"254\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"273\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"3\",\r\n\"RT\":\"139\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"627\",\r\n\"G\":\"3\",\r\n\"RT\":\"239\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"628\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"651\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"654\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"667\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"669\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"673\",\r\n\"G\":\"2\",\r\n\"RT\":\"168\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"708\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"710\",\r\n\"G\":\"2\",\r\n\"RT\":\"922\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"729\",\r\n\"G\":\"3\",\r\n\"RT\":\"213\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"730\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"731\",\r\n\"G\":\"2\",\r\n\"RT\":\"1233\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"732\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"741\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"742\",\r\n\"G\":\"2\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"747\",\r\n\"G\":\"1\",\r\n\"RT\":\"2530\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"748\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"749\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"751\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"752\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"754\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"755\",\r\n\"G\":\"3\",\r\n\"RT\":\"72\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"756\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"757\",\r\n\"G\":\"3\",\r\n\"RT\":\"253\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"758\",\r\n\"G\":\"3\",\r\n\"RT\":\"196\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"759\",\r\n\"G\":\"2\",\r\n\"RT\":\"162\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"760\",\r\n\"G\":\"4\",\r\n\"RT\":\"39\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"761\",\r\n\"G\":\"3\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"762\",\r\n\"G\":\"4\",\r\n\"RT\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"763\",\r\n\"G\":\"3\",\r\n\"RT\":\"48\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"764\",\r\n\"G\":\"1\",\r\n\"RT\":\"2977\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"765\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"766\",\r\n\"G\":\"3\",\r\n\"RT\":\"55\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"768\",\r\n\"G\":\"3\",\r\n\"RT\":\"174\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"770\",\r\n\"G\":\"3\",\r\n\"RT\":\"56\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"771\",\r\n\"G\":\"1\",\r\n\"RT\":\"8830\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"772\",\r\n\"G\":\"1\",\r\n\"RT\":\"1483\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"773\",\r\n\"G\":\"2\",\r\n\"RT\":\"465\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"774\",\r\n\"G\":\"2\",\r\n\"RT\":\"302\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"775\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"776\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"784\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"785\",\r\n\"G\":\"2\",\r\n\"RT\":\"70\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"786\",\r\n\"G\":\"0\",\r\n\"RT\":\"728\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"789\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"790\",\r\n\"G\":\"0\",\r\n\"RT\":\"149\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"792\",\r\n\"G\":\"0\",\r\n\"RT\":\"96\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"793\",\r\n\"G\":\"0\",\r\n\"RT\":\"162\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"795\",\r\n\"G\":\"0\",\r\n\"RT\":\"776\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"796\",\r\n\"G\":\"0\",\r\n\"RT\":\"81\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"797\",\r\n\"G\":\"0\",\r\n\"RT\":\"191\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"803\",\r\n\"G\":\"2\",\r\n\"RT\":\"573\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"804\",\r\n\"G\":\"2\",\r\n\"RT\":\"579\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"806\",\r\n\"G\":\"2\",\r\n\"RT\":\"472\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"807\",\r\n\"G\":\"3\",\r\n\"RT\":\"223\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"808\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"811\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"812\",\r\n\"G\":\"3\",\r\n\"RT\":\"105\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"844\",\r\n\"G\":\"3\",\r\n\"RT\":\"158\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"845\",\r\n\"G\":\"3\",\r\n\"RT\":\"312\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"846\",\r\n\"G\":\"3\",\r\n\"RT\":\"220\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"862\",\r\n\"G\":\"2\",\r\n\"RT\":\"469\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"863\",\r\n\"G\":\"3\",\r\n\"RT\":\"2117\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"866\",\r\n\"G\":\"4\",\r\n\"RT\":\"46\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"903\",\r\n\"G\":\"2\",\r\n\"RT\":\"552\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"904\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"905\",\r\n\"G\":\"3\",\r\n\"RT\":\"585\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"906\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"907\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"908\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"911\",\r\n\"G\":\"3\",\r\n\"RT\":\"173\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"912\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"913\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"914\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"929\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"930\",\r\n\"G\":\"1\",\r\n\"RT\":\"1395\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"931\",\r\n\"G\":\"3\",\r\n\"RT\":\"152\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"933\",\r\n\"G\":\"4\",\r\n\"RT\":\"262\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"935\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"937\",\r\n\"G\":\"2\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"938\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"939\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"943\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"944\",\r\n\"G\":\"3\",\r\n\"RT\":\"188\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"945\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"946\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"949\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"951\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"955\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"957\",\r\n\"G\":\"1\",\r\n\"RT\":\"1157\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"962\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"963\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"965\",\r\n\"G\":\"3\",\r\n\"RT\":\"620\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"966\",\r\n\"G\":\"4\",\r\n\"RT\":\"14\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"617\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C210\",\r\n\"Default\":\"003\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"421\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"380\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"2\",\r\n\"RT\":\"929\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"2\",\r\n\"RT\":\"374\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"2\",\r\n\"RT\":\"349\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"195\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"299\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"1332\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"1137\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"2\",\r\n\"RT\":\"273\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"2\",\r\n\"RT\":\"1656\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"2\",\r\n\"RT\":\"780\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"2\",\r\n\"RT\":\"2494\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"2\",\r\n\"RT\":\"161\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"2\",\r\n\"RT\":\"1368\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"1\",\r\n\"RT\":\"2861\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"2\",\r\n\"RT\":\"745\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"2\",\r\n\"RT\":\"80\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"1\",\r\n\"RT\":\"1222\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"024\",\r\n\"G\":\"2\",\r\n\"RT\":\"451\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"2\",\r\n\"RT\":\"115\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"355\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"536\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"287\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"259\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"210\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"891\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"692\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C120\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"680\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"938\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"517\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"247\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"207\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"1381\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"86\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"959\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"902\",\r\n\"G\":\"1\",\r\n\"RT\":\"2266\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C420\",\r\n\"Default\":\"281\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"271\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"272\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"273\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"274\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"275\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"276\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"277\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"278\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"279\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"280\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"281\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"282\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"283\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"285\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"286\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"287\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"288\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C360\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C560\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C250\",\r\n\"Default\":\"401\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"401\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"402\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"404\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"408\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"409\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"410\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"411\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"412\",\r\n\"G\":\"3\",\r\n\"RT\":\"50\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"413\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"414\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"415\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"418\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"420\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"424\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","import T470data from './cartridgeData/T470';\r\nimport T245data from './cartridgeData/T245';\r\nimport T210data from './cartridgeData/T210';\r\nimport PA120data from './cartridgeData/PA120';\r\nimport NT105data from './cartridgeData/NT105';\r\nimport NP105data from './cartridgeData/NP105';\r\nimport HT420data from './cartridgeData/HT420';\r\nimport DS360data from './cartridgeData/DS360';\r\nimport DR560data from './cartridgeData/DR560';\r\nimport AP250data from './cartridgeData/AP250';\r\n\r\ninterface CartridgeList {\r\n    N: string;\r\n    G: string;\r\n    RT: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeGroup {\r\n    G: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeData {\r\n    F: string;\r\n    Default: string;\r\n    Cartridge_list: CartridgeList[];\r\n    Cartridge_group: CartridgeGroup[];\r\n}\r\n\r\ninterface CartridgeRoot {\r\n    _Type: string;\r\n    _V: number;\r\n    _: CartridgeData;\r\n}\r\n\r\nexport interface ICartridge {\r\n    tool: number,\r\n    fullName: string,\r\n    family: string,\r\n    name: string,\r\n    isDefault: boolean,\r\n    img: string\r\n}\r\n\r\nexport function LoadCartridges() {\r\n    let cartridges: ICartridge[] = [];\r\n    cartridges = cartridges.concat(MapCatridges(T470data));\r\n    cartridges = cartridges.concat(MapCatridges(T245data));\r\n    cartridges = cartridges.concat(MapCatridges(T210data));\r\n    cartridges = cartridges.concat(MapCatridges(PA120data));\r\n    cartridges = cartridges.concat(MapCatridges(NT105data));\r\n    cartridges = cartridges.concat(MapCatridges(NP105data));\r\n    cartridges = cartridges.concat(MapCatridges(HT420data));\r\n    cartridges = cartridges.concat(MapCatridges(DS360data));\r\n    cartridges = cartridges.concat(MapCatridges(DR560data));\r\n    cartridges = cartridges.concat(MapCatridges(AP250data));\r\n\r\n    return cartridges;\r\n}\r\n\r\nexport function MapCatridges(cartridgeRoot: CartridgeRoot) {\r\n    let result: ICartridge[] = [];\r\n\r\n    let cartridge = cartridgeRoot._;\r\n    let family = cartridge.F;\r\n    let def = cartridge.Default;\r\n\r\n    cartridge.Cartridge_list.forEach(item => {\r\n        result.push({\r\n            tool: GetToolIdByFamily(family),\r\n            fullName: family + item.N,\r\n            family: family,\r\n            name: item.N,\r\n            isDefault: def === item.N,\r\n            img: CartridgeImagePath(family, item.N)\r\n        });\r\n    })\r\n\r\n    return result;\r\n};\r\n\r\nexport function GetToolIdByFamily(family: string)\r\n{\r\n    family = family.toLowerCase();\r\n\r\n    if (family === \"c210\") return 1; // T210\r\n    if (family === \"c245\") return 2; // T245\r\n    if (family === \"c120\") return 3; // PA\r\n    if (family === \"c420\") return 4; // HT\r\n    if (family === \"c360\") return 5; // DS\r\n    if (family === \"c560\") return 6; // DR\r\n    if (family === \"c105\" || family === \"c115\") return 7; // NT105, NP105\r\n    if (family === \"c470\") return 9; // T470\r\n\r\n    return 0;\r\n}\r\n\r\nexport function CartridgeImagePath(family: string, name: string)\r\n{\r\n    return \"img/cartidges/\" + family.toLowerCase() + name.toLowerCase() + \"_detail.png\";\r\n}\r\n\r\nexport function CartridgeImagePathByFullName(name: string)\r\n{\r\n    let cartridge = LoadCartridges().find(x => x.fullName.toLowerCase() === name.toLowerCase());\r\n\r\n    if (cartridge === undefined) {\r\n        return \"\";\r\n    }\r\n\r\n    return CartridgeImagePath(cartridge.family, cartridge.name);\r\n}\r\n","import Plot2AxisTiny from './Plot2AxisTiny';\r\n\r\nexport default Plot2AxisTiny;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2AxisTiny extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: -61\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2AxisTiny;\r\n","const DESOLDER = 16;\r\nconst EXTRACTOR = 8;\r\nconst HIBERNATION = 4;\r\nconst SLEEP = 2;\r\nconst STAND = 1;\r\nconst NONE = 0;\r\n\r\nexport function GetPortStatus2String(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return \"Port locked\";\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return \"Tool in the extractor\";\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return \"Tool in hibernation\";\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return \"Tool in sleep\";\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return \"Tool in the stand\";\r\n    }\r\n    else if (isCalibrating) {\r\n        return \"Calibrating\";\r\n    }\r\n    else if (isSoldering) {\r\n        return \"Soldering\";\r\n    }\r\n    else {\r\n        return \"Ready\";\r\n    }\r\n}\r\n\r\nexport function GetPortStatus2Lights(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return 3;\r\n    }\r\n    else if (isCalibrating) {\r\n        return 2;\r\n    }\r\n    else if (isSoldering) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n","import PortStatusCard from './PortStatusCard';\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../utils/portUtils';\r\nimport './PortStatusCard.css';\r\n\r\ntype PortStatusCardProps = {\r\n    portData: IRealTimeData\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number,\r\n    toolStatus: number,\r\n    isPortEnabled: boolean,\r\n    isCalibrating: boolean,\r\n    isSoldering: boolean,\r\n    tenthsOfSecondSoldering: number\r\n}\r\n\r\nclass PortStatusCard extends React.PureComponent<PortStatusCardProps> {\r\n    public render() {\r\n        let temperature = this.props.portData === undefined ? 0 : this.props.portData.temperature;\r\n        let power = this.props.portData === undefined ? 0 : this.props.portData.power;\r\n        let toolStatus = this.props.portData === undefined ? 0 : this.props.portData.toolStatus;\r\n        let isPortEnabled = this.props.portData === undefined ? false : this.props.portData.isPortEnabled;\r\n        let isCalibrating = this.props.portData === undefined ? false : this.props.portData.isCalibrating;\r\n        let isSoldering = this.props.portData === undefined ? false : this.props.portData.isSoldering;\r\n\r\n        let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n            toolStatus,\r\n            isCalibrating,\r\n            isSoldering,\r\n            isPortEnabled);\r\n            \r\n        return (\r\n            <Card>\r\n                <CardBody>\r\n                    <Row>\r\n                        <Col xs=\"auto\">\r\n                            Temperature:{' '}\r\n                            <span className=\"temp-value\"> {Math.floor(temperature / 9)} ºC</span>\r\n                        </Col>\r\n                        <Col>\r\n                            Power:{' '}\r\n                            <span className=\"power-value\">{Math.floor(power / 10)} %</span>\r\n                        </Col>\r\n                        <Col className=\"text-right\">\r\n                            <FontAwesomeIcon icon={faCircle} className={circleLight}/>\r\n                            <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                toolStatus,\r\n                                isCalibrating,\r\n                                isSoldering,\r\n                                isPortEnabled\r\n                            )}</strong>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport { LoadCartridges, ICartridge } from '../../../../utils/cartridgeUtils';\r\nimport Plot2AxisTiny from '../../../content-parts/Plot2AxisTiny';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    selectedTool: number,\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string,\r\n    cartridgeName: string\r\n}\r\n\r\nclass ProcessOptimizationStep_CartridgeTest extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n        \r\n        let cartridgeImagePath = \"\";\r\n        let cartridgeName =\"\";\r\n        let cartridges = LoadCartridges();\r\n        let defaultCartridge = cartridges.find(x => x.isDefault && x.tool === this.props.selectedTool);\r\n        \r\n        if (defaultCartridge !== undefined) {\r\n            cartridgeImagePath = defaultCartridge.img;\r\n            cartridgeName = defaultCartridge.fullName;\r\n            this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n        }\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeImagePath: cartridgeImagePath,\r\n            cartridgeName: cartridgeName\r\n        };\r\n    }\r\n    \r\n    public render() {\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n        \r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col xs=\"8\">\r\n                                <CardText>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"4\" className=\"text-center\">\r\n                                <img src={this.state.cartridgeImagePath} alt={this.state.cartridgeName} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlots = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return (\r\n                    <CardText>\r\n                        Performs at least 2 solderings with different cartridges.\r\n                    </CardText>\r\n                )\r\n            }\r\n\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"card-v2\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs=\"9\" className=\"pr-0\">\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Cartridge: <strong>{x.cartridge}</strong></CardText>\r\n                                    </Col>\r\n                                    <Col  xs=\"3\" className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Plot2AxisTiny\r\n                                        plotData={data}\r\n                                        counterTenthSecond={x.data.length}\r\n                                        interval={Math.floor(x.data.length / 2)}\r\n                                    />\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Row xs={1} sm={2} md={5}>\r\n                    {registeredPlots}\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getRegisteredPlots()}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n            let cartridgeName = cartridge === undefined ? \"\" : cartridge.fullName;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath,\r\n                cartridgeName: cartridgeName\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_CartridgeTest;\r\n","export function Range(min, max, step = 1) {\r\n    var values = [];\r\n    \r\n    for (let i = min; i <= max; i+=step) {\r\n        values = values.concat(i);\r\n    }\r\n\r\n    return values;\r\n}\r\n\r\nexport function RemoveDuplicates(values) {\r\n    values = values.filter((item, index) => values.indexOf(item) === index);\r\n    return values;\r\n}\r\n","export function Average(values) {\r\n    var sum = values.reduce(function(sum, value) {\r\n        return sum + value;\r\n    }, 0);\r\n\r\n    var avg = sum / values.length;\r\n    return avg;\r\n}\r\n\r\nexport function PercentPointFunction(x, mean, std) {\r\n    return mean - std * Math.sqrt(2) * ierfc(2 * x);\r\n}\r\n\r\nexport function ProbabilityDensityFunction(x, mean, variance) {\r\n    var std = Math.sqrt(variance);\r\n    var m = std * Math.sqrt(2 * Math.PI);\r\n    var e = Math.exp(-Math.pow(x - mean, 2) / (2 * variance));\r\n    return e / m;\r\n};\r\n\r\nexport function StandardDeviation(values) {\r\n    var variance = Variance(values);\r\n    var stdDev = Math.sqrt(variance);\r\n    return stdDev;\r\n}\r\n\r\nexport function Variance(values) {\r\n    var avg = Average(values);\r\n\r\n    var squareDiffs = values.map(function(value){\r\n        var diff = value - avg;\r\n        var sqrDiff = diff * diff;\r\n        return sqrDiff;\r\n    });\r\n\r\n    var avgSquareDiff = Average(squareDiffs);\r\n    return avgSquareDiff;\r\n}\r\n\r\n// Complementary error function\r\nexport function erfc(x) {\r\n    var z = Math.abs(x);\r\n    var t = 1 / (1 + z / 2);\r\n    var r = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 +\r\n            t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 +\r\n            t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 +\r\n            t * (-0.82215223 + t * 0.17087277)))))))))\r\n    return x >= 0 ? r : 2 - r;\r\n};\r\n\r\n// Inverse complementary error function\r\nexport function ierfc(x) {\r\n    if (x >= 2) { return -100; }\r\n    if (x <= 0) { return 100; }\r\n\r\n    var xx = (x < 1) ? x : 2 - x;\r\n    var t = Math.sqrt(-2 * Math.log(xx / 2));\r\n\r\n    var r = -0.70711 * ((2.30753 + t * 0.27061) /\r\n            (1 + t * (0.99229 + t * 0.04481)) - t);\r\n\r\n    for (var j = 0; j < 2; j++) {\r\n        var err = erfc(r) - xx;\r\n        r += err / (1.12837916709551257 * Math.exp(-(r * r)) - r * err);\r\n    }\r\n\r\n    return (x < 1) ? r : -r;\r\n}\r\n","export function GetPlotColors() {\r\n    return [\r\n        { stroke: \"#ffc658\", fill: \"#ffc658\"},\r\n        { stroke: \"#82ca9d\", fill: \"#82ca9d\"},\r\n        { stroke: \"#8884d8\", fill: \"#8884d8\"},\r\n        { stroke: \"#82ca9d\", fill: \"#82ca9d\"}\r\n    ];\r\n}\r\n\r\nexport function GetPlotSeriesData(temperature, power) {\r\n    let plotData = [];\r\n\r\n    for (var i = 0; i < temperature.length; i++) {\r\n        plotData.push({\r\n            tick: i,\r\n            temperature: temperature[i] / 9,\r\n            power: power[i] / 10\r\n        });\r\n    }\r\n\r\n    return plotData;\r\n}\r\n\r\nexport function EmptyPlotSeriesData(maxPLotPoints) {\r\n    let data = [];\r\n\r\n    for (var i = 0; i < maxPLotPoints; i++) {\r\n        data.push({\r\n            tick: -1,\r\n            temperature: 0,\r\n            power: 0,\r\n            toolStatus: 0,\r\n            isPortEnabled: true,\r\n            isCalibrating: false,\r\n            isSoldering: false,\r\n            tenthsOfSecondSoldering: 0\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function PushPlotSeriesData(data, realTimeData, maxPlotPoints = 100) {\r\n    data.push({\r\n        tick: data.length > 0 ? data[data.length - 1].tick + 1 : 0,\r\n        temperature: realTimeData.temperature / 9,\r\n        power: realTimeData.power / 10,\r\n        toolStatus: realTimeData.toolStatus,\r\n        isPortEnabled: realTimeData.isPortEnabled,\r\n        isCalibrating: realTimeData.isCalibrating,\r\n        isSoldering: realTimeData.isSoldering\r\n    });\r\n\r\n    if (maxPlotPoints > 0 && maxPlotPoints < data.length) {\r\n        data.splice(0, data.length - maxPlotPoints);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, Legend, AreaChart, Area } from 'recharts';\r\nimport { Range, RemoveDuplicates } from '../../../../utils/arrayUtils';\r\nimport { Average, ProbabilityDensityFunction, StandardDeviation, Variance } from '../../../../utils/mathUtils';\r\nimport { Round } from '../../../../utils/numberUtils';\r\nimport { GetPlotColors } from '../../../../utils/plotUtils';\r\nimport { SecToString } from '../../../../utils/timeUtils';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData\r\n}\r\n\r\nclass ProcessOptimizationStep_CartridgeResult extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getPlot = (solderings: ISolderingData[]) => {\r\n\r\n            let vals = solderings.map(x => x.solderingResult.tenthsOfSecondSoldering);\r\n            let minVal = Math.max(Math.min(...vals) - 20, 0);\r\n            let maxVal = Math.max(...vals) + 20;\r\n            let range: number[] = Range(minVal, maxVal);\r\n\r\n            let data : {[key:string]:number}[] = range.map(x => {\r\n                return { \"time\": x };\r\n            });\r\n\r\n            let cartridges = solderings.map(x => x.cartridge);\r\n            cartridges = RemoveDuplicates(cartridges);\r\n\r\n            for (var i = 0; i < cartridges.length; i++) {\r\n                let cartridge = cartridges[i];\r\n                let valuesCart = solderings\r\n                    .filter(x => x.cartridge === cartridge)\r\n                    .map(x => x.solderingResult.tenthsOfSecondSoldering);\r\n\r\n                let avg = Average(valuesCart);\r\n                let variance = Variance(valuesCart);\r\n\r\n                data = data.map(x => {\r\n                    x[cartridge] = ProbabilityDensityFunction(x.time, avg, variance);\r\n                    return x;\r\n                });\r\n            };\r\n\r\n            let colors = GetPlotColors();\r\n            let areas = cartridges.map((x, index) => {\r\n                let color = colors[index % colors.length];\r\n                return <Area type='monotone' dataKey={x} stroke={color[\"stroke\"]} fill={color[\"fill\"]} fillOpacity={0.3} />\r\n            });\r\n\r\n            return (\r\n                <ResponsiveContainer width='100%' aspect={2.5}>\r\n                    <AreaChart\r\n                        data={data}\r\n                        margin={{\r\n                            left: -61,\r\n                            right: 0\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#e6e6e6\" />\r\n                        <Legend/>\r\n\r\n                        <XAxis\r\n                            dataKey=\"time\"\r\n                            height={50}\r\n                            label={\"Time (s)\"}\r\n                            tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                            interval={Math.floor(data.length / 5)} />\r\n                        <YAxis/>\r\n\r\n                        {areas}\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n            );\r\n        }\r\n\r\n        const getPlotCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <React.Fragment>\r\n                        <CardText>Best cartridge: <strong>{this.props.fasterSoldering.cartridge}</strong></CardText>\r\n                        {getPlot(this.props.detectedSolderings)}\r\n                    </React.Fragment>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getTableCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                let cartridges = this.props.detectedSolderings.map(x => x.cartridge);\r\n                cartridges = RemoveDuplicates(cartridges);\r\n\r\n                let options =\r\n                    cartridges.map(cartridge => {\r\n                        let values = this.props.detectedSolderings\r\n                            .filter(x => x.cartridge === cartridge)\r\n                            .map(x => x.solderingResult.tenthsOfSecondSoldering);\r\n        \r\n                        let avg = Round(Average(values) / 10);\r\n                        let std = Round(StandardDeviation(values) / 10);\r\n\r\n                        return (\r\n                            <tr className={this.props.fasterSoldering.cartridge === cartridge ? \"font-weight-bold\" : \"\"}>\r\n                                <td>{cartridge}</td>\r\n                                <td>{avg}</td>\r\n                                <td>{std}</td>\r\n                            </tr>)\r\n                    })\r\n\r\n                cardBody =\r\n                    <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Cartridge</th>\r\n                            <th scope=\"col\">Time average (s)</th>\r\n                            <th scope=\"col\">Time desviation (s)</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getPlotCard()}\r\n                    </Col>\r\n                    <Col  xs=\"6\">\r\n                        {getTableCard()}\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_CartridgeResult;\r\n","import * as React from 'react';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { CartridgeImagePathByFullName } from '../../../../utils/cartridgeUtils';\r\nimport Plot2AxisTiny from '../../../content-parts/Plot2AxisTiny';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    \r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTemperature: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_TempTest extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <Row>\r\n                        <Col xs=\"8\">\r\n                            <CardText>Selected cartridge: {this.props.fasterSoldering.cartridge}</CardText>\r\n                            <CardText>\r\n                                <strong>Selected temperature:</strong>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    defaultValue={this.props.selectedTemperature / 9}\r\n                                    onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                >\r\n                                    <option>425</option>\r\n                                    <option>400</option>\r\n                                    <option>375</option>\r\n                                    <option>350</option>\r\n                                    <option>325</option>\r\n                                    <option>300</option>\r\n                                </Input>\r\n                            </CardText>\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"text-center\">\r\n                            <img src={CartridgeImagePathByFullName(this.props.fasterSoldering.cartridge)} alt={this.props.fasterSoldering.cartridge} />\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlots = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return (\r\n                    <CardText>\r\n                        Performs at least 2 solderings with different temperatures.\r\n                    </CardText>\r\n                )\r\n            }\r\n\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"card-v2\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs=\"9\" className=\"pr-0\">\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Temperature: <strong>{x.selectedTemperature / 9} ºC</strong></CardText>\r\n                                    </Col>\r\n                                    <Col  xs=\"3\" className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Plot2AxisTiny\r\n                                        plotData={data}\r\n                                        counterTenthSecond={x.data.length}\r\n                                        interval={Math.floor(x.data.length / 2)}\r\n                                    />\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Row xs={1} sm={2} md={5}>\r\n                    {registeredPlots}\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getRegisteredPlots()}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_TempTest;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ResponsiveContainer, LineChart, Line, Legend, XAxis, YAxis, CartesianGrid, ReferenceArea } from 'recharts';\r\nimport { CartridgeImagePathByFullName } from '../../../../utils/cartridgeUtils';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    optimizedSoldering: IOptimizedSoldering,\r\n    selectedCartridge: string\r\n}\r\n\r\nclass ProcessOptimizationStep_Performance extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getPlot = (tempRecommended: number, tempDurability: number, tempPerformance: number) => {\r\n            return (\r\n                <ResponsiveContainer width='100%' aspect={2.5}>\r\n                    <LineChart\r\n                        data={this.props.optimizedSoldering.points}\r\n                        margin={{\r\n                            left: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#e6e6e6\" />\r\n                        <Legend/>\r\n\r\n                        <XAxis\r\n                            dataKey=\"temperature\"\r\n                            height={50}\r\n                            padding={{ left: 30, right: 30 }}\r\n                            label=\"Temperature\"\r\n                            tickFormatter={(value) => Math.floor(value / 9)}\r\n                            domain={[250 * 9, 400 * 9]}\r\n                            ticks={[250 * 9, 300 * 9, 350 * 9, 400 * 9]}\r\n                            type=\"number\" />\r\n                        <YAxis\r\n                            yAxisId=\"left\"\r\n                            orientation=\"left\"\r\n                            tickFormatter={(value) => value + \"x\"}\r\n                            domain={[0, 3]}\r\n                            ticks={[1, 2, 3]}\r\n                            type=\"number\" />\r\n                        <YAxis\r\n                            yAxisId=\"right\"\r\n                            orientation=\"right\" />\r\n\r\n                        <ReferenceArea\r\n                            yAxisId=\"left\"\r\n                            x1={280 * 9}\r\n                            x2={tempDurability + (tempRecommended - tempDurability) / 2}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ebebff\" />\r\n                        <ReferenceArea\r\n                            yAxisId=\"left\"\r\n                            x1={tempDurability + (tempRecommended - tempDurability) / 2}\r\n                            x2={tempRecommended + (tempPerformance - tempRecommended) / 2}\r\n                            y1={0} y2={3}\r\n                            fill=\"#fff8e1\" />\r\n                        <ReferenceArea\r\n                            yAxisId=\"left\"\r\n                            x1={tempRecommended + (tempPerformance - tempRecommended) / 2}\r\n                            x2={400 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ffebeb\" />\r\n\r\n                        <Line name=\"Tip Life\" dataKey=\"tipLife\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                        <Line name=\"Solderings / minute\" dataKey=\"rateSoldMin\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            );\r\n        }\r\n\r\n        const getOptimizedSolderingPlotCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody = getPlot(\r\n                    this.props.optimizedSoldering.recommended.temperature,\r\n                    this.props.optimizedSoldering.durability.temperature,\r\n                    this.props.optimizedSoldering.performance.temperature)\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <React.Fragment>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Cartridge: <strong>{this.props.selectedCartridge}</strong></CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={CartridgeImagePathByFullName(this.props.selectedCartridge)} alt={this.props.selectedCartridge} />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <hr/>\r\n                        <CardText>\r\n                            <strong>Optimized:</strong>\r\n                        </CardText>\r\n                        <CardText>Tip life: {this.props.optimizedSoldering.recommended.tipLife}x</CardText>\r\n                        <CardText>Solderings / minute: {this.props.optimizedSoldering.recommended.rateSoldMin}</CardText>\r\n                        <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.recommended.temperature / 9)} ºC</CardText>\r\n\r\n                        <hr/>\r\n                        <CardText>\r\n                            <strong>Better performance:</strong>\r\n                        </CardText>\r\n                        <CardText>Tip life: {this.props.optimizedSoldering.performance.tipLife}x</CardText>\r\n                        <CardText>Solderings / minute: {this.props.optimizedSoldering.performance.rateSoldMin}</CardText>\r\n                        <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.performance.temperature / 9)} ºC</CardText>\r\n\r\n                        <hr/>\r\n                        <CardText>\r\n                            <strong>Better durability:</strong>\r\n                        </CardText>\r\n                        <CardText>Tip life: {this.props.optimizedSoldering.durability.tipLife}x</CardText>\r\n                        <CardText>Solderings / minute: {this.props.optimizedSoldering.durability.rateSoldMin}</CardText>\r\n                        <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.durability.temperature / 9)} ºC</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xs=\"8\" className=\"pl-0 pr-0\">\r\n                        {getOptimizedSolderingPlotCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"d-flex flex-column\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                </Row>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_Performance;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport MultiStepNav from '../../../content-parts/MultiStepNav';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationStep_Station from './ProcessOptimizationStep_Station';\r\nimport ProcessOptimizationStep_Temp from './ProcessOptimizationStep_Temp';\r\nimport ProcessOptimizationStep_ProcessParameters from './ProcessOptimizationStep_ProcessParameters';\r\nimport ProcessOptimizationStep_CartridgeTest from './ProcessOptimizationStep_CartridgeTest';\r\nimport ProcessOptimizationStep_CartridgeResult from './ProcessOptimizationStep_CartridgeResult';\r\nimport ProcessOptimizationStep_TempTest from './ProcessOptimizationStep_TempTest';\r\nimport ProcessOptimizationStep_Performance from './ProcessOptimizationStep_Performance';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleOffsetTimeChange: (temperature: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedOffsetTime: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nclass ProcessOptimizationView extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getButtons = () => {\r\n            let isValid =\r\n                (this.props.currentStep === 1 && this.props.selectedStation.id !== \"\") ||\r\n                (this.props.currentStep === 2 && this.props.selectedTemperature > 0) ||\r\n                (this.props.currentStep === 3) ||\r\n                (this.props.currentStep === 4 && this.props.detectedSolderings.length > 1) ||\r\n                (this.props.currentStep === 5) ||\r\n                (this.props.currentStep === 6 && this.props.detectedSolderings.length > 1) ||\r\n                (this.props.currentStep === 7);\r\n\r\n            let nextButton = !isValid ? \"\" :\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >{this.props.currentStep === 7 ? \"Start again\" : \"Continue\"}</Button>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {nextButton}\r\n                </React.Fragment>)\r\n        }\r\n\r\n        const getSteps = () => {\r\n            if (this.props.currentStep === 1) {\r\n                return (\r\n                    <ProcessOptimizationStep_Station\r\n                        isLoadingStations={this.props.isLoading}\r\n                        stationControllers={this.props.stationControllers}\r\n                        handleStationClick={this.props.handleStationClick}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 2) {\r\n                return (\r\n                    <ProcessOptimizationStep_Temp\r\n                        selectedTemperature={this.props.selectedTemperature}\r\n                        handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 3) {\r\n                return (\r\n                    <ProcessOptimizationStep_ProcessParameters\r\n                        selectedOffsetTime={this.props.selectedOffsetTime}\r\n                        handleOffsetTimeChange={this.props.handleOffsetTimeChange}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 4) {\r\n                return (\r\n                    <ProcessOptimizationStep_CartridgeTest\r\n                        selectedTool={this.props.selectedTool}\r\n                        lastRealTimeData={this.props.lastRealTimeData}\r\n                        counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                        detectedSolderings={this.props.detectedSolderings}\r\n\r\n                        handleCartridgeChange={this.props.handleCartridgeChange}\r\n                        handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 5) {\r\n                return (\r\n                    <ProcessOptimizationStep_CartridgeResult\r\n                        isLoading={this.props.isLoading}\r\n                        detectedSolderings={this.props.detectedSolderings}\r\n                        fasterSoldering={this.props.fasterSoldering}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 6) {\r\n                return (\r\n                    <ProcessOptimizationStep_TempTest\r\n                        isLoading={this.props.isLoading}\r\n\r\n                        selectedStation={this.props.selectedStation}\r\n                        selectedPort={this.props.selectedPort}\r\n                        selectedTemperature={this.props.selectedTemperature}\r\n\r\n                        lastRealTimeData={this.props.lastRealTimeData}\r\n                        counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                        detectedSolderings={this.props.detectedSolderings}\r\n                        fasterSoldering={this.props.fasterSoldering}\r\n\r\n                        handleSelecTempChange={this.props.handleSelecTempChange}\r\n                        handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 7) {\r\n                return (\r\n                    <ProcessOptimizationStep_Performance\r\n                        isLoading={this.props.isLoading}\r\n\r\n                        optimizedSoldering={this.props.optimizedSoldering}\r\n                        selectedCartridge={this.props.selectedCartridge}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"content-center mb-3\">\r\n                    <MultiStepNav\r\n                        labels={[\r\n                            \"Station selection\",\r\n                            \"Temperature selection\",\r\n                            \"Process parameters\",\r\n                            \"Cartridge test\",\r\n                            \"Cartridge result\",\r\n                            \"Temperature test\",\r\n                            \"Performance result\"\r\n                        ]}\r\n                        current={this.props.currentStep - 1}\r\n                    />\r\n                </Row>\r\n                    {getSteps()}\r\n                <Row>\r\n                    {getButtons()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport ProcessOptimizationService from '../../../../services/processOptimization.service';\r\nimport StationService from '../../../../services/station.service';\r\nimport WorkService from '../../../../services/work.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationView from './ProcessOptimizationView';\r\n\r\ntype ProcessOptimizationProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedOffsetTime: number,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSolderings: ISolderingData[],\r\n    detectedSolderingsToRemove: string[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass ProcessOptimization extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: 0,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n            selectedOffsetTime: 5,\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSolderings: [],\r\n            detectedSolderingsToRemove: [],\r\n            fasterSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            },\r\n            optimizedSoldering: {\r\n                points: [],\r\n                recommended: {\r\n                    temperature: 0,\r\n                    tipLife: 0,\r\n                    rateSoldMin: 0\r\n                },\r\n                performance: {\r\n                    temperature: 0,\r\n                    tipLife: 0,\r\n                    rateSoldMin: 0\r\n                },\r\n                durability: {\r\n                    temperature: 0,\r\n                    tipLife: 0,\r\n                    rateSoldMin: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                this.applyDetectedSolderingsToRemove();\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        var registeredData = this.state.registeredData;\r\n                        var lastRealTimeData = this.state.lastRealTimeData;\r\n                        var counterTenthSecond = this.state.counterTenthSecond;\r\n                        \r\n                        var wasSoldering = this.state.wasSoldering;\r\n                        var detectedSolderings = this.state.detectedSolderings;\r\n                        \r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !wasSoldering) {\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = registeredData.length - nDataSoldering; i < registeredData.length; i++) {\r\n                                        data.push(registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: this.state.selectedCartridge,\r\n                                        selectedTemperature: this.state.selectedTemperature,\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    detectedSolderings = detectedSolderings.concat(soldering);\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                            let solderingResult = soldering.solderingResult;\r\n\r\n                                            solderingResult.energy = x.energy;\r\n                                            solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n                                            soldering.solderingResult = solderingResult;\r\n                                            soldering.cartridge = this.state.selectedCartridge;\r\n\r\n                                            detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                    let data = soldering.data;\r\n\r\n                                    data.push(x);\r\n                                    soldering.data = data;\r\n\r\n                                    let solderingResult = soldering.solderingResult;\r\n                                    solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                    soldering.solderingResult = solderingResult;\r\n\r\n                                    detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n                                }\r\n\r\n                                registeredData = registeredData.concat(x);\r\n                                registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n                                lastRealTimeData = x;\r\n                                counterTenthSecond++;\r\n\r\n                                wasSoldering = x.isSoldering;\r\n                            })\r\n                        }\r\n\r\n                        this.setState({\r\n                            registeredData: registeredData,\r\n                            lastRealTimeData: lastRealTimeData,\r\n                            counterTenthSecond: counterTenthSecond,\r\n                            readyGetMoreData: true,\r\n                            \r\n                            wasSoldering: wasSoldering,\r\n                            detectedSolderings: detectedSolderings\r\n                        });\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: ProcessOptimizationProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    applyDetectedSolderingsToRemove() {\r\n        if (this.state.detectedSolderingsToRemove.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n            return {\r\n                detectedSolderings:\r\n                    state.detectedSolderings\r\n                        .filter(x => !state.detectedSolderingsToRemove\r\n                            .some(r => r === x.date)),\r\n                detectedSolderingsToRemove: []\r\n            };\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleOffsetTimeChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                selectedOffsetTime: nValue\r\n            });\r\n        }\r\n\r\n        const handleDeleteRealTimeData = (value: string) => {\r\n            this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                return {\r\n                    detectedSolderingsToRemove: state.detectedSolderingsToRemove.concat(value)\r\n                };\r\n            });\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId !== -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n            \r\n            if (this.state.currentStep === 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep === 2) {\r\n                this.setState({\r\n                    currentStep: 3\r\n                })\r\n            }\r\n            else if (this.state.currentStep === 3) {\r\n                this.setState({\r\n                    currentStep: 4,\r\n                    counterTenthSecond: 0,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 4) {\r\n                this.setState({\r\n                    currentStep: 5,\r\n                    isLoading: true\r\n                })\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByCartridge(this.state.detectedSolderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            fasterSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 5) {\r\n                this.setState({\r\n                    currentStep: 6,\r\n                    counterTenthSecond: 0,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 6) {\r\n                this.setState({\r\n                    currentStep: 7,\r\n                    isLoading: true\r\n                })\r\n\r\n                let solderings = this.state.detectedSolderings.map(x => {\r\n                    x.solderingResult.tenthsOfSecondSoldering += this.state.selectedOffsetTime * 10\r\n                    return x;\r\n                });\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByTemperature(solderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            optimizedSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 7) {\r\n                this.setState({\r\n                    currentStep: 1,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ProcessOptimizationView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleOffsetTimeChange={handleOffsetTimeChange}\r\n                handleDeleteRealTimeData={handleDeleteRealTimeData}\r\n                handleNextClick={handleNextClick}\r\n\r\n                selectedStation={this.state.selectedStation}\r\n                selectedPort={this.state.selectedPort}\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n                selectedOffsetTime={this.state.selectedOffsetTime}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                counterTenthSecond={this.state.counterTenthSecond}\r\n\r\n                detectedSolderings={this.state.detectedSolderings}\r\n                fasterSoldering={this.state.fasterSoldering}\r\n                optimizedSoldering={this.state.optimizedSoldering}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(ProcessOptimization);\r\n","import ProcessOptimization from './ProcessOptimization';\r\n\r\nexport default ProcessOptimization;\r\n","import PaginationNav from './PaginationNav';\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\n\r\ntype PaginationNavProps = {\r\n    totalElements: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    handlePageClick: (page: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass PaginationNav extends React.PureComponent<PaginationNavProps> {\r\n    public render() {\r\n        const getItems = (pageNumber: number, totalPages: number) => {\r\n            let items = [];\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        first\r\n                        disabled={pageNumber === 1}\r\n                        onClick={() => this.props.handlePageClick(1)} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        previous\r\n                        disabled={pageNumber === 1}\r\n                        onClick={this.props.handlePreviousPageClick} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            items.push(new Array(totalPages).fill(0).map((zero, index) =>\r\n                <PaginationItem active={pageNumber === index + 1}>\r\n                    <PaginationLink onClick={() => this.props.handlePageClick(index + 1)}>\r\n                        {index + 1}\r\n                    </PaginationLink>\r\n                </PaginationItem>\r\n            ));\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        next\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={this.props.handleNextPageClick} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        last\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={() => this.props.handlePageClick(totalPages)} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            return items;\r\n        }\r\n\r\n        let totalPages = Math.ceil(this.props.totalElements / this.props.pageSize);\r\n        let items = getItems(this.props.pageNumber, totalPages);\r\n\r\n        return (\r\n            <Pagination>\r\n                {items}\r\n            </Pagination>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: number[]\r\n}\r\n\r\nclass PlotPowerAxisTiny extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        let plotDataObj = this.props.plotData.map((x) => {\r\n            return {power: x}\r\n        });\r\n\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"power\" yAxisId=\"left\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotPowerAxisTiny;\r\n","import PlotPowerAxisTiny from './PlotPowerAxisTiny';\r\n\r\nexport default PlotPowerAxisTiny;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFile, faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport { faDownload, faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\n\r\ntype SolderingAssistantProps = {\r\n    references: AssistantStore.Reference[],\r\n    nTotalReferences: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    deleteReference: (id: number) => void,\r\n    uploadReference: (file: FormData) => void,\r\n    downloadReference: (id: number, name: string) => void,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    showDeleteModal: boolean;\r\n    referenceIdToDelete: number;\r\n}\r\n\r\nclass SolderingAssistantView extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showDeleteModal: false,\r\n            referenceIdToDelete: -1\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListReferences = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.references) {\r\n                options.push(\r\n                    <tr>\r\n                        <td>{value.id}</td>\r\n                        <td>\r\n                            <PlotPowerAxisTiny\r\n                                plotData={value.power}\r\n                            />\r\n                        </td>\r\n                        <td>{value.name.length === 0 ? \"[No name]\" : value.name}</td>\r\n                        <td>{value.cartridge}</td>\r\n                        <td>{value.temperature / 9}</td>\r\n                        <td>{value.durationTenthsSeconds / 10}</td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"p-0 pr-3 d-inline\" onClick={() => this.props.downloadReference(value.id, value.name)}>\r\n                                <FontAwesomeIcon icon={faDownload} className=\"fa\" />\r\n                            </NavLink>\r\n                            <a href=\"#\" className=\"pr-3\" onClick={(event) => handleDeleteClick(event, value.id)}>\r\n                                <FontAwesomeIcon icon={faTrashAlt} className=\"fa\"/>\r\n                            </a>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\" className=\"w-20\">Reference</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Cartridge</th>\r\n                            <th scope=\"col\">Temperature (ºC)</th>\r\n                            <th scope=\"col\">Duration (s)</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        const getListReferencesCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListReferences()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card> \r\n            )\r\n        }\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, id: number) => {\r\n            event.preventDefault();\r\n\r\n            this.setState({\r\n                referenceIdToDelete: id,\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteReference(this.state.referenceIdToDelete);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleUploadClick = () => {\r\n            fileSelector.click();\r\n        }\r\n\r\n        const handleUploadChange = (e: Event) => {\r\n            let input = e.target as HTMLInputElement;\r\n\r\n            if (input.files) {\r\n                let file = input.files[0];\r\n                let formData = new FormData();\r\n                formData.append('file', file);\r\n\r\n                this.props.uploadReference(formData);\r\n            }\r\n        }\r\n\r\n        const fileSelector = document.createElement('input');\r\n        fileSelector.setAttribute('type', 'file');\r\n        fileSelector.setAttribute('accept', '.jsr');\r\n        fileSelector.addEventListener('change', handleUploadChange);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <h1>List of references</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/processes/assistant/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={handleUploadClick}\r\n                    >\r\n                        <FontAwesomeIcon icon={faUpload} /> Upload\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getListReferencesCard()}\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalReferences}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete reference</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the reference? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"primary\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"primary\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport SolderingAssistantView from './SolderingAssistantView';\r\n\r\ntype SolderingAssistantProps =\r\n    AssistantStore.AssistantState &\r\n    typeof AssistantStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean,\r\n    nTotalReferences: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass SolderingAssistant extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            nTotalReferences: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchReferences(this.props, this.state.pageNumber);\r\n    }\r\n\r\n    searchReferences(props: SolderingAssistantProps, pageNumber: number) {\r\n        props.deleteAllReferences();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber\r\n        })\r\n\r\n        AssistantService\r\n            .getReferences(pageNumber, this.state.pageSize)\r\n            .then(references => {\r\n                references.forEach((x: AssistantStore.Reference) =>\r\n                    props.createReference(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        AssistantService\r\n            .countReferences()\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalReferences: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleDeleteReference = (id: number) => {\r\n            AssistantService\r\n                .deleteReference(id)\r\n                .then(() =>\r\n                    this.searchReferences(\r\n                        this.props,\r\n                        this.state.pageNumber)\r\n                );\r\n        }\r\n\r\n        const handleUploadReference = (file: FormData) => {\r\n            AssistantService\r\n                .uploadReference(file)\r\n                .then(() =>\r\n                    this.searchReferences(\r\n                        this.props,\r\n                        this.state.pageNumber)\r\n                );\r\n        }\r\n\r\n        const handleDownloadReference = (id: number, name: string) => {\r\n            AssistantService\r\n                .downloadReference(id)\r\n                .then((value) => {\r\n                    let data = JSON.stringify(value);\r\n                    const url = window.URL.createObjectURL(new Blob([data]));\r\n                    let link = document.createElement('a');\r\n                    link.href = url;\r\n                    link.setAttribute('download', name + '.jsr');\r\n                    document.body.appendChild(link);\r\n\r\n                    link.click();\r\n\r\n                    document.body.removeChild(link);\r\n                });\r\n        }\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchReferences(\r\n                this.props,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchReferences(\r\n                this.props,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchReferences(\r\n                this.props,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalReferences / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        return (\r\n            <SolderingAssistantView\r\n                references={this.props.references}\r\n                nTotalReferences={this.state.nTotalReferences}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                deleteReference={handleDeleteReference}\r\n                uploadReference={handleUploadReference}\r\n                downloadReference={handleDownloadReference}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        references: state.assistant.references\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    AssistantStore.actionCreators\r\n)(SolderingAssistant);\r\n","import SolderingAssistant from './SolderingAssistant';\r\n\r\nexport default SolderingAssistant;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { LoadCartridges, ICartridge } from '../../../../utils/cartridgeUtils';\r\nimport StationsPortList from '../../../content-parts/StationsPortList';\r\n\r\ntype SolderingAssistantProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleNameChange: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string,\r\n    cartridgeName: string\r\n}\r\n\r\nclass SolderingAssistantNewStep1 extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n        \r\n        let cartridgeImagePath = \"\";\r\n        let cartridgeName = \"\";\r\n        let cartridges = LoadCartridges();\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeName: cartridgeName,\r\n            cartridgeImagePath: cartridgeImagePath\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n        \r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoading}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const getListOptionsStationControllersCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Stations available</CardTitle>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.props.handleStationClick(station, port, tool);\r\n\r\n            let cartridgeImagePath = \"\";\r\n            let cartridgeName = \"\";\r\n            let defaultCartridge = this.state.cartridges.find(x => x.isDefault && x.tool === tool);\r\n        \r\n            if (defaultCartridge !== undefined) {\r\n                cartridgeImagePath = defaultCartridge.img;\r\n                cartridgeName = defaultCartridge.name;\r\n                this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n            }\r\n    \r\n            this.setState ({\r\n                cartridgeImagePath: cartridgeImagePath,\r\n                cartridgeName: cartridgeName\r\n            });\r\n        }\r\n\r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n            let cartridgeName = cartridge === undefined ? \"\" : cartridge.name;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath,\r\n                cartridgeName: cartridgeName\r\n            });\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>\r\n                                    <strong>Selected temperature:</strong>\r\n                                    <Input\r\n                                        defaultValue={this.props.selectedTemperature / 9}\r\n                                        onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                    />\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <strong>Selected cartridge:</strong>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <strong>Name:</strong>\r\n                                    <Input\r\n                                        onChange={(e) => this.props.handleNameChange(e.target.value)}\r\n                                    />\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={this.state.cartridgeImagePath} alt={this.state.cartridgeName} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (!this.props.isFormCorrect) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New soldering reference</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"8\" className=\"pr-0 pl-0\">\r\n                        {getListOptionsStationControllersCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantNewStep1;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport { SecToString } from '../../../utils/timeUtils';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2Axis extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -10,\r\n                        right: -10\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={50}\r\n                        label={\"Time (s)\"}\r\n                        tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                        interval={this.props.interval} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={[0, 400]} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        domain={[0, 100]} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2Axis;\r\n","import Plot2Axis from './Plot2Axis';\r\n\r\nexport default Plot2Axis;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardBody, CardText, CardTitle } from 'reactstrap';\r\nimport { LoadCartridges } from '../../../../utils/cartridgeUtils';\r\nimport Plot2Axis from '../../../content-parts/Plot2Axis';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype SolderingAssistantProps = {\r\n    currentStep: number,\r\n    lastRealTimeData: IRealTimeData,\r\n    detectedSoldering: ISolderingData,\r\n\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    handleNextClick: () => void,\r\n    handleSaveReferenceClick: () => void\r\n}\r\n\r\nclass SolderingAssistantNewStep2 extends React.PureComponent<SolderingAssistantProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getLastSolderingCard = () => {\r\n            let data: IRealTimeData[];\r\n            data = this.props.detectedSoldering.data.map(x => {\r\n                return {\r\n                    temperature: x.temperature / 9,\r\n                    power: x.power / 10,\r\n                    toolStatus: x.toolStatus,\r\n                    isPortEnabled: x.isPortEnabled,\r\n                    isCalibrating: x.isCalibrating,\r\n                    isSoldering: x.isSoldering,\r\n                    tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                }\r\n            });\r\n\r\n            let registeredPlot =\r\n                <Plot2Axis\r\n                    plotData={data}\r\n                    counterTenthSecond={data.length}\r\n                    interval={Math.floor(data.length / 5)}\r\n                />;\r\n\r\n            let saveButton = \r\n                this.props.detectedSoldering.solderingResult.tenthsOfSecondSoldering === 0 ?\r\n                    \"\" :\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={this.props.handleSaveReferenceClick}\r\n                    >Save reference</Button>;\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Last soldering</CardTitle>\r\n                        <CardText>Time: <strong>{this.props.detectedSoldering.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                        <CardText>Energy: <strong>{this.props.detectedSoldering.solderingResult.energy} w·s</strong></CardText>\r\n                        <CardText>{registeredPlot}</CardText>\r\n                        <CardText>{saveButton}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            let cartridges = LoadCartridges();\r\n            let cartridge = cartridges.find(x => x.fullName === this.props.selectedCartridge);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Selected temperature: {this.props.selectedTemperature / 9} ºC</CardText>\r\n                                <CardText>Cartridge: {this.props.selectedCartridge}</CardText>\r\n                                <CardText>Name: {this.props.selectedName.length === 0 ? \"[No name]\" : this.props.selectedName}</CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={cartridgeImagePath} alt={this.props.selectedCartridge} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Previous</Button>)\r\n        }\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New soldering reference</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"8\" className=\"pl-0\">\r\n                        {getLastSolderingCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantNewStep2;\r\n","import * as React from 'react';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport SolderingAssistantNewStep1 from './SolderingAssistantNewStep1';\r\nimport SolderingAssistantNewStep2 from './SolderingAssistantNewStep2';\r\n\r\ntype SolderingAssistantProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    detectedSoldering: ISolderingData,\r\n\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleNameChange: (value: string) => void,\r\n    handleNextClick: () => void,\r\n    handleSaveReferenceClick: () => void\r\n}\r\n\r\nclass SolderingAssistantNewView extends React.PureComponent<SolderingAssistantProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <SolderingAssistantNewStep1\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n                    isFormCorrect={this.props.isFormCorrect}\r\n                    \r\n                    stationControllers={this.props.stationControllers}\r\n                    \r\n                    selectedTool={this.props.selectedTool}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    handleStationClick={this.props.handleStationClick}\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleCartridgeChange={this.props.handleCartridgeChange}\r\n                    handleNameChange={this.props.handleNameChange}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <SolderingAssistantNewStep2\r\n                    currentStep={this.props.currentStep}\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    detectedSoldering={this.props.detectedSoldering}\r\n\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n                    selectedCartridge={this.props.selectedCartridge}\r\n                    selectedName={this.props.selectedName}\r\n\r\n                    handleNextClick={this.props.handleNextClick}\r\n                    handleSaveReferenceClick={this.props.handleSaveReferenceClick}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport StationService from '../../../../services/station.service';\r\nimport WorkService from '../../../../services/work.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport SolderingAssistantNewView from './SolderingAssistantNewView';\r\n\r\ntype SolderingAssistantProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n  & RouteComponentProps<{id: string}>;\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSoldering: ISolderingData\r\n}\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass SolderingAssistantNew extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: -1,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n            selectedName: \"\",\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            }\r\n        }\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !this.state.wasSoldering) {\r\n\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(this.state.registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = this.state.registeredData.length - nDataSoldering; i < this.state.registeredData.length; i++) {\r\n                                        data.push(this.state.registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: \"\", //TODO\r\n                                        selectedTemperature: 0, //TODO\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                        return {\r\n                                            detectedSoldering: soldering,\r\n                                            wasSoldering: true\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && this.state.wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                                let soldering = state.detectedSoldering;\r\n                                                let solderingResult = soldering.solderingResult;\r\n\r\n                                                solderingResult.energy = x.energy;\r\n                                                solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n\r\n\r\n                                                return {\r\n                                                    detectedSoldering: soldering,\r\n                                                    wasSoldering: false\r\n                                                };\r\n                                            });\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                        let soldering = state.detectedSoldering;\r\n                                        let data = soldering.data;\r\n\r\n                                        data.push(x);\r\n                                        soldering.data = data;\r\n\r\n                                        let solderingResult = soldering.solderingResult;\r\n                                        solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                        soldering.solderingResult = solderingResult;\r\n\r\n                                        return {\r\n                                            detectedSoldering: soldering\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                    let registeredData = state.registeredData.concat(x);\r\n                                    registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n\r\n                                    return {\r\n                                        registeredData: registeredData,\r\n                                        lastRealTimeData: x\r\n                                    };\r\n                                });\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            readyGetMoreData: true\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: SolderingAssistantProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            this.setState({\r\n                selectedName: value\r\n            });\r\n        }\r\n\r\n        const handleSaveReferenceClick = () => {\r\n            AssistantService\r\n                .generateReferenceSoldering(\r\n                    this.state.selectedStation.id,\r\n                    this.state.selectedPort,\r\n                    this.state.selectedName,\r\n                    this.state.selectedCartridge)\r\n                .then(() =>\r\n                    this.props.history.push(\"/processes/assistant\")\r\n                );\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId !== -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n\r\n            if (this.state.currentStep === 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 2) {\r\n                this.setState({\r\n                    currentStep: 1,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <SolderingAssistantNewView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n                isFormCorrect={this.state.selectedStation.id !== \"\"}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                detectedSoldering={this.state.detectedSoldering}\r\n\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n                selectedName={this.state.selectedName}\r\n\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleNameChange={handleNameChange}\r\n                handleNextClick={handleNextClick}\r\n                handleSaveReferenceClick={handleSaveReferenceClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(SolderingAssistantNew);\r\n","import SolderingAssistantNew from './SolderingAssistantNew';\r\n\r\nexport default SolderingAssistantNew;\r\n","import Traceability from './Traceability';\r\n\r\nexport default Traceability;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport CardView from '../../../content-parts/Card/CardView'\r\n\r\nclass Traceability extends React.PureComponent {\r\n    public render() {\r\n\r\n        return (\r\n            <div className=\"list-cards\">\r\n                <Row xs={1} sm={2} md={4}>\r\n                    <Col>\r\n                        <CardView to=\"/traceability/task\" imgPath=\"img/iconImg/tasksTraceability.png\" alt=\"Tasks Traceability\" \r\n                                    cardText=\"Access the list of registered jobs and create new tasks.\" \r\n                                    cardTitle=\"Tasks\"/>\r\n                    </Col>\r\n                    <Col>\r\n                        <CardView to=\"/traceability/workprocess\" imgPath=\"img/iconImg/workProcess.png\" alt=\"Work Process\" \r\n                                    cardText=\"Register your work in the traceability system.\" \r\n                                    cardTitle=\"Work process\"/>\r\n                    </Col>\r\n                    <Col>\r\n                        <CardView to=\"/traceability/workbenchs\" imgPath=\"img/iconImg/workBench.png\" alt=\"Work Benchs\" \r\n                                    cardText=\"Manage workbenchs and connected stations.\" \r\n                                    cardTitle=\"Workbenchs\"/>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Traceability;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TasksService {\r\n    static async countTasks(filter) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTasks();\r\n        }\r\n        else {\r\n            count = RestService.countTasks(filter);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTasks();\r\n        }\r\n        else {\r\n            tasks = RestService.getTasks(filter, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskById();\r\n        }\r\n        else {\r\n            task = RestService.getTaskById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n\r\n    static async createTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.createTask();\r\n        }\r\n        else {\r\n            RestService.createTask(task);\r\n        }\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.updateTask();\r\n        }\r\n        else {\r\n            RestService.updateTask(task);\r\n        }\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteTask();\r\n        }\r\n        else {\r\n            RestService.deleteTask(id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TasksService;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons'\r\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { faFile } from '@fortawesome/free-regular-svg-icons'\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\n\r\ntype TasksProps = {\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\nclass TasksView extends React.PureComponent<TasksProps> {\r\n\r\n    public render() {\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.tasks) {\r\n                options.push(\r\n                    <tr>\r\n                        <td>{value.id}</td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.timesPerformed}</td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"p-0 pr-3 d-inline\" to={\"/traceability/task/\" + value.id + \"/detail\"}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                            <NavLink tag={Link} className=\"p-0 pr-3 d-inline\" to={\"/traceability/task/\" + value.id + \"/edit\"}>\r\n                                <FontAwesomeIcon icon={faPen} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\"># of times performed</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        const getListOptionsTasksCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                        <CardText>\r\n                            {getListOptionsTasks()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <h1>List of Tasks</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/traceability/task/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getListOptionsTasksCard()}\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TasksView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TasksView from './TasksView';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype TasksProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    timer: number,\r\n    isLoading: boolean,\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    filter: string\r\n}\r\n\r\nclass Tasks extends React.PureComponent<TasksProps, IState> {\r\n    constructor(props: TasksProps) {\r\n        super(props);\r\n        this.state = {\r\n            timer: -1,\r\n            isLoading: true,\r\n            nTotalTasks: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1,\r\n            filter: \"\"\r\n        };\r\n\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n    }\r\n\r\n    searchTasks(props: TasksProps, filter: string, pageNumber: number) {\r\n        props.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                tasks.forEach((x: TaskStore.Task) =>\r\n                    props.createTask(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks.bind(this), WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <TasksView\r\n                tasks={this.props.tasks}\r\n                nTotalTasks={this.state.nTotalTasks}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n                handleSearchFieldChange={handleSearchFieldChange}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    TaskStore.actionCreators\r\n)(Tasks);\r\n","import Tasks from './Tasks';\r\n\r\nexport default Tasks;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport { GetTools } from '../../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\n\r\ntype TaskNewProps = {\r\n    isLoading: boolean,\r\n    reference: AssistantStore.Reference,\r\n\r\n    handleRefSolderingChange: (id: number) => void,\r\n    newTask: (task: TaskStore.Task) => void\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n}\r\n\r\nclass TaskNewView extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        let task = {\r\n            id: 0,\r\n            name: \"\",\r\n            workConfig: {\r\n                tool: 1,\r\n                selectedTemp: 350 * 9,\r\n                changeSelectedTemp: false,\r\n                solderingReferenceId: -1,\r\n                changeSolderingReference: false,\r\n                qualityControl: false\r\n            },\r\n            timesPerformed: 0\r\n        }\r\n\r\n        this.state = {\r\n            task: task\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const getReferenceSoldering = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            if (this.props.reference.id <= 0) {\r\n                return \"Soldering reference undefined.\";\r\n            }\r\n\r\n            return (\r\n                <PlotPowerAxisTiny\r\n                    plotData={this.props.reference.power}\r\n                />\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySolderingRefChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        changeSolderingReference: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleSolderingRefChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            this.props.handleRefSolderingChange(nValue);\r\n\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        solderingReferenceId: nValue\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleQualityControlChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        qualityControl: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            this.props.newTask(this.state.task);\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New task</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Name:</Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                onChange={(e) => handleNameChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSolderingReference\"\r\n                                                label=\"Soldering reference code\"\r\n                                                onChange={(e) => handleModifySolderingRefChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                onChange={(e) => handleSolderingRefChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeQualityControl\"\r\n                                                label=\"Enable quality control\"\r\n                                                onChange={(e) => handleQualityControlChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    {getReferenceSoldering()}\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Create\r\n                    </Button>\r\n\r\n                    <Button color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to=\"/traceability/task\">Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TaskNewView from './TaskNewView';\r\n\r\ntype TaskNewProps = {\r\n}\r\n\r\ninterface IState {\r\n    redirect: string,\r\n    isLoading: boolean,\r\n    reference: AssistantStore.Reference\r\n}\r\n\r\nclass TaskNew extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n            isLoading: false,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            }\r\n        };\r\n    }\r\n    \r\n    public render() {\r\n        const handleRefSolderingChange = (id: number) => {\r\n            this.setState({\r\n                isLoading: true\r\n            })\r\n\r\n            AssistantService\r\n                .getReferenceById(id)\r\n                .then(reference => {\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        reference: reference\r\n                    })\r\n                });\r\n        }\r\n\r\n        const handleNewTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .createTask(task);\r\n            \r\n            this.setState({\r\n                redirect: \"/traceability/task\"\r\n            });\r\n        }\r\n\r\n        if (this.state.redirect.length > 0) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        \r\n        return (\r\n            <TaskNewView\r\n                isLoading={this.state.isLoading}\r\n                reference={this.state.reference}\r\n\r\n                handleRefSolderingChange={handleRefSolderingChange}\r\n                newTask={handleNewTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    TaskStore.actionCreators\r\n)(TaskNew);\r\n","import TaskNew from './TaskNew';\r\n\r\nexport default TaskNew;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport { GetTools } from '../../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\n\r\ntype TaskEditProps = {\r\n    task: TaskStore.Task,\r\n    isLoading: boolean,\r\n    reference: AssistantStore.Reference,\r\n\r\n    handleRefSolderingChange: (id: number) => void,\r\n    updateTask: (task: TaskStore.Task) => void,\r\n    deleteTask: (id: number) => void\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n    showDeleteModal: boolean;\r\n}\r\n\r\nclass TaskEditView extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            task: props.task,\r\n            showDeleteModal: false\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const getReferenceSoldering = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            if (this.props.reference.id <= 0) {\r\n                return \"Soldering reference undefined.\";\r\n            }\r\n            \r\n            return (\r\n                <PlotPowerAxisTiny\r\n                    plotData={this.props.reference.power}\r\n                />\r\n            )\r\n        }\r\n\r\n        const getDeleteButton = () => {\r\n            if (this.props.task.timesPerformed > 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button outline color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                    <a href=\"#\" className=\"p-0\" onClick={(event) => handleDeleteClick(event)}>\r\n                        <FontAwesomeIcon icon={faTrashAlt} className=\"pr-1\"/> Delete task\r\n                    </a>\r\n                </Button>\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n            \r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySolderingRefChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        changeSolderingReference: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleSolderingRefChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        solderingReferenceId: nValue\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleQualityControlChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        qualityControl: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            if (this.state.task === undefined) {\r\n                return;\r\n            }\r\n\r\n            this.props.updateTask(this.state.task);\r\n        };\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n            event.preventDefault();\r\n            this.setState({\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteTask(this.state.task.id);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <h1>{this.state.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    {getDeleteButton()}\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Name:</Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                defaultValue={this.state.task.name}\r\n                                                onChange={(e) => handleNameChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                defaultChecked={this.state.task.workConfig.changeSelectedTemp}\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                defaultValue={this.state.task.workConfig.selectedTemp / 9}\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSolderingReference\"\r\n                                                label=\"Soldering reference code\"\r\n                                                defaultChecked={this.state.task.workConfig.changeSolderingReference}\r\n                                                onChange={(e) => handleModifySolderingRefChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                defaultValue={this.state.task.workConfig.solderingReferenceId}\r\n                                                onChange={(e) => handleSolderingRefChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeQualityControl\"\r\n                                                label=\"Enable quality control\"\r\n                                                defaultChecked={this.state.task.workConfig.qualityControl}\r\n                                                onChange={(e) => handleQualityControlChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    {getReferenceSoldering()}\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Confirm\r\n                    </Button>\r\n\r\n                    <Button color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/traceability/task/\" + this.state.task.id + \"/detail\"}>Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete task</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the task? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"primary\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"primary\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskEditView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport TaskEditView from './TaskEditView';\r\n\r\ntype TaskEditProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{id: string}>;\r\n\r\ninterface IState {\r\n    id: number,\r\n    isLoading: boolean,\r\n    isLoadingRefSoldering: boolean,\r\n    reference: AssistantStore.Reference\r\n}\r\n\r\nclass TaskEdit extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            isLoading: true,\r\n            isLoadingRefSoldering: true,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            }\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n    }\r\n\r\n    searchTask(props: TaskEditProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then((x: TaskStore.Task) => {\r\n                props.createTask(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n\r\n                AssistantService\r\n                    .getReferenceById(x.workConfig.solderingReferenceId)\r\n                    .then(reference => {\r\n                        this.setState({\r\n                            isLoadingRefSoldering: false,\r\n                            reference: reference\r\n                        })\r\n                    });\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleRefSolderingChange = (id: number) => {\r\n            this.setState({\r\n                isLoadingRefSoldering: true\r\n            })\r\n\r\n            AssistantService\r\n                .getReferenceById(id)\r\n                .then(reference => {\r\n                    this.setState({\r\n                        isLoadingRefSoldering: false,\r\n                        reference: reference\r\n                    })\r\n                });\r\n        }\r\n\r\n        const handleUpdateTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .updateTask(task)\r\n                .then(() =>\r\n                    this.props.history.push(\"/traceability/task/\" + this.state.id + \"/detail\")\r\n                );\r\n        }\r\n\r\n        const handleDeleteTask = (id: number) => {\r\n            TasksService\r\n                .deleteTask(id)\r\n                .then(() =>\r\n                    this.props.history.push(\"/traceability/task\")\r\n                );\r\n        }\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"primary\"/>\r\n                </div>);\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id === this.state.id);\r\n\r\n        if (task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        return (\r\n            <TaskEditView\r\n                task={task}\r\n                isLoading={this.state.isLoadingRefSoldering}\r\n                reference={this.state.reference}\r\n\r\n                handleRefSolderingChange={handleRefSolderingChange}\r\n                updateTask={handleUpdateTask}\r\n                deleteTask={handleDeleteTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.task,\r\n    TaskStore.actionCreators\r\n)(TaskEdit);\r\n","import TaskEdit from './TaskEdit';\r\n\r\nexport default TaskEdit;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TaskHistoriessService {\r\n    static async countTaskHistories(taskId) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTaskHistories();\r\n        }\r\n        else {\r\n            count = RestService.countTaskHistories(taskId);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTaskHistories(id, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTaskHistories(id);\r\n\r\n        }\r\n        else {\r\n            tasks = RestService.getTaskHistories(id, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskHistoryById(id);\r\n\r\n        }\r\n        else {\r\n            task = RestService.getTaskHistoryById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n}\r\n\r\nexport default TaskHistoriessService;\r\n","import ResponsivePieChart from './ResponsivePieChart';\r\n\r\nexport default ResponsivePieChart;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    data: object[]\r\n}\r\n\r\nclass ResponsivePieChart extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        const COLORS = ['#00C49F', '#dc3545'];\r\n\r\n        return (\r\n            <ResponsiveContainer>\r\n                <PieChart>\r\n                    <Pie\r\n                        data={this.props.data}\r\n                        dataKey=\"value\"\r\n                    >\r\n                        {\r\n                            this.props.data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n            </ResponsiveContainer>)\r\n    }\r\n};\r\n\r\nexport default ResponsivePieChart;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle, faEye, faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport ResponsivePieChart from '../../../content-parts/ResponsivePieChart';\r\nimport { Round } from '../../../../utils/numberUtils';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\n\r\ntype TaskDetailProps = {\r\n    task: TaskStore.Task | undefined,\r\n    taskHistories: TaskHistoryStore.TaskHistory[],\r\n    nTotalTaskHistories: number,\r\n    reference: AssistantStore.Reference,\r\n\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n    isLoadingRefSoldering: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass TaskDetailView extends React.PureComponent<TaskDetailProps> {\r\n    public render() {\r\n        if (this.props.isLoadingTask) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"primary\"/>\r\n                </div>);\r\n        }\r\n\r\n        if (this.props.task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        const getDefectsChart = (correct: number, incorrect: number) => {\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            return <ResponsivePieChart data={data} />\r\n        }\r\n\r\n        const getReferenceSoldering = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            if (!this.props.task.workConfig.changeSolderingReference) {\r\n                return \"\";\r\n            }\r\n\r\n            if (this.props.isLoadingRefSoldering) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n            \r\n            return (\r\n                <PlotPowerAxisTiny\r\n                    plotData={this.props.reference.power}\r\n                />\r\n            )\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            let details =\r\n                <React.Fragment>\r\n                    <CardText>Code: {this.props.task.id}</CardText>\r\n                    <CardText># of times performed: {this.props.task.timesPerformed}</CardText>\r\n                    \r\n                    <hr/>\r\n                    <CardText>Tool: {ToolToString(this.props.task.workConfig.tool)}</CardText>\r\n                    {this.props.task.workConfig.changeSelectedTemp ?\r\n                        <CardText>\r\n                            Selected temperature: {Math.floor(this.props.task.workConfig.selectedTemp / 9)} ºC\r\n                        </CardText> :\r\n                        \"\"\r\n                    }\r\n                    {this.props.task.workConfig.changeSolderingReference ?\r\n                        <CardText>\r\n                            Soldering reference: {this.props.reference.name.length === 0 ? \"[No name]\" : this.props.reference.name}\r\n                        </CardText> :\r\n                        \"\"\r\n                    }\r\n                </React.Fragment>\r\n\r\n\r\n\r\n            let body =\r\n                this.props.task.workConfig.changeSolderingReference ?\r\n                    <CardBody className=\"d-flex flex-column\">\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                {details}\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                {getReferenceSoldering()}\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>:\r\n                    <CardBody>\r\n                        {details}\r\n                    </CardBody>\r\n\r\n            return (\r\n                <Card>\r\n                    {body}\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getQualityCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            let correct = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType === 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            let incorrect = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType !== 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            let total = correct + incorrect;\r\n            let percent = total === 0 ? 0 : Round((correct / total) * 100 );\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getDefectsChart(correct, incorrect)}\r\n                        <CardText>Correct solderings: <strong>{correct}/{total} ({percent}%)</strong></CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getListHistoryTasks = () => {\r\n            if (this.props.task === undefined)\r\n                return \"\";\r\n\r\n            if (this.props.isLoadingHistories) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let items = [];\r\n\r\n            for (const value of this.props.taskHistories) {\r\n                let circleLight = \"circle-light-\" + (value.workData.workSolderings.filter(x => x.solderingType === 1).length === 0 ? \"0\" : \"1\")\r\n\r\n                items.push(\r\n                    <tr>\r\n                        <td>{value.id}</td>\r\n                        <td>{new Date(value.finishDate).toLocaleDateString('es-ES')}</td>\r\n                        {this.props.task.workConfig.qualityControl ?\r\n                            <td>\r\n                                <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"}/>\r\n                            </td> : \"\"\r\n                        }\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + this.props.task.id + \"/history/\" + value.id}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Id</th>\r\n                            <th scope=\"col\">Finished date</th>\r\n                            {this.props.task.workConfig.qualityControl ?\r\n                                <th scope=\"col\">Detected defects</th> : \"\"\r\n                            }\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n\r\n        const getListHistoryTasksCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Task history ({this.props.nTotalTaskHistories} elements)</CardTitle>\r\n                        <CardText>\r\n                            {getListHistoryTasks()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getLayout = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            if (this.props.task.workConfig.qualityControl) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getDetailsCard()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getQualityCard()}\r\n                        </Col>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <React.Fragment>\r\n                        {getDetailsCard()}\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <h1>{this.props.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink tag={Link} className=\"p-0\" to={\"/traceability/task/\" + this.props.task.id + \"/edit\"}>\r\n                            <FontAwesomeIcon icon={faPen} className=\"pr-1\" /> Edit task\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getLayout()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getListHistoryTasksCard()}\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTaskHistories}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskDetailView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport TaskDetailView from './TaskDetailView';\r\n\r\ntype TaskDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n  & TaskHistoryStore.TaskHistoryState\r\n  & RouteComponentProps<{ id: string }>\r\n\r\ninterface IState {\r\n    id: number,\r\n    reference: AssistantStore.Reference,\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n    isLoadingRefSoldering: boolean,\r\n    nTotalTaskHistories: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass TaskDetail extends React.PureComponent<TaskDetailProps, IState> {\r\n    constructor(props: TaskDetailProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            },\r\n            isLoadingTask: true,\r\n            isLoadingHistories: true,\r\n            isLoadingRefSoldering: true,\r\n            nTotalTaskHistories: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n        this.searchTaskHistories(this.props, id, this.state.pageNumber);\r\n    }\r\n\r\n    searchTask(props: TaskDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then((x: TaskStore.Task) => {\r\n                props.taskActions.createTask(x)\r\n                \r\n                this.setState({\r\n                    isLoadingTask: false\r\n                })\r\n\r\n                AssistantService\r\n                    .getReferenceById(x.workConfig.solderingReferenceId)\r\n                    .then(reference => {\r\n                        this.setState({\r\n                            isLoadingRefSoldering: false,\r\n                            reference: reference\r\n                        })\r\n                    });\r\n            });\r\n    }\r\n\r\n    searchTaskHistories(props: TaskDetailProps, id: string, pageNumber: number) {\r\n        props.taskHistoryActions.deleteAllTaskHistories();\r\n\r\n        TaskHistoriesService\r\n            .getTaskHistories(id, pageNumber, this.state.pageSize)\r\n            .then(taskHistories => {\r\n                taskHistories.forEach((x: TaskHistoryStore.TaskHistory) =>\r\n                    props.taskHistoryActions.createTaskHistory(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoadingHistories: false,\r\n                    pageNumber: pageNumber\r\n                })\r\n            });\r\n\r\n        TaskHistoriesService\r\n            .countTaskHistories(id)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTaskHistories: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTaskHistories / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id === this.state.id);\r\n        const taskHistories = this.props.taskHistories;\r\n\r\n        return (\r\n            <TaskDetailView\r\n                task={task}\r\n                taskHistories={taskHistories}\r\n                nTotalTaskHistories={this.state.nTotalTaskHistories}\r\n                reference={this.state.reference}\r\n\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n\r\n                isLoadingTask={this.state.isLoadingTask}\r\n                isLoadingHistories={this.state.isLoadingHistories}\r\n                isLoadingRefSoldering={this.state.isLoadingRefSoldering}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskDetail);\r\n","import TaskDetail from './TaskDetail';\r\n\r\nexport default TaskDetail;\r\n","import PlotReferenceTiny from './PlotReferenceTiny';\r\n\r\nexport default PlotReferenceTiny;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    soldering: number[],\r\n    reference: number[]\r\n}\r\n\r\nclass PlotReferenceTiny extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        let plotDataObj = [];\r\n\r\n        for (var i: number = 0; i < Math.max(this.props.soldering.length, this.props.reference.length); i++) {\r\n            plotDataObj.push({\r\n                tick: i,\r\n                soldering: i < this.props.soldering.length ? this.props.soldering[i] / 10 : null,\r\n                reference: i < this.props.reference.length ? this.props.reference[i] / 10 : null\r\n            });\r\n        }\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis />\r\n\r\n                    <Line dataKey=\"soldering\" type=\"monotone\" dot={false} />\r\n                    <Line dataKey=\"reference\" type=\"monotone\" dot={false} stroke=\"#bd8531\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotReferenceTiny;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Button, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport { Round } from '../../../../utils/numberUtils';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport { GetPlotSeriesData } from '../../../../utils/plotUtils';\r\nimport { ClassificationToString } from '../../../../utils/solderingClassificationUtils';\r\nimport Plot2Axis from '../../../content-parts/Plot2Axis';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport PlotReferenceTiny from '../../../content-parts/PlotReferenceTiny';\r\nimport ResponsivePieChart from '../../../content-parts/ResponsivePieChart';\r\nimport './TaskHistoryDetail.css';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    task: TaskStore.Task,\r\n    taskHistory: TaskHistoryStore.TaskHistory\r\n}\r\n\r\nclass TaskHistoryDetailView extends React.PureComponent<TaskHistoryDetailProps> {\r\n    public render() {\r\n        const getDetailsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>Finished date: {new Date(this.props.taskHistory.finishDate).toLocaleDateString('es-ES')}</CardText>\r\n                        <CardText>Task code: {this.props.task.id}</CardText>\r\n                        \r\n                        <hr/>\r\n                        <CardText>Station name: {this.props.taskHistory.workData.stationName}</CardText>\r\n                        <CardText>Port: {this.props.taskHistory.workData.stationPort + 1}</CardText>\r\n\r\n                        <hr/>\r\n                        <CardText>Tool: {ToolToString(this.props.taskHistory.workConfig.tool)}</CardText>\r\n                        {this.props.taskHistory.workConfig.changeSelectedTemp ?\r\n                            <CardText>\r\n                                Selected temperature: {Math.floor(this.props.taskHistory.workConfig.selectedTemp / 9)} ºC\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                        {this.props.taskHistory.workConfig.changeSolderingReference ?\r\n                            <CardText>\r\n                                Soldering reference: {this.props.taskHistory.workConfig.solderingReference.name}\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getDefectsChart = (correct: number, incorrect: number) => {\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            return <ResponsivePieChart data={data} />\r\n        }\r\n\r\n        const getQualityCard = () => {\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n\r\n            let correct = workSolderings.filter(x => x.solderingType === 0).length;\r\n            let incorrect = workSolderings.length - correct;\r\n\r\n            let total = correct + incorrect;\r\n            let percent = total === 0 ? 0 : Round((correct / total) * 100 );\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getDefectsChart(correct, incorrect)}\r\n                        <CardText>Correct solderings: <strong>{correct}/{total} ({percent}%)</strong></CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredDataCard = () => {\r\n            let plotData = GetPlotSeriesData(this.props.taskHistory.workData.temperature, this.props.taskHistory.workData.power);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered data</CardTitle>\r\n                        <CardText className=\"p-3\">\r\n                            <Plot2Axis\r\n                                plotData={plotData}\r\n                                counterTenthSecond={plotData.length}\r\n                                interval={Math.floor(plotData.length / 5)}\r\n                            />\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getSolderingsCard = () => {\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n            let showReference = this.props.taskHistory.workConfig.changeSolderingReference;\r\n            let referencePower = this.props.taskHistory.workConfig.solderingReference.power;\r\n\r\n            let registeredSolderings = workSolderings.map(x => {\r\n                let circleLight = \"circle-light-\" + (x.solderingType === 0 ? \"0\" : \"1\")\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"card-v2\">\r\n                            <CardBody>\r\n                                {\r\n                                    this.props.task.workConfig.qualityControl ?\r\n                                        <CardText>\r\n                                            Detected defect: <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"}/>\r\n                                            <strong className=\"pl-1\">{ClassificationToString(x.solderingType)}</strong>\r\n                                        </CardText> : \"\"\r\n                                }\r\n                                {\r\n                                    showReference ? \r\n                                        <PlotReferenceTiny\r\n                                            soldering={x.power}\r\n                                            reference={referencePower}\r\n                                        /> :\r\n                                        <PlotPowerAxisTiny\r\n                                            plotData={x.power}\r\n                                        />\r\n                                }\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Detected solderings</CardTitle>\r\n                        <Row xs={1} sm={2} md={4}>\r\n                            {registeredSolderings}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getLayout = () => {\r\n            if (this.props.task.workConfig.qualityControl) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getDetailsCard()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getQualityCard()}\r\n                        </Col>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <React.Fragment>\r\n                        {getDetailsCard()}\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.props.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getLayout()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getSolderingsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredDataCard()}\r\n                </Row>\r\n                <Row>\r\n                    <Button color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/traceability/task/\" + this.props.task.id + \"/detail\"}>Return</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskHistoryDetailView;\r\n","export function GetClassifications()\r\n{\r\n    var values =\r\n    {\r\n        0: \"Correct\",\r\n        1: \"Low thermal contact\",\r\n        2: \"Slow soldering\",\r\n        3: \"Fast soldering\",\r\n        4: \"Oscillations\",\r\n        5: \"Excess tin\",\r\n        6: \"Little tin\"\r\n    }\r\n    return values;\r\n}\r\n\r\nexport function ClassificationToString(id)\r\n{\r\n    let value = GetClassifications()[id];\r\n\r\n    if (typeof(value) === \"undefined\") {\r\n        return \"Undefined\";\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport TaskHistoryDetailView from './TaskHistoryDetailView';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n  & TaskHistoryStore.TaskHistoryState\r\n  & RouteComponentProps<{ taskId: string, historyId: string }>\r\n\r\ninterface IState {\r\n    taskId: number,\r\n    taskHistoryId: number,\r\n    isLoading: boolean\r\n}\r\n\r\nclass TaskHistoryDetail extends React.PureComponent<TaskHistoryDetailProps, IState> {\r\n    constructor(props: TaskHistoryDetailProps) {\r\n        super(props);\r\n        const taskId = TryParseInt(this.props.match.params['taskId'], 0);\r\n        const taskHistoryId = TryParseInt(this.props.match.params['historyId'], 0);\r\n\r\n        this.state = {\r\n            taskId: taskId,\r\n            taskHistoryId: taskHistoryId,\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchTask(this.props, taskId);\r\n        this.searchTaskHistories(this.props, taskHistoryId);\r\n    }\r\n\r\n    searchTask(props: TaskHistoryDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x =>\r\n                props.taskActions.createTask(x)\r\n            );\r\n    }\r\n\r\n    searchTaskHistories(props: TaskHistoryDetailProps, id: string) {\r\n        TaskHistoriesService\r\n            .getTaskHistoryById(id)\r\n            .then(x => {\r\n                props.taskHistoryActions.createTaskHistory(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const task = this.props.tasks.find(x => x.id === this.state.taskId);\r\n        const taskHistory = this.props.taskHistories.find(x => x.id === this.state.taskHistoryId);\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"primary\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (task === undefined || taskHistory === undefined) {\r\n            return \"No item founded.\";\r\n        }\r\n\r\n        return (\r\n            <TaskHistoryDetailView\r\n                task={task}\r\n                taskHistory={taskHistory}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskHistoryDetail);\r\n","import TaskHistoryDetail from './TaskHistoryDetail';\r\n\r\nexport default TaskHistoryDetail;\r\n","import * as React from 'react';\r\nimport { Input } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\n\r\ntype WorkProcessProps = {\r\n    isLoading: boolean,\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleTaskClick: (task: TaskStore.Task) => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\ninterface IState {\r\n    taskFilter: string[]\r\n}\r\n\r\nclass WorkProcessStep1 extends React.PureComponent<WorkProcessProps, IState> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n        this.state = {\r\n            taskFilter: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.tasks.map(x => (\r\n                    <tr className=\"pointer\" onClick={() => this.props.handleTaskClick(x)}>\r\n                        <td>{x.id}</td>\r\n                        <td>{x.name}</td>\r\n                        <td>{ToolToString(x.workConfig.tool)}</td>\r\n                    </tr>\r\n                ))\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep1;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\n\r\ntype WorkProcessProps = {\r\n    isLoading: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    taskTool: number,\r\n    handleStationClick: (station: StationStore.Station, port: number) => void\r\n}\r\n\r\nclass WorkProcessStep2 extends React.PureComponent<WorkProcessProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let stationControllers = this.props.stationControllers\r\n                .filter(sc => (\r\n                    sc.stations.some(s => (\r\n                        s.ports.some(p => (\r\n                            p.tool === this.props.taskTool\r\n                        ))\r\n                    ))\r\n                ));\r\n\r\n            let count = stationControllers.reduce(((total, x) =>\r\n                total + x.stations.length\r\n            ), 0);\r\n\r\n            if (count === 0) {\r\n                return \"No stations connected.\";\r\n            }\r\n\r\n            let options =\r\n                stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                            .filter(p => (\r\n                                p.tool === this.props.taskTool\r\n                            ))\r\n                            .map(p => (\r\n                                <tr className=\"pointer\" onClick={() => this.props.handleStationClick(s, p.id)}>\r\n                                    <td>{s.name}</td>\r\n                                    <td>{p.id + 1}</td>\r\n                                    <td>{ToolToString(p.tool)}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardText>\r\n                                {getListOptionsStationControllers()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep2;\r\n","import PlotReference from './PlotReference';\r\n\r\nexport default PlotReference;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport { SecToString } from '../../../utils/timeUtils';\r\n\r\ntype PlotProps = {\r\n    soldering: number[],\r\n    reference: number[]\r\n}\r\n\r\nclass PlotReference extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        let plotDataObj = [];\r\n\r\n        for (var i: number = 0; i < Math.max(this.props.soldering.length, this.props.reference.length); i++) {\r\n            plotDataObj.push({\r\n                tick: i,\r\n                soldering: i < this.props.soldering.length ? this.props.soldering[i] : null,\r\n                reference: i < this.props.reference.length ? this.props.reference[i] : null\r\n            });\r\n        }\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -10,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={50}\r\n                        label={\"Time (s)\"}\r\n                        tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                        interval={Math.floor(plotDataObj.length / 5)} />\r\n                    <YAxis />\r\n\r\n                    <Line dataKey=\"soldering\" type=\"monotone\" dot={false} />\r\n                    <Line dataKey=\"reference\" type=\"monotone\" dot={false} stroke=\"#bd8531\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotReference;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../../utils/portUtils';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport Plot2Axis from '../../../content-parts/Plot2Axis';\r\nimport PlotReference from '../../../content-parts/PlotReference';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\n\r\ntype WorkProcessProps = {\r\n    selectedTask: TaskStore.Task,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    reference: AssistantStore.Reference,\r\n\r\n    queueId: number,\r\n\r\n    plotData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\nclass WorkProcessStep3 extends React.PureComponent<WorkProcessProps> {\r\n    public render() {\r\n        const getDetails = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>Task name: {this.props.selectedTask.name}</CardText>\r\n                        <CardText>Task code: {this.props.selectedTask.id}</CardText>\r\n                        <hr/>\r\n                        <CardText>Station: {this.props.selectedStation.name} [{this.props.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.props.selectedPort + 1}</CardText>\r\n                        <hr/>\r\n                        <CardText>Tool: {ToolToString(this.props.selectedTask.workConfig.tool)}</CardText>\r\n                        {this.props.selectedTask.workConfig.changeSelectedTemp ?\r\n                            <CardText>\r\n                                Selected temperature: {this.props.selectedTask.workConfig.selectedTemp / 9} ºC\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                        {this.props.selectedTask.workConfig.changeSolderingReference ?\r\n                            <CardText>\r\n                                Soldering reference: {this.props.reference.name.length === 0 ? \"[No name]\" : this.props.reference.name}\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        };\r\n\r\n        const getPlotRecordData = () => {\r\n            let portData = this.props.plotData[this.props.plotData.length - 1];\r\n            let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n                portData.toolStatus,\r\n                portData.isCalibrating,\r\n                portData.isSoldering,\r\n                portData.isPortEnabled);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row className=\"pb-2\">\r\n                            <Col xs=\"auto\">\r\n                                Temperature:{' '}\r\n                                <span className=\"temp-value\"> {Math.floor(portData.temperature)} ºC</span>\r\n                            </Col>\r\n                            <Col>\r\n                                Power:{' '}\r\n                                <span className=\"power-value\">{Math.floor(portData.power)} %</span>\r\n                            </Col>\r\n                            <Col className=\"text-right\">\r\n                                <FontAwesomeIcon icon={faCircle} className={circleLight}/>\r\n                                <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                    portData.toolStatus,\r\n                                    portData.isCalibrating,\r\n                                    portData.isSoldering,\r\n                                    portData.isPortEnabled\r\n                                )}</strong>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Plot2Axis\r\n                                plotData={this.props.plotData}\r\n                                counterTenthSecond={this.props.counterTenthSecond}\r\n                                interval={this.props.interval}\r\n                            />\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getPlotReference = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                    <PlotReference\r\n                        soldering={this.props.plotData.map(x => x.power)}\r\n                        reference={this.props.reference.power.map(x => x / 10)}\r\n                    />\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />\r\n        }\r\n\r\n        const layoutWithReference = () => {\r\n            return (\r\n                <React.Fragment>\r\n                    <Row className=\"mb-3\">\r\n                        {getPortStatus()}\r\n                    </Row>\r\n                    <Row className=\"mb-3\">\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getPlotReference()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getDetails()}\r\n                        </Col>\r\n                    </Row>\r\n                </React.Fragment>)\r\n        }\r\n\r\n        const layoutWithOutReference = () => {\r\n            return (\r\n                <React.Fragment>\r\n                    <Row className=\"mb-3\">\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getPlotRecordData()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getDetails()}\r\n                        </Col>\r\n                    </Row>\r\n                </React.Fragment>)\r\n        }\r\n\r\n        return (\r\n            this.props.selectedTask.workConfig.changeSolderingReference ?\r\n                layoutWithReference() :\r\n                layoutWithOutReference()\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep3;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport StationService from '../../../../services/station.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport WorkService from '../../../../services/work.service';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { EmptyPlotSeriesData, PushPlotSeriesData } from '../../../../utils/plotUtils';\r\nimport WorkProcessStep1 from './WorkProcessStep1';\r\nimport WorkProcessStep2 from './WorkProcessStep2';\r\nimport WorkProcessStep3 from './WorkProcessStep3';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype WorkProcessProps = {\r\n    stationActions: typeof StationStore.actionCreators,\r\n    taskActions: typeof TaskStore.actionCreators\r\n} & TaskStore.TaskState\r\n  & StationStore.StationState\r\n  & typeof StationStore.actionCreators\r\n  & typeof TaskStore.actionCreators\r\n  & RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    selectedTask: TaskStore.Task,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    reference: AssistantStore.Reference,\r\n\r\n    queueId: number,\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n    wasSoldering: boolean,\r\n    lastRealTimeData: IRealTimeData,\r\n\r\n    currentStep: number,\r\n    showFinishTaskModal: boolean,\r\n    timer: number,\r\n\r\n    nTotalTasks: number,\r\n    pageNumber: number,\r\n    pageSize: number,\r\n    filter: string,\r\n\r\n    isLoadingStations: boolean,\r\n    isLoadingTasks: boolean\r\n}\r\n\r\nconst MAX_POINTS_PLOT = 400;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 100;\r\n\r\nclass WorkProcess extends React.PureComponent<WorkProcessProps, IState> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n\r\n        let plotData = EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n        this.state = {\r\n            selectedTask: {\r\n                id: 0,\r\n                name: \"\",\r\n                workConfig: {\r\n                    tool: 0,\r\n                    selectedTemp: 0,\r\n                    changeSelectedTemp: false,\r\n                    solderingReferenceId: -1,\r\n                    changeSolderingReference: false,\r\n                    qualityControl: false\r\n                },\r\n                timesPerformed: 0\r\n            },\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            },\r\n\r\n            queueId: -1,\r\n            plotData: plotData,\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n            wasSoldering: false,\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n\r\n            currentStep: 1,\r\n            showFinishTaskModal: false,\r\n            timer: -1,\r\n\r\n            nTotalTasks: 0,\r\n            pageNumber: 1,\r\n            pageSize: 25,\r\n            filter: \"\",\r\n\r\n            isLoadingStations: true,\r\n            isLoadingTasks: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            let plotData = this.state.plotData;\r\n                            let counterTenthSecond = this.state.counterTenthSecond;\r\n                            let wasSoldering = this.state.wasSoldering;\r\n                            let lastRealTimeData = this.state.lastRealTimeData;\r\n\r\n                            values.forEach(x => {\r\n                                if (this.state.selectedTask.workConfig.changeSolderingReference) {\r\n                                    // raise flag\r\n                                    if (x.isSoldering && !wasSoldering) {\r\n                                        plotData = [];\r\n                                        wasSoldering = true;\r\n                                    }\r\n\r\n                                    // down flag\r\n                                    if (!x.isSoldering && wasSoldering) {\r\n                                        wasSoldering = false;\r\n                                    }\r\n\r\n                                    // soldering\r\n                                    if (x.isSoldering) {\r\n                                        PushPlotSeriesData(plotData, x, -1);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    PushPlotSeriesData(plotData, x, MAX_POINTS_PLOT);\r\n                                }\r\n\r\n                                lastRealTimeData = x;\r\n                                counterTenthSecond++;\r\n                            });\r\n\r\n                            this.setState({\r\n                                plotData: plotData,\r\n                                readyGetMoreData: true,\r\n                                counterTenthSecond: counterTenthSecond,\r\n                                wasSoldering: wasSoldering,\r\n                                lastRealTimeData: lastRealTimeData\r\n                            })\r\n                        }\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: WorkProcessProps) {\r\n        props.stationActions.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoadingStations: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.stationActions.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.stationActions.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoadingStations: false\r\n                })\r\n            });\r\n    }\r\n\r\n    searchTasks(props: WorkProcessProps, filter: string, pageNumber: number) {\r\n        props.taskActions.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoadingTasks: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                tasks.forEach((x: TaskStore.Task) =>\r\n                    props.taskActions.createTask(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoadingTasks: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const getPreviousButton = () => {\r\n            if (this.state.currentStep === 2) {\r\n                return (\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={() => previous()}\r\n                    >Previous</Button>\r\n                )\r\n            }\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            let text = \"\";\r\n            let isValid = false;\r\n\r\n            if (this.state.currentStep === 2) {\r\n                text = \"Start task\";\r\n                isValid = this.state.selectedStation.id !== \"\";\r\n            }\r\n            else if (this.state.currentStep === 3) {\r\n                text = \"Stop task\";\r\n                isValid = true;\r\n            }\r\n\r\n            if (!isValid) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={() => next()}\r\n                >{text}</Button>\r\n            )\r\n        }\r\n\r\n        const previous = () => {\r\n            this.setState({\r\n                currentStep: this.state.currentStep - 1\r\n            })\r\n        }\r\n\r\n        const next = () => {\r\n            if (this.state.currentStep === 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep === 2) {\r\n                let plotData = this.state.selectedTask.workConfig.changeSolderingReference ?\r\n                    [] : EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n                this.setState({\r\n                    plotData: plotData,\r\n                    counterTenthSecond: 0\r\n                })\r\n\r\n                WorkService\r\n                    .startTrace(this.state.selectedTask.id, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then(() =>\r\n                        this.setState({\r\n                            currentStep: 3\r\n                        })\r\n                );\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n\r\n                AssistantService\r\n                    .getReferenceById(this.state.selectedTask.workConfig.solderingReferenceId)\r\n                    .then(value => {\r\n                        this.setState({\r\n                            reference: value\r\n                        })\r\n                    });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    showFinishTaskModal: true\r\n                })\r\n            }\r\n        }\r\n\r\n        const handleTaskClick = (task: TaskStore.Task) => {\r\n            this.setState({\r\n                selectedTask: task,\r\n                currentStep: 2\r\n            })\r\n        }\r\n\r\n        const handleStationClick = (station: StationStore.Station, port: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port\r\n            })\r\n        }\r\n\r\n        const handleFinishTaskConfirmClick = () => {\r\n            WorkService\r\n                .stopTrace(this.state.selectedStation.id, this.state.selectedPort);\r\n\r\n            var queueId = this.state.queueId;\r\n\r\n            this.setState({\r\n                queueId: -1,\r\n                currentStep: 2,\r\n                showFinishTaskModal: false\r\n            });\r\n\r\n            WorkService\r\n                .stopRealTimeData(this.state.selectedStation.id, queueId);\r\n        };\r\n\r\n        const handleFinishTaskCancelClick = () => {\r\n            this.setState({\r\n                showFinishTaskModal: false\r\n            });\r\n        };\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks, WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Work process</h1>\r\n                </Row>\r\n\r\n                {this.state.currentStep === 1 ?\r\n                    <WorkProcessStep1\r\n                        isLoading={this.state.isLoadingTasks}\r\n                        tasks={this.props.tasks}\r\n                        nTotalTasks={this.state.nTotalTasks}\r\n                        pageSize={this.state.pageSize}\r\n                        pageNumber={this.state.pageNumber}\r\n\r\n                        handlePageClick={handlePageClick}\r\n                        handlePreviousPageClick={handlePreviousPageClick}\r\n                        handleNextPageClick={handleNextPageClick}\r\n                        handleTaskClick={handleTaskClick}\r\n                        handleSearchFieldChange={handleSearchFieldChange}\r\n                    /> : \"\"\r\n                }\r\n\r\n                {this.state.currentStep === 2 ?\r\n                    <WorkProcessStep2\r\n                        isLoading={this.state.isLoadingStations}\r\n                        stationControllers={this.props.stationControllers}\r\n                        taskTool={this.state.selectedTask.workConfig.tool}\r\n                        handleStationClick={handleStationClick}\r\n                    /> : \"\"\r\n                }\r\n\r\n                {this.state.currentStep === 3 ?\r\n                    <WorkProcessStep3\r\n                        selectedTask={this.state.selectedTask}\r\n                        selectedStation={this.state.selectedStation}\r\n                        selectedPort={this.state.selectedPort}\r\n                        reference={this.state.reference}\r\n\r\n                        queueId={this.state.queueId}\r\n                        plotData={this.state.plotData}\r\n                        lastRealTimeData={this.state.lastRealTimeData}\r\n                        counterTenthSecond={this.state.counterTenthSecond}\r\n                        interval={MAX_POINTS_PLOT / 5}\r\n                    /> : \"\"\r\n                }\r\n\r\n                <Row>\r\n                    {getPreviousButton()}\r\n                    {getNextButton()}\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showFinishTaskModal} toggle={() => handleFinishTaskCancelClick()}>\r\n                    <ModalHeader toggle={() => handleFinishTaskCancelClick()}>Finish task</ModalHeader>\r\n                    <ModalBody>Are you sure to finish the task?</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"primary\" onClick={() => handleFinishTaskConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"primary\" onClick={() => handleFinishTaskCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers,\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        stationActions: bindActionCreators(StationStore.actionCreators, dispatch),\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WorkProcess);\r\n","import WorkProcess from './WorkProcess';\r\n\r\nexport default WorkProcess;\r\n","import * as React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\n\r\ntype WorkbenchsProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    isLoading: boolean,\r\n    handleSetTraceabilityModeClick: (scUrl: string, newState: boolean) => void\r\n}\r\n\r\nclass WorkbenchsView extends React.PureComponent<WorkbenchsProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => {\r\n                        let items = [];\r\n                        items.push(\r\n                            <tr className=\"level-1\">\r\n                                <td className=\"text-left\"><strong>{sc.name}</strong></td>\r\n                                <td></td>\r\n                                <td>\r\n                                    <Button\r\n                                        outline\r\n                                        color={(sc.isQSTMode ? \"primary\" : \"secondary\")}\r\n                                        size=\"sm\"\r\n                                        className=\"pt-0 pb-0\"\r\n                                        onClick={() => this.props.handleSetTraceabilityModeClick(sc.url, !sc.isQSTMode)}\r\n                                    >\r\n                                        {sc.isQSTMode ? \"Enabled\" : \"Disabled\"}\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                        items.push(\r\n                            sc.stations.map(s => (\r\n                                <tr className=\"level-2\">\r\n                                    <td className=\"pl-3 text-left\">{s.name}</td>\r\n                                    <td>{s.model}</td>\r\n                                    <td>\r\n                                        <span className={(sc.isQSTMode && s.isQSTMode) ? \"highlight-color\" : \"\"}>{\r\n                                            sc.isQSTMode ?\r\n                                                (s.isQSTMode ? \"QST enabled\" : \"QST disabled\" ) :\r\n                                                \"--\"\r\n                                        }</span>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        )\r\n                        return items;\r\n                    })\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm station-list\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Workbench / Station</th>\r\n                            <th scope=\"col\">Station model</th>\r\n                            <th scope=\"col\">Traceability state</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        const getListOptionsStationControllersCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Workbenchs</h1>\r\n                </Row>\r\n                <Row>\r\n                    {getListOptionsStationControllersCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkbenchsView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport StationService from '../../../../services/station.service';\r\nimport WorkbenchsView from './WorkbenchsView';\r\n\r\ntype WorkbenchsProps =\r\n    StationStore.StationState &\r\n    typeof StationStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean\r\n}\r\n\r\nclass Workbenchs extends React.PureComponent<WorkbenchsProps, IState> {\r\n    constructor(props: WorkbenchsProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n    }\r\n\r\n    searchStations(props: WorkbenchsProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleSetTraceabilityModeClick = (scUrl: string, newState: boolean) => {\r\n            StationService.setTraceabilityMode(scUrl, newState);\r\n        }\r\n\r\n        return (\r\n            <WorkbenchsView\r\n                stationControllers={this.props.stationControllers}\r\n                isLoading={this.state.isLoading}\r\n                handleSetTraceabilityModeClick={handleSetTraceabilityModeClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(Workbenchs);\r\n","import Home from './components/content-pages/Home';\r\nimport Processes from './components/content-pages/processes/Processes';\r\nimport ProcessOptimization from './components/content-pages/processes/ProcessOptimization';\r\nimport SolderingAssistant from './components/content-pages/processes/SolderingAssistant';\r\nimport SolderingAssistantNew from './components/content-pages/processes/SolderingAssistantNew';\r\nimport Traceability from './components/content-pages/traceability/Traceability';\r\nimport Tasks from './components/content-pages/traceability/Tasks';\r\nimport TaskNew from './components/content-pages/traceability/TaskNew';\r\nimport TaskEdit from './components/content-pages/traceability/TaskEdit';\r\nimport TaskDetail from './components/content-pages/traceability/TaskDetail';\r\nimport TaskHistoryDetail from './components/content-pages/traceability/TaskHistoryDetail';\r\nimport WorkProcess from './components/content-pages/traceability/WorkProcess';\r\nimport Workbenchs from './components/content-pages/traceability/Workbenchs';\r\n\r\nexport default [\r\n  { path: \"/\", name: \"Home\", Component: Home },\r\n  { path: \"/processes\", name: \"Processes\", Component: Processes },\r\n  { path: \"/processes/optimization\", name: \"Process optimization\", Component: ProcessOptimization },\r\n  { path: \"/processes/assistant\", name: \"Soldering assistant\", Component: SolderingAssistant },\r\n  { path: \"/processes/assistant/new\", name: \"New\", Component: SolderingAssistantNew },\r\n  { path: \"/traceability\", name: \"Traceability\", Component: Traceability },\r\n  { path: \"/traceability/task\", name: \"Tasks\", Component: Tasks },\r\n  { path: \"/traceability/task/new\", name: \"New\", Component: TaskNew },\r\n  { path: \"/traceability/task/:id/detail\", name: \"Details\", Component: TaskDetail },\r\n  { path: \"/traceability/task/:id/edit\", name: \"Edit\", Component: TaskEdit },\r\n  { path: \"/traceability/task/:taskId/history/:historyId\", name: \"History\", Component: TaskHistoryDetail },\r\n  { path: \"/traceability/workprocess\", name: \"Work process\", Component: WorkProcess },\r\n  { path: \"/traceability/workbenchs\", name: \"Workbenchs\", Component: Workbenchs }\r\n];\r\n","import * as React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { Container } from 'reactstrap';\r\nimport Breadcrumbs from './components/content-components/Breadcrumbs';\r\nimport Layout from './components/Layout';\r\nimport routes from \"./routes\";\r\n\r\nimport './scss/main.scss'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Switch>\r\n            {routes.map(({ path, name, Component }, key) => (\r\n                <Route\r\n                    exact\r\n                    path={path}\r\n                    key={key}\r\n                    render={props => {\r\n                        const crumbs = routes\r\n                            .filter(({ path }) => props.match.path.includes(path))\r\n                            .map(({ path, ...rest }) => ({\r\n                                path: Object.keys(props.match.params).length\r\n                                    ? Object.keys(props.match.params).reduce(\r\n                                        (path, param) =>\r\n                                            path.replace(`:${param}`, props.match.params[param]),\r\n                                            path\r\n                                    )\r\n                                    : path,\r\n                                ...rest\r\n                            }));\r\n\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Breadcrumbs crumbs={crumbs} />\r\n                                <Container id=\"content-wrap\" className=\"mt-3\">\r\n                                    <Route exact path={path} key={key} component={Component} />\r\n                                </Container>\r\n                            </React.Fragment>\r\n                        );\r\n                    }}\r\n                />\r\n            ))}\r\n        </Switch>\r\n    </Layout>\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}