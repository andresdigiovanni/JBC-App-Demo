{"version":3,"sources":["store/Task.ts","store/TaskHistory.ts","store/Station.ts","store/StationUpdate.ts","store/index.ts","store/Assistant.ts","components/content-components/Breadcrumbs/index.js","components/content-components/Breadcrumbs/Breadcrumbs.tsx","components/content-components/Footer/index.js","components/content-components/Footer/Footer.tsx","components/content-components/NavMenu/index.js","components/content-components/NavMenu/NavMenu.tsx","components/Layout.tsx","components/content-parts/CardLinkApp/index.js","components/content-parts/CardLinkApp/CardLinkAppView.tsx","components/content-parts/CardLinkApp/ProcessOptimizationCard/index.js","components/content-parts/CardLinkApp/ProcessOptimizationCard/ProcessOptimizationCardView.tsx","components/content-parts/CardLinkApp/SolderingReferenceCard/SolderingReferenceCardView.tsx","components/content-parts/CardLinkApp/SolderingReferenceCard/index.js","components/content-parts/CardLinkApp/TasksCard/index.js","components/content-parts/CardLinkApp/TasksCard/TasksCardView.tsx","components/content-parts/CardLinkApp/WorkProcessCard/index.js","components/content-parts/CardLinkApp/WorkProcessCard/WorkProcessCardView.tsx","components/content-parts/CardLinkApp/StationsUpdateCard/index.js","components/content-parts/CardLinkApp/StationsUpdateCard/StationsUpdateCardView.tsx","components/content-parts/CardLinkSection/index.js","components/content-parts/CardLinkSection/CardLinkSectionView.tsx","components/content-parts/CardLinkSection/QSTCard/index.js","components/content-parts/CardLinkSection/QSTCard/QSTCardView.tsx","components/content-parts/CardLinkSection/ProcessesCard/index.js","components/content-parts/CardLinkSection/ProcessesCard/ProcessesCardView.tsx","components/content-parts/CardLinkSection/MaintenanceCard/index.js","components/content-parts/CardLinkSection/MaintenanceCard/MaintenanceCardView.tsx","components/content-pages/Home/index.js","components/content-pages/Home/Home.tsx","components/content-pages/maintenance/Maintenance/index.js","components/content-pages/maintenance/Maintenance/Maintenance.tsx","configuration.js","utils/timeUtils.js","services/fake.service.ts","services/restService.js","services/station.service.js","services/stationsUpdate.service.js","components/content-pages/maintenance/StationsUpdate/StationsUpdateView.tsx","components/content-pages/maintenance/StationsUpdate/StationsUpdate.tsx","components/content-pages/maintenance/StationsUpdate/index.js","components/content-pages/processes/Processes/index.js","components/content-pages/processes/Processes/Processes.tsx","services/assistant.service.js","services/processOptimization.service.js","services/work.service.js","utils/numberUtils.js","components/content-parts/MultiStepNav/index.js","components/content-parts/MultiStepNav/MultiStepNav.tsx","utils/toolUtils.js","components/content-parts/StationsPortList/index.js","components/content-parts/StationsPortList/StationsPortList.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_Station.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_Temp.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_ProcessParameters.tsx","utils/cartridgeData/T470.js","utils/cartridgeData/T245.js","utils/cartridgeData/T210.js","utils/cartridgeData/PA120.js","utils/cartridgeData/NT105.js","utils/cartridgeData/NP105.js","utils/cartridgeData/HT420.js","utils/cartridgeData/DS360.js","utils/cartridgeData/DR560.js","utils/cartridgeData/AP250.js","utils/cartridgeUtils.tsx","components/content-parts/Plot2AxisTiny/index.js","components/content-parts/Plot2AxisTiny/Plot2AxisTiny.tsx","utils/portUtils.js","components/content-parts/PortStatusCard/index.js","components/content-parts/PortStatusCard/PortStatusCard.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_CartridgeTest.tsx","utils/mathUtils.js","utils/plotUtils.js","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_CartridgeResult.tsx","utils/arrayUtils.js","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_TempTest.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationStep_Performance.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimizationView.tsx","components/content-pages/processes/ProcessOptimization/ProcessOptimization.tsx","components/content-pages/processes/ProcessOptimization/index.js","components/content-components/PaginationNav/index.js","components/content-components/PaginationNav/PaginationNav.tsx","components/content-parts/PlotPowerAxisTiny/PlotPowerAxisTiny.tsx","components/content-parts/PlotPowerAxisTiny/index.js","components/content-pages/processes/SolderingsReference/SolderingsReferenceView.tsx","components/content-pages/processes/SolderingsReference/SolderingsReference.tsx","components/content-pages/processes/SolderingsReference/index.js","components/content-pages/processes/SolderingReferenceNew/SolderingReferenceNewStep1.tsx","components/content-parts/Plot2Axis/Plot2Axis.tsx","components/content-parts/Plot2Axis/index.js","components/content-pages/processes/SolderingReferenceNew/SolderingReferenceNewStep2.tsx","components/content-pages/processes/SolderingReferenceNew/SolderingReferenceNewView.tsx","components/content-pages/processes/SolderingReferenceNew/SolderingReferenceNew.tsx","components/content-pages/processes/SolderingReferenceNew/index.js","components/content-parts/CardLinkApp/StationManagerCard/index.js","components/content-parts/CardLinkApp/StationManagerCard/StationManagerCardView.tsx","components/content-pages/traceability/Traceability/index.js","components/content-pages/traceability/Traceability/Traceability.tsx","services/tasks.service.js","components/content-pages/traceability/Tasks/TasksView.tsx","components/content-pages/traceability/Tasks/Tasks.tsx","components/content-pages/traceability/Tasks/index.js","components/content-pages/traceability/TaskNew/TaskNewView.tsx","components/content-pages/traceability/TaskNew/TaskNew.tsx","components/content-pages/traceability/TaskNew/index.js","components/content-pages/traceability/TaskEdit/TaskEditView.tsx","components/content-pages/traceability/TaskEdit/TaskEdit.tsx","components/content-pages/traceability/TaskEdit/index.js","services/taskHistories.service.js","components/content-parts/ResponsivePieChart/index.js","components/content-parts/ResponsivePieChart/ResponsivePieChart.tsx","components/content-pages/traceability/TaskDetail/TaskDetailView.tsx","components/content-pages/traceability/TaskDetail/TaskDetail.tsx","components/content-pages/traceability/TaskDetail/index.js","components/content-parts/PlotReferenceTiny/index.js","components/content-parts/PlotReferenceTiny/PlotReferenceTiny.tsx","components/content-pages/traceability/TaskHistoryDetail/TaskHistoryDetailView.tsx","utils/solderingClassificationUtils.js","components/content-pages/traceability/TaskHistoryDetail/TaskHistoryDetail.tsx","components/content-pages/traceability/TaskHistoryDetail/index.js","components/content-pages/traceability/WorkProcess/WorkProcessStep1.tsx","components/content-pages/traceability/WorkProcess/WorkProcessStep2.tsx","components/content-parts/PlotReference/index.js","components/content-parts/PlotReference/PlotReference.tsx","components/content-pages/traceability/WorkProcess/WorkProcessStep3.tsx","components/content-pages/traceability/WorkProcess/WorkProcess.tsx","components/content-pages/traceability/WorkProcess/index.js","components/content-pages/traceability/StationsManager/StationsManagerView.tsx","components/content-pages/traceability/StationsManager/StationsManager.tsx","routes.js","App.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts"],"names":["actionCreators","createTask","task","type","result","deleteTask","id","deleteAllTasks","setTotalTasks","number","createTaskHistory","taskHistory","deleteTaskHistory","deleteAllTaskHistories","createStationController","sc","deleteStationController","deleteAllStationControllers","createStation","station","scId","deleteStation","createStationUpdate","x","deleteStationUpdate","software","deleteAllStationUpdates","reducers","assistant","state","incomingAction","undefined","references","nTotalReferences","action","find","concat","filter","tasks","nTotalTasks","taskHistories","stationControllers","stations","map","push","stationUpdate","stationsUpdate","Breadcrumbs","this","props","crumbs","length","className","Container","Breadcrumb","key","name","path","BreadcrumbItem","active","NavLink","tag","Link","to","React","PureComponent","Footer","year","Date","getFullYear","pkg","version","NavMenu","isOpen","toggle","setState","Navbar","light","NavbarBrand","src","alt","NavbarToggler","onClick","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","children","CardLinkAppView","imgPath","cardText","cardTitle","Card","CardBody","CardImg","CardText","CardTitle","ProcessOptimizationCardView","CardLinkApp","SolderingReferenceCardView","TasksCardView","WordProcessCardView","StationUpdateCard","CardLinkSectionView","Row","Col","xs","QSTCardView","CardLinkSection","ProcessesCardView","MaintenanceCardView","Home","sm","md","ProcessesCard","QSTCard","MaintenanceCard","ProcessOptimizationCard","SolderingReferenceCard","TasksCard","WorkProcessCard","StationsUpdateCard","Maintenance","Configuration","FakeMode","process","SecToString","sec_num","hours","Math","floor","minutes","seconds","sleep","ms","Promise","resolve","setTimeout","FakeService","console","log","energy","random","similarity","tenthsOfSecondSoldering","_getReferences","nReferences","referenceName","i","components","reference","power","cartridge","temperature","durationTenthsSeconds","_getTasks","nTasks","taskId","taskName","tool","selectedTemp","changeSelectedTemp","round","changeSolderingReference","qualityControl","workConfig","solderingReferenceId","timesPerformed","_getTaskHistories","historyId","change_selected_temp","change_soldering_ref","now","solderingReference","stationId","stationName","stationsName","stationPort","Array","from","workSolderings","solderingType","finishDate","workData","d","getSeconds","isPortEnabled","toolStatus","isCalibrating","isSoldering","data","reduce","total","time","points","tipLife","rateSoldMin","recommended","performance","durability","scs","iSc","url","isQSTMode","iSt","toString","hardware","model","ports","nPorts","pow","p","port","updates","update","language","proxy","REACT_APP_PROXY","RestService","stationControllerId","doGetRequest","ENDPOINT_ASSISTANT","pageNumber","pageSize","doDeleteRequest","file","doFormDataPostRequest","doPostRequest","ENDPOINT_WORK","doPutRequest","ENDPOINT_WORK_HISTORY","ENDPOINT_TRACE","ENDPOINT_REAL_TIME","queueId","solderings","ENDPOINT_PROCESS_OPTIMIZATION","ENDPOINT_STATIONS","newState","stationsToUpdate","resource","axios","method","baseURL","success","error","config","headers","StationsService","getStations","setSelectedTemperature","setTraceabilityMode","StationsUpdateService","getStationsUpdateInfo","updateStations","StationsUpdateView","showUpdateButton","selectedLanguages","handleSelectedLanguage","event","selectedLanguage","JSON","parse","target","value","handleStationClick","handleUpdateClick","lang","isLoading","Spinner","color","options","s","softwareAvailable","updateAvailable","Input","onChange","stringify","scope","getListOptionsStationControllers","Button","size","disabled","StationsUpdate","isLoadingStations","isLoadingUpdates","searchStations","searchStationsUpdates","stationActions","StationService","then","isArray","forEach","stationUpdateActions","connect","dispatch","bindActionCreators","StationStore","StationUpdateStore","Processes","AssistantService","getSolderingResult","count","countReferences","getReferences","getReferenceById","deleteReference","uploadReference","downloadReference","generateReferenceSoldering","ProcessOptimizationService","betterSoldering","getBetterOptimizationByCartridge","getBetterOptimizationByTemperature","WorkService","startTrace","stopTrace","startRealTimeData","stopRealTimeData","getRealTimeData","TryParseInt","str","defaultValue","retValue","isNaN","parseInt","Round","num","decimals","f","Number","EPSILON","MultiStepNav","items","labels","index","current","ToolToString","1","2","3","4","5","6","7","8","9","31","32","33","34","StationsPortList","ProcessOptimizationStep_Station","filtered","ProcessOptimizationStep_Temp","selectedTemperature","e","handleSelecTempChange","ProcessOptimizationStep_ProcessParameters","selectedOffsetTime","handleOffsetTimeChange","LoadCartridges","cartridges","MapCatridges","T470data","T245data","T210data","PA120data","NT105data","NP105data","HT420data","DS360data","DR560data","AP250data","cartridgeRoot","_","family","F","def","Default","Cartridge_list","item","GetToolIdByFamily","fullName","N","isDefault","img","CartridgeImagePath","toLowerCase","CartridgeImagePathByFullName","Plot2AxisTiny","width","aspect","plotData","margin","left","dataKey","height","yAxisId","orientation","tick","domain","stroke","dot","GetPortStatus2String","GetPortStatus2Lights","PortStatusCard","portData","circleLight","icon","faCircle","ProcessOptimizationStep_CartridgeTest","cartridgeImagePath","cartridgeName","defaultCartridge","selectedTool","handleCartridgeChange","lastRealTimeData","selected","detectedSolderings","registeredPlots","solderingResult","handleDeleteRealTimeData","date","faTrashAlt","counterTenthSecond","interval","getRegisteredPlots","Average","values","sum","EmptyPlotSeriesData","maxPLotPoints","PushPlotSeriesData","realTimeData","maxPlotPoints","splice","ProcessOptimizationStep_CartridgeResult","cartridgesStatistics","indexOf","currentCartridge","times","energies","timeAvg","energyAvg","sort","a","b","slice","getBestCartridges","cardBody","fasterSoldering","max","apply","j","record","colors","fill","lines","label","tickFormatter","getPlot","getPlotCard","delay","defaultChecked","getTableCard","ProcessOptimizationStep_TempTest","selectedCartridge","getConfigurationCard","ProcessOptimizationStep_Performance","tempRecommended","tempDurability","tempPerformance","optimizedSoldering","padding","ticks","angle","position","dx","x1","x2","y1","y2","getOptimizedSolderingPlotCard","getDetailsCard","ProcessOptimizationView","currentStep","selectedStation","selectedPort","nextButton","handleNextClick","getButtons","ProcessOptimization","timerSelectedTemp","selectedStationControllerId","registeredData","readyGetMoreData","wasSoldering","detectedSolderingsToRemove","setInterval","applyDetectedSolderingsToRemove","nDataSoldering","min","soldering","some","r","setSelectedTemperatureRequest","window","clearTimeout","nValue","PaginationNav","totalPages","ceil","totalElements","PaginationItem","PaginationLink","first","handlePageClick","previous","handlePreviousPageClick","zero","next","handleNextPageClick","last","getItems","Pagination","PlotPowerAxisTiny","plotDataObj","defaultProps","showLabels","SolderingsReferenceView","showDeleteModal","referenceIdToDelete","handleDeleteClick","preventDefault","handleDeleteCancelClick","handleUploadClick","fileSelector","click","document","createElement","setAttribute","addEventListener","input","files","formData","FormData","append","outline","faFile","faUpload","faDownload","href","getListReferences","Modal","ModalHeader","ModalBody","ModalFooter","SolderingsReference","searchReferences","deleteAllReferences","createReference","toISOString","URL","createObjectURL","Blob","link","trim","body","appendChild","removeChild","setTotalReferences","SolderingReferenceNewStep1","handleNameChange","isFormCorrect","Plot2Axis","SolderingReferenceNewStep2","detectedSoldering","registeredPlot","saveButton","handleSaveReferenceClick","getLastSolderingCard","selectedName","SolderingReferenceNewView","SolderingReferenceNew","history","StationManagerCardView","Traceability","StationManagerCard","TasksService","countTasks","getTasks","getTaskById","updateTask","TasksView","InputGroup","InputGroupAddon","addonType","handleSearchFieldChange","faEye","faPen","getListOptionsTasks","Tasks","timer","searchTasks","bind","TaskStore","TaskNewView","handleToolChange","newTask","form","tools","Object","entries","getListTools","CustomInput","handleModifySelecTempChange","checked","pattern","prevState","handleRefSolderingChange","handleSolderingRefChange","TaskNew","redirect","TaskEditView","TaskEdit","match","params","isLoadingRefSoldering","searchTask","TaskHistoriessService","countTaskHistories","getTaskHistories","getTaskHistoryById","ResponsivePieChart","COLORS","entry","TaskDetailView","isLoadingTask","details","getQualityCard","correct","total2","incorrect","percent","getDefectsChart","nTotalTaskHistories","isLoadingHistories","toLocaleDateString","getListHistoryTasks","TaskDetail","searchTaskHistories","taskActions","taskHistoryActions","TaskHistoriesService","TaskHistoryStore","PlotReferenceTiny","TaskHistoryDetailView","showReference","referencePower","registeredSolderings","0","ClassificationToString","getSolderingsCard","GetPlotSeriesData","getRegisteredDataCard","TaskHistoryDetail","taskHistoryId","WorkProcessStep1","taskFilter","handleTaskClick","WorkProcessStep2","taskTool","PlotReference","WorkProcessStep3","getDetails","selectedTask","getPlotRecordData","WorkProcess","showFinishTaskModal","isLoadingTasks","handleFinishTaskCancelClick","MAX_POINTS_PLOT","getPreviousButton","text","isValid","getNextButton","handleFinishTaskConfirmClick","StationsManagerView","handleSetTraceabilityModeClick","StationsManager","Component","Layout","routes","exact","render","includes","rest","keys","param","replace","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","baseUrl","getElementsByTagName","getAttribute","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById","origin","fetch","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"m4FAmCaA,EAAiB,CAC1BC,WAAY,SAACC,GAAD,MAAiB,CAAEC,KAAM,cAAeC,OAAQF,IAC5DG,WAAY,SAACC,GAAD,MAAiB,CAAEH,KAAM,cAAeC,OAAQE,IAC5DC,eAAgB,iBAAO,CAAEJ,KAAM,qBAC/BK,cAAe,SAACC,GAAD,MAAqB,CAAEN,KAAM,kBAAmBC,OAAQK,KCc9DT,EAAiB,CAC1BU,kBAAmB,SAACC,GAAD,MAA+B,CAAER,KAAM,sBAAuBC,OAAQO,IACzFC,kBAAmB,SAACN,GAAD,MAAiB,CAAEH,KAAM,sBAAuBC,OAAQE,IAC3EO,uBAAwB,iBAAO,CAAEV,KAAM,+BCf9BH,EAAiB,CAC1Bc,wBAAyB,SAACC,GAAD,MAA4B,CAAEZ,KAAM,4BAA6BY,GAAIA,IAC9FC,wBAAyB,SAACV,GAAD,MAAiB,CAAEH,KAAM,4BAA6BG,GAAIA,IACnFW,4BAA6B,iBAAO,CAAEd,KAAM,mCAC5Ce,cAAe,SAACC,EAAkBC,GAAnB,MAAqC,CAAEjB,KAAM,iBAAkBgB,QAASA,EAASC,KAAMA,IACtGC,cAAe,SAACf,GAAD,MAAiB,CAAEH,KAAM,iBAAkBG,GAAIA,KCxBrDN,EAAiB,CAC1BsB,oBAAqB,SAACC,GAAD,MAAuB,CAAEpB,KAAM,wBAAyBoB,EAAGA,IAChFC,oBAAqB,SAACC,GAAD,MAAuB,CAAEtB,KAAM,wBAAyBsB,SAAUA,IACvFC,wBAAyB,iBAAO,CAAEvB,KAAM,gCCP/BwB,EAAW,CACpBC,UCiB4C,SAC5CC,EACAC,GAEA,QAAcC,IAAVF,EACA,MAAO,CACHG,WAAY,GACZC,iBAAkB,GAI1B,IAAMC,EAASJ,EACf,OAAQI,EAAO/B,MACX,IAAK,mBACD,OAAI0B,EAAMG,WAAWG,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO4B,EAAO9B,OAAOE,MAC3C,eACAuB,GAIJ,eACAA,EADP,CAEIG,WAAYH,EAAMG,WAAWI,OAAOF,EAAO9B,UAGnD,IAAK,mBACD,OAAO,eACAyB,EADP,CAEIG,WAAYH,EAAMG,WACbK,QAAO,SAAAd,GACJ,GAAIA,EAAEjB,KAAO4B,EAAO9B,OAChB,OAAOmB,OAK3B,IAAK,wBACD,OAAO,eACAM,EADP,CAEIG,WAAY,KAGpB,IAAK,uBACD,OAAO,eACAH,EADP,CAEII,iBAAkBC,EAAO9B,SAGjC,QACI,OAAOyB,IDjEf3B,KJuBuC,SACvC2B,EACAC,GAEA,QAAcC,IAAVF,EACA,MAAO,CACHS,MAAO,GACPC,YAAa,GAIrB,IAAML,EAASJ,EACf,OAAQI,EAAO/B,MACX,IAAK,cACD,OAAI0B,EAAMS,MAAMH,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO4B,EAAO9B,OAAOE,MACtC,eACAuB,GAIJ,eACAA,EADP,CAEIS,MAAOT,EAAMS,MAAMF,OAAOF,EAAO9B,UAGzC,IAAK,cACD,OAAO,eACAyB,EADP,CAEIS,MAAOT,EAAMS,MACRD,QAAO,SAAAd,GACJ,GAAIA,EAAEjB,KAAO4B,EAAO9B,OAChB,OAAOmB,OAK3B,IAAK,mBACD,OAAO,eACAM,EADP,CAEIS,MAAO,KAGf,IAAK,kBACD,OAAO,eACAT,EADP,CAEIU,YAAaL,EAAO9B,SAG5B,QACI,OAAOyB,IIvEflB,YHuC8C,SAC9CkB,EACAC,GAEA,QAAcC,IAAVF,EACA,MAAO,CAAEW,cAAe,IAG5B,IAAMN,EAASJ,EACf,OAAQI,EAAO/B,MACX,IAAK,sBACD,OAAI0B,EAAMW,cAAcL,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO4B,EAAO9B,OAAOE,MAC9C,eACAuB,GAIJ,eACAA,EADP,CAEIW,cAAeX,EAAMW,cAAcJ,OAAOF,EAAO9B,UAGzD,IAAK,sBACD,OAAO,eACAyB,EADP,CAEIW,cAAeX,EAAMW,cAChBH,QAAO,SAAAd,GACJ,GAAIA,EAAEjB,KAAO4B,EAAO9B,OAChB,OAAOmB,OAK3B,IAAK,4BACD,OAAO,eACAM,EADP,CAEIW,cAAe,KAGvB,QACI,OAAOX,IG9EfV,QF4B0C,SAC1CU,EACAC,GAEA,QAAcC,IAAVF,EACA,MAAO,CAAEY,mBAAoB,IAGjC,IAAMP,EAASJ,EACf,OAAQI,EAAO/B,MACX,IAAK,4BACD,OAAI0B,EAAMY,mBAAmBN,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO4B,EAAOnB,GAAGT,MAC/C,eACAuB,GAIJ,eACAA,EADP,CAEIY,mBAAoBZ,EAAMY,mBAAmBL,OAAOF,EAAOnB,MAGnE,IAAK,4BACD,OAAO,eACAc,EADP,CAEIY,mBAAoBZ,EAAMY,mBACrBJ,QAAO,SAAAd,GACJ,GAAIA,EAAEjB,KAAO4B,EAAO5B,GAChB,OAAOiB,OAK3B,IAAK,iCACD,OAAO,eACAM,EADP,CAEIY,mBAAoB,KAG5B,IAAK,iBACD,IAAI1B,EAAKc,EAAMY,mBAAmBN,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO4B,EAAOd,QAC5D,YAAWW,IAAPhB,GAMAA,EAAG2B,SAASP,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO4B,EAAOf,QAAQb,MALvC,eACAuB,GAUJ,eACAA,EADP,CAEIY,mBAAoBZ,EAAMY,mBAAmBE,KAAI,SAAApB,GAI7C,OAHIA,EAAEjB,KAAO4B,EAAOd,MAChBG,EAAEmB,SAASE,KAAKV,EAAOf,SAEpBI,OAInB,IAAK,iBACD,OAAO,eACAM,EADP,CAEIY,mBAAoBZ,EAAMY,mBAAmBJ,QAAO,SAAAtB,GAChD,OAAOA,EAAG2B,SAASL,QAAO,SAAAd,GACtB,GAAIA,EAAEjB,KAAO4B,EAAO5B,GAChB,OAAOiB,UAM3B,QACI,OAAOM,IEvGfgB,cDMgD,SAChDhB,EACAC,GAEA,QAAcC,IAAVF,EACA,MAAO,CAAEiB,eAAgB,IAG7B,IAAMZ,EAASJ,EACf,OAAQI,EAAO/B,MACX,IAAK,wBACD,OAAI0B,EAAMiB,eAAeX,MAAK,SAAAZ,GAAC,OAAIA,EAAEE,WAAaS,EAAOX,EAAEE,YAEhD,eACAI,GAIJ,eACAA,EADP,CAEIiB,eAAgBjB,EAAMiB,eAAeV,OAAOF,EAAOX,KAG3D,IAAK,wBACD,OAAO,eACAM,EADP,CAEIiB,eAAgBjB,EAAMiB,eACjBT,QAAO,SAAAd,GACJ,GAAIA,EAAEE,WAAaS,EAAOT,SACtB,OAAOF,OAK3B,IAAK,6BACD,OAAO,eACAM,EADP,CAEIiB,eAAgB,KAGxB,QACI,OAAOjB,K,+FGpEJkB,E,uKCcM,IAAD,OACZ,OAAIC,KAAKC,MAAMC,OAAOC,QAAU,EACrB,KAIP,yBAAK7C,GAAG,kBAAkB8C,UAAU,cAChC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEKN,KAAKC,MAAMC,OAAOP,KAAI,WAAiBY,GAAjB,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACnBF,EAAM,IAAM,EAAKN,MAAMC,OAAOC,OAC1B,kBAACO,EAAA,EAAD,CAAgBC,QAAM,GAAEH,GAEpB,kBAACE,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,eAAeW,GAAIN,GAAOD,c,GAhBtEQ,IAAMC,e,SCbjBC,E,uKCIP,IACIC,GADO,IAAIC,MACCC,cAEhB,OACI,0BAAQjB,UAAU,yBACd,gBAACC,EAAA,EAAD,CAAWD,UAAU,sBACjB,uBAAKA,UAAU,cACX,2CADJ,6BACsDe,GAEtD,uBAAKf,UAAU,eACX,uCADJ,cACsCkB,EAAIC,e,GAZzCP,iB,iFCFNQ,E,4MCKJ3C,MAAQ,CACX4C,QAAQ,G,EA2EJC,OAAS,WACb,EAAKC,SAAS,CACVF,QAAS,EAAK5C,MAAM4C,U,uDAzExB,OACI,8BACI,gBAACG,EAAA,EAAD,CAAQxB,UAAU,iEAAiEyB,OAAK,GACpF,gBAACxB,EAAA,EAAD,KACI,gBAACyB,EAAA,EAAD,CAAajB,IAAKC,IAAMC,GAAG,KACvB,uBAAKgB,IAAI,eAAeC,IAAI,MAAM5B,UAAU,SADhD,SAGA,gBAAC6B,EAAA,EAAD,CAAeC,QAASlC,KAAK0B,OAAQtB,UAAU,SAC/C,gBAAC+B,EAAA,EAAD,CAAU/B,UAAU,uCAAuCqB,OAAQzB,KAAKnB,MAAM4C,OAAQW,QAAM,GACxF,gBAACC,EAAA,EAAD,CAAKjC,UAAU,YAAYgC,QAAM,GAC7B,gBAACE,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAC9B,gBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,aAGA,gBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,gBAACC,EAAA,EAAD,KACI,gBAACjC,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,YAAYW,GAAG,2BAA7C,yBAIJ,gBAAC8B,EAAA,EAAD,KACI,gBAACjC,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,YAAYW,GAAG,iCAA7C,2BAOZ,gBAACuB,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAC9B,gBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,OAGA,gBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,gBAACC,EAAA,EAAD,KACI,gBAACjC,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,YAAYW,GAAG,aAA7C,UAIJ,gBAAC8B,EAAA,EAAD,KACI,gBAACjC,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,YAAYW,GAAG,oBAA7C,iBAIJ,gBAAC8B,EAAA,EAAD,KACI,gBAACjC,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,YAAYW,GAAG,wBAA7C,uBAOZ,gBAACuB,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAC9B,gBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,eAGA,gBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,gBAACC,EAAA,EAAD,KACI,gBAACjC,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,YAAYW,GAAG,+BAA7C,+B,GA/DPC,iBCFtB,WAACf,GAAD,OACX,gBAAC,WAAD,KACI,gBAAC,EAAD,MACCA,EAAM6C,SACP,gBAAC,EAAD,Q,+DCNOC,G,OCYS,SAAC,GAA0D,IAAxDhC,EAAuD,EAAvDA,GAAIiC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,UAAWlB,EAAqB,EAArBA,IACzD,OACI,kBAACpB,EAAA,EAAD,CAASR,UAAU,gBAAgBS,IAAKC,IAAMC,GAAIA,GAC9C,kBAACoC,EAAA,EAAD,CAAM/C,UAAU,iBACZ,kBAACgD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAStB,IAAKiB,EAAShB,IAAKA,IAC5B,kBAACsB,EAAA,EAAD,CAAUlD,UAAU,QAAQ6C,GAC5B,kBAACM,EAAA,EAAD,KAAYL,QCnBjBM,ECCqB,WAChC,OACI,kBAACC,EAAD,CACI1C,GAAG,0BACHiC,QAAQ,sCACRC,SAAS,2GACTC,UAAU,uBACVlB,IAAI,0BCMD0B,EAZoB,WAC/B,OACI,kBAACD,EAAD,CACI1C,GAAG,gCACHiC,QAAQ,qCACRC,SAAS,4FACTC,UAAU,uBACVlB,IAAI,0BCTD0B,ICAAC,GCCO,WAClB,OACI,kBAACF,EAAD,CACI1C,GAAG,YACHiC,QAAQ,oCACRC,SAAS,2DACTC,UAAU,QACVlB,IAAI,eCRD4B,GCCa,WACxB,OACI,kBAACH,EAAD,CACI1C,GAAG,mBACHiC,QAAQ,8BACRC,SAAS,wCACTC,UAAU,eACVlB,IAAI,kBCRD6B,GCCgB,WAC3B,OACI,kBAACJ,EAAD,CACI1C,GAAG,8BACHiC,QAAQ,iCACRC,SAAS,qEACTC,UAAU,kBACVlB,IAAI,qBCRD8B,I,OCYa,SAAC,GAAgD,IAA9C/C,EAA6C,EAA7CA,GAAIiC,EAAyC,EAAzCA,QAASE,EAAgC,EAAhCA,UAAWlB,EAAqB,EAArBA,IACnD,OACI,kBAACpB,EAAA,EAAD,CAASR,UAAU,oBAAoBS,IAAKC,IAAMC,GAAIA,GAClD,kBAACoC,EAAA,EAAD,CAAM/C,UAAU,iBACZ,kBAACgD,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACZ,EAAA,EAAD,CAAStB,IAAKiB,EAAShB,IAAKA,KAEhC,kBAACgC,EAAA,EAAD,CAAKC,GAAG,MACJ,kBAACV,EAAA,EAAD,KAAYL,UCtBzBgB,GCCK,WAChB,OACI,kBAACC,GAAD,CACIpD,GAAG,OACHiC,QAAQ,+BACRE,UAAU,MACVlB,IAAI,SCPDoC,GCCW,WACtB,OACI,kBAACD,GAAD,CACIpD,GAAG,aACHiC,QAAQ,4BACRE,UAAU,YACVlB,IAAI,eCPDqC,GCCa,WACxB,OACI,kBAACF,GAAD,CACIpD,GAAG,eACHiC,QAAQ,8BACRE,UAAU,cACVlB,IAAI,iBCPDsC,GCUF,WACT,OACI,gBAAC,WAAD,KACI,uBAAKlE,UAAU,6BACX,gBAACC,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,sBAAIA,UAAU,gCAAd,aAEJ,gBAAC2D,EAAA,EAAD,CAAKE,GAAI,EAAGM,GAAI,EAAGC,GAAI,EAAGpE,UAAU,QAChC,gBAAC4D,EAAA,EAAD,KACI,gBAACS,GAAD,OAEJ,gBAACT,EAAA,EAAD,KACI,gBAACU,GAAD,OAEJ,gBAACV,EAAA,EAAD,KACI,gBAACW,GAAD,UAKhB,2BACI,gBAACtE,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,sBAAIA,UAAU,qBAAd,0BAEJ,gBAAC2D,EAAA,EAAD,CAAK3D,UAAU,iBAAiB6D,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAC9C,gBAACR,EAAA,EAAD,KACI,gBAACY,EAAD,OAEJ,gBAACZ,EAAA,EAAD,KACI,gBAACa,EAAD,OAEJ,gBAACb,EAAA,EAAD,KACI,gBAACc,GAAD,OAEJ,gBAACd,EAAA,EAAD,KACI,gBAACe,GAAD,OAEJ,gBAACf,EAAA,EAAD,KACI,gBAACgB,GAAD,YClDbC,GCGK,WACZ,OACI,gBAAC5E,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,iBAAiB6D,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAC9C,gBAACR,EAAA,EAAD,KACI,gBAACgB,GAAD,U,2BCNTE,GAJO,CAClBC,UAAWC,GCyCR,SAASC,GAAYC,GACxB,GAAIA,EAAU,EACV,MAAO,GAGX,IAAIC,EAAQC,KAAKC,MAAMH,EAAU,MAC7BI,EAAUF,KAAKC,OAAOH,EAAmB,KAARC,GAAiB,IAClDI,EAAUL,EAAmB,KAARC,EAA2B,GAAVG,EAEtCtI,EAAS,GAcb,OAZc,IAAVmI,IACAnI,GAAUmI,EACVnI,GAAU,KAGVsI,EAAU,KAAMA,EAAU,IAAMA,GACpCtI,GAAUsI,EACVtI,GAAU,IAENuI,EAAU,KAAMA,EAAU,IAAMA,GACpCvI,GAAUuI,EAKP,SAASC,GAAMC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,IC/DhDI,G,sOAaEC,QAAQC,IAAI,oC,kBACL,CACHC,OAAQZ,KAAKC,MAAsB,GAAhBD,KAAKa,UAAiB,GACzCC,WAAYd,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,IAC9CE,wBAAyBf,KAAKC,MAAsB,GAAhBD,KAAKa,UAAiB,K,6PAK9DH,QAAQC,IAAI,iC,kBACL,I,2PAIPD,QAAQC,IAAI,+B,SACNP,GAAM,K,gCACL5F,KAAKwG,eAAe,K,mQAI3BN,QAAQC,IAAI,kC,SACNP,GAAM,K,uBACE5F,KAAKwG,eAAe,G,uCAAI,I,sLAGdC,G,gFAGxB,IAFIzH,EAAa,GAER1B,EAAK,EAAGA,GAAMmJ,EAAanJ,IAAM,CAEtC,IADIoJ,EAAgB,GACXC,EAAI,EAAGA,EAAInB,KAAKC,MAAsB,EAAhBD,KAAKa,UAAeM,IAC/CD,GAAiB1G,KAAK4G,WAAWpB,KAAKC,MAAMD,KAAKa,SAAWrG,KAAK4G,WAAWzG,SAAW,IAGvF0G,EAAY,CACZvJ,GAAIA,EACJkD,KAAMkG,EACNI,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAChE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChEC,UAAW,UACXC,YAAa,KACbC,sBAAuB,IAG3BjI,EAAWY,KAAKiH,G,yBAGb7H,G,mQAIPkH,QAAQC,IAAI,iC,SACNP,GAAM,K,6PAIZM,QAAQC,IAAI,iC,SACNP,GAAM,K,+PAIZM,QAAQC,IAAI,mC,kBACL,sF,wQAIPD,QAAQC,IAAI,4C,SACNP,GAAM,K,wPAMZM,QAAQC,IAAI,4B,kBACL,I,sPAIPD,QAAQC,IAAI,0B,SACNP,GAAM,K,gCACL5F,KAAKkH,UAAU,K,8PAItBhB,QAAQC,IAAI,6B,SACNP,GAAM,K,uBACE5F,KAAKkH,UAAU,G,uCAAI,I,iLAGdC,G,0FAGnB,IAFI7H,EAAQ,GAEH8H,EAAS,EAAGA,GAAUD,EAAQC,IAAU,CAG7C,IADIC,EAAW,GACNV,EAAI,EAAGA,EAAI,EAAGA,IACnBU,GAAYrH,KAAK4G,WAAWpB,KAAKC,MAAMD,KAAKa,SAAWrG,KAAK4G,WAAWzG,SAAW,IAGlFmH,EAAO9B,KAAKC,MAAsB,EAAhBD,KAAKa,UAAgB,EACvCkB,EAAyD,GAAzC/B,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,KAClDmB,EAAuD,IAAlChC,KAAKiC,MAAsB,EAAhBjC,KAAKa,UACrCqB,EAA6D,IAAlClC,KAAKiC,MAAsB,EAAhBjC,KAAKa,UAC3CsB,EAAmD,IAAlCnC,KAAKiC,MAAsB,EAAhBjC,KAAKa,UAEjCnJ,EAAO,CACPI,GAAI8J,EACJ5G,KAAM6G,EACNO,WAAY,CACRN,KAAMA,EACNC,aAAcA,EACdC,mBAAoBA,EACpBK,qBAAsB,EACtBH,yBAA0BA,EAC1BC,eAAgBA,GAEpBG,eAAgBtC,KAAKC,MAAsB,EAAhBD,KAAKa,WAGpC/G,EAAMM,KAAK1C,G,yBAGRoC,G,mLAGapC,G,yEACpBgJ,QAAQC,IAAI,4B,SACNP,GAAM,K,8KAGQ1I,G,yEACpBgJ,QAAQC,IAAI,4B,SACNP,GAAM,K,8KAGQtI,G,yEACpB4I,QAAQC,IAAI,4B,SACNP,GAAM,K,sLAKgBwB,G,yEAC5BlB,QAAQC,IAAI,oC,kBACL,I,oLAGmBiB,G,yEAC1BlB,QAAQC,IAAI,kC,SACNP,GAAM,K,gCACL5F,KAAK+H,kBAAkB,K,sQAI9B7B,QAAQC,IAAI,oC,SACNP,GAAM,K,uBACE5F,KAAK+H,kBAAkB,G,uCAAI,I,yLAGdZ,G,sFACvB3H,EAAgB,GAEXwI,EAAY,E,YAAGA,GAAab,G,wBAC7BhH,EAASqF,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,GAE3CiB,EAAO9B,KAAKC,MAAsB,EAAhBD,KAAKa,UAAgB,EACvCkB,EAAyD,GAAzC/B,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,KAClD4B,EAAyD,IAAlCzC,KAAKiC,MAAsB,EAAhBjC,KAAKa,UACvC6B,EAAyD,IAAlC1C,KAAKiC,MAAsB,EAAhBjC,KAAKa,U,KAGnC2B,EAAY,I,KACJ5G,KAAK+G,M,KAEPb,E,KACQC,E,KACMU,E,UACOjI,KAAKwG,eAAe,G,oBAAI,G,KACzB0B,E,MAJ1BZ,K,KACAC,a,KACAC,mB,KACAY,mB,KACAV,yB,WAEM,CACNW,UAAW,kBACXC,YAAatI,KAAKuI,aAAa/C,KAAKC,MAAMD,KAAKa,SAAWrG,KAAKuI,aAAapI,SAAW,SACvFqI,YAAa,EACbxB,YAAayB,MAAMC,KAAK,CAAEvI,OAAQA,IAAU,kBAAkD,GAA1CqF,KAAKC,MAAsB,IAAhBD,KAAKa,UAAmB,QACvFS,MAAO2B,MAAMC,KAAK,CAAEvI,OAAQA,IAAU,kBAAMqF,KAAKC,MAAsB,IAAhBD,KAAKa,aAC5DsC,eAAgB,CACZ,CACI7B,MAAO2B,MAAMC,KAAK,CAAEvI,OAAQ,KAAM,kBAAMqF,KAAKC,MAAsB,IAAhBD,KAAKa,aACxDuC,cAAe,GAEnB,CACI9B,MAAO2B,MAAMC,KAAK,CAAEvI,OAAQ,KAAM,kBAAMqF,KAAKC,MAAsB,IAAhBD,KAAKa,aACxDuC,cAAepD,KAAKC,MAAsB,EAAhBD,KAAKa,WAEnC,CACIS,MAAO2B,MAAMC,KAAK,CAAEvI,OAAQ,KAAM,kBAAMqF,KAAKC,MAAsB,IAAhBD,KAAKa,aACxDuC,cAAepD,KAAKC,MAAsB,EAAhBD,KAAKa,aA3B3C1I,E,CACAL,G,KACAuL,W,KACAjB,W,KAOAkB,S,MAuBJtJ,EAAcI,KAAKjC,G,QAzCsBqK,I,gDA4CtCxI,G,+PAMP0G,QAAQC,IAAI,4B,SACNP,GAAM,K,uPAIZM,QAAQC,IAAI,2B,SACNP,GAAM,K,+PAIZM,QAAQC,IAAI,mC,SACNP,GAAM,K,gCACL,G,8PAIPM,QAAQC,IAAI,kC,SACNP,GAAM,K,6QAIZM,QAAQC,IAAI,iCAER4C,EAAI,IAAI3H,KACRuE,EAAUoD,EAAEC,aAAe,GAE3BC,EAAgBtD,EAAU,EAE1BuD,EAAa,EACD,IAAZvD,IAAeuD,EAAa,GAChB,IAAZvD,IAAeuD,EAAa,GAChB,IAAZvD,IAAeuD,EAAa,GAChB,IAAZvD,IAAeuD,EAAa,GAE5BC,EACCxD,GAAW,GACXA,GAAW,EAEZyD,EACCzD,GAAW,GACXA,GAAW,E,kBAET,CAAC,CACJqB,YAAuD,GAAzCxB,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,KAChDS,MAAOtB,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,IACzC6C,WAAYA,EACZD,cAAeA,EACfG,YAAaA,EACbD,cAAeA,GAEnB,CACInC,YAAuD,GAAzCxB,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,KAChDS,MAAOtB,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,IACzC6C,WAAYA,EACZD,cAAeA,EACfG,YAAaA,EACbD,cAAeA,K,uRAOnBjD,QAAQC,IAAI,kD,SACNP,GAAM,K,OAGZ,IADIyD,EAAO,GACF1C,EAAI,EAAGA,EAAI,GAAIA,IACpB0C,EAAKzJ,KAAK,CACNoH,YAAuD,GAAzCxB,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,KAChDS,MAAiD,IAAzCtB,KAAKC,MAAsB,IAAhBD,KAAKa,UAAkB,O,yBAI3C,CACHgD,KAAMA,EACNjD,OAAQiD,EAAKC,QAAQ,SAACC,EAAOhL,GAAR,OAAcgL,EAAQhL,EAAEuI,QAAQ,GACrD0C,KAAMH,EAAKlJ,OACX4G,UAAW,UACXQ,aAAc,O,4RAKlBrB,QAAQC,IAAI,oD,SACNP,GAAM,K,cAER6D,EAAS,CAAC,CACVzC,YAAa,KACb0C,QAAS,EACTC,YAAa,GACd,CACC3C,YAAa,KACb0C,QAAS,KACTC,YAAa,GACd,CACC3C,YAAa,KACb0C,QAAS,EACTC,YAAa,GACd,CACC3C,YAAa,KACb0C,QAAS,GACTC,YAAa,KAGbC,EAAc,CACd5C,YAAa,KACb0C,QAAS,EACTC,YAAa,GAGbE,EAAc,CACd7C,YAAa,KACb0C,QAAS,GACTC,YAAa,IAGbG,EAAa,CACb9C,YAAa,KACb0C,QAAS,KACTC,YAAa,G,kBAGV,CACHF,OAAQA,EACRG,YAAaA,EACbC,YAAaA,EACbC,WAAYA,I,+QAOhB5D,QAAQC,IAAI,6B,SACNP,GAAM,K,OAGZ,IAFImE,EAAM,GAEDC,EAAM,EAAGA,GAAO,EAAGA,IAAO,CAW/B,IATIjM,EACA,CACIT,GAHJc,EAAO,KAAO4L,EAIVC,IAAK,cACLzJ,KAAM,OAASwJ,EACfE,UAA6C,IAAlC1E,KAAKiC,MAAsB,EAAhBjC,KAAKa,UAC3B3G,SAAU,IAGTyK,EAAM,EAAGA,GAAO,EAAGA,IAAO,CAc/B,IAZIhM,EACA,CACIb,GAHQc,EAAO,IAAM+L,EAIrB3J,KAAMR,KAAKuI,aAAa/C,KAAKC,MAAMD,KAAKa,SAAWrG,KAAKuI,aAAapI,SAAW,UAAYgK,EAC5F1L,UAAW,OAAU0L,GAAKC,WAC1BC,SAA4C,IAAlC7E,KAAKiC,MAAsB,EAAhBjC,KAAKa,UAAsB,UAAY,UAC5DiE,MAAO,MACPJ,UAA6C,IAAlC1E,KAAKiC,MAAsB,EAAhBjC,KAAKa,UAC3BkE,MAAO,IAGXC,EAAShF,KAAKiF,IAAI,EAAGjF,KAAKC,MAAsB,EAAhBD,KAAKa,WAChCqE,EAAI,EAAGA,EAAIF,EAAQE,IACpBC,EACA,CACIrN,GAAIoN,EACJpD,KAAM9B,KAAKC,MAAsB,EAAhBD,KAAKa,UAAgB,GAE9ClI,EAAQoM,MAAM3K,KAAK+K,GAGvB5M,EAAG2B,SAASE,KAAKzB,GAGrB4L,EAAInK,KAAK7B,G,yBAGNgM,G,kQAIP7D,QAAQC,IAAI,wC,0PAIZD,QAAQC,IAAI,qC,2QAMZD,QAAQC,IAAI,uC,SACNP,GAAM,K,cAERgF,EAAU,IAQNhL,KAPJiL,EACJ,CACIP,MAAO,MACP7L,SAAU,UACV4L,SAAU,UACVS,SAAU,YAIdD,EACA,CACIP,MAAO,MACP7L,SAAU,UACV4L,SAAU,UACVS,SAAU,WAEdF,EAAQhL,KAAKiL,GAEbA,EACA,CACIP,MAAO,MACP7L,SAAU,UACV4L,SAAU,UACVS,SAAU,WAEdF,EAAQhL,KAAKiL,G,kBAEND,G,sPAIP1E,QAAQC,IAAI,gC,wGApcdF,GACKW,WAAa,CAChB,UAAW,QAAS,WAAY,MAChC,KAAM,KAAM,MAAO,MAAO,MAC1B,KAAM,KAAM,MAAO,MACnB,QAAS,aAAc,YAAa,WACpC,WAAY,YAAa,aAN3BX,GAQKsC,aAAe,CAAC,UAAW,QAAS,OAAQ,QAgcxCtC,U,oBC7cT8E,GAAQ3F,2JAAY4F,gBA6QXC,G,2JA7PqBC,EAAqB7C,EAAWsC,G,kFAC/C3K,KAAKmL,aACdC,sDAE0BF,EAC1B,cAAgB7C,EAChB,gBAAkBsC,G,wTAIT3K,KAAKmL,aAAaC,wB,6NAGRC,EAAYC,G,kFACtBtL,KAAKmL,aAAaC,6BAAsCC,EAAa,aAAeC,G,mOAGvEhO,G,kFACb0C,KAAKmL,aAAaC,kBAA2B9N,G,gOAGjCA,G,kFACZ0C,KAAKuL,gBAAgBH,kBAA2B9N,G,gOAGpCkO,G,kFACZxL,KAAKyL,sBAAsBL,iCAAyCI,G,kOAGtDlO,G,kFACd0C,KAAKmL,aAAaC,uCAAgD9N,G,2OAG3C4N,EAAqB7C,EAAWsC,EAAMnK,EAAMuG,G,kFACnE/G,KAAK0L,cACdN,iEAE0BF,EAC1B,cAAgB7C,EAChB,gBAAkBsC,EAClB,SAAWnK,EACX,cAAgBuG,G,mOAKA1H,G,kFACPW,KAAKmL,aAAaQ,0BAAmCtM,G,yNAGhDA,EAAQgM,EAAYC,G,kFACzBtL,KAAKmL,aAAaQ,oBAA6BtM,EAAS,eAAiBgM,EAAa,aAAeC,G,gOAG7FhO,G,kFACR0C,KAAKmL,aAAaQ,aAAsBrO,G,2NAGjCJ,G,kFACP8C,KAAK0L,cAlEY,YAkEiBxO,G,2NAG3BA,G,kFACP8C,KAAK4L,aAtEY,YAsEgB1O,G,2NAG1BI,G,kFACP0C,KAAKuL,gBAAgBI,aAAsBrO,G,mOAK5B8J,G,kFACfpH,KAAKmL,aAAaU,iCAA2CzE,G,iOAGhDA,EAAQiE,EAAYC,G,kFACjCtL,KAAKmL,aAAaU,2BAAqCzE,EAAS,eAAiBiE,EAAa,aAAeC,G,uOAG9FhO,G,kFACf0C,KAAKmL,aAAaU,oBAA8BvO,G,2NAKzC8J,EAAQ8D,EAAqB7C,EAAWsC,G,kFAC/C3K,KAAK0L,cACdI,2BAEa1E,EACb,wBAA0B8D,EAC1B,cAAgB7C,EAChB,gBAAkBsC,G,gOAGHO,EAAqB7C,EAAWsC,G,kFACtC3K,KAAK0L,cACdI,uCAE0BZ,EAC1B,cAAgB7C,EAChB,gBAAkBsC,G,sOAKKO,EAAqB7C,EAAWsC,G,kFAC9C3K,KAAK0L,cACdK,+CAE0Bb,EAC1B,cAAgB7C,EAChB,gBAAkBsC,G,qOAGIO,EAAqB7C,EAAW2D,G,kFAC7ChM,KAAK0L,cACdK,8CAE0Bb,EAC1B,cAAgB7C,EAChB,YAAc2D,G,oOAGOd,EAAqB7C,EAAW2D,G,kFAC5ChM,KAAKmL,aACdY,yCAC0Bb,EAC1B,cAAgB7C,EAChB,YAAc2D,G,qPAKwBC,G,kFAC7BjM,KAAK0L,cAAcQ,qCAA8CD,G,mPAGlCA,G,kFAC/BjM,KAAK0L,cAAcQ,uCAAgDD,G,gTAMnEjM,KAAKmL,aA5JY,gB,sOA+JED,EAAqB7C,EAAWsC,EAAM3D,G,kFACzDhH,KAAK0L,cACdS,2DAE0BjB,EAC1B,cAAgB7C,EAChB,gBAAkBsC,EAClB,gBAAkB3D,G,0OAGOkE,EAAqBkB,G,kFACrCpM,KAAK0L,cACdS,wDAE0BjB,EAC1B,aAAekB,G,4TAMNpM,KAAKmL,aAnLY,sB,8NAsLNkB,G,kFACXrM,KAAK0L,cAvLY,qBAuL4BW,G,6NAKpCC,G,iGAEIC,KAAM,CACxBC,OAAQ,MACRvC,IAAKqC,EACLG,QAAS1B,K,cAHP2B,E,yBAKCA,EAAO,M,uCAEdxG,QAAQyG,MAAM,QAAd,M,uNAKmBL,EAAUjD,G,iGAEPkD,KAAM,CACxBC,OAAQ,OACRvC,IAAKqC,EACLG,QAAS1B,GACT1B,KAAMA,I,cAJJqD,E,yBAMCA,EAAO,M,uCAEdxG,QAAQyG,MAAM,QAAd,M,iOAK2BL,EAAUjD,G,iGAEfkD,KAAM,CACxBC,OAAQ,OACRvC,IAAKqC,EACLG,QAAS1B,GACT1B,KAAMA,EACNuD,OAAQ,CACJC,QAAS,CACL,eAAgB,0B,cAPtBH,E,yBAWCA,EAAO,M,+PAMIJ,EAAUjD,G,2FAEtBkD,KAAM,CACRC,OAAQ,MACRvC,IAAKqC,EACLG,QAAS1B,GACT1B,KAAMA,I,sDAGVnD,QAAQyG,MAAM,QAAd,M,kMAIqBL,G,2FAEfC,KAAM,CACRC,OAAQ,SACRvC,IAAKqC,EACLG,QAAS1B,K,sDAGb7E,QAAQyG,MAAM,QAAd,M,sHCpOGG,G,kOA7BH5H,GAAcC,S,gBACdzF,EAAWuG,GAAY8G,c,sCAGN9B,GAAY8B,c,OAA7BrN,E,uCAGGA,G,yLAGyBwL,EAAqB7C,EAAWsC,EAAM3D,G,sEAClE9B,GAAcC,S,gBACdc,GAAY+G,yB,sCAGN/B,GAAY+B,uBAAuB9B,EAAqB7C,EAAWsC,EAAM3D,G,6LAItDkE,EAAqBkB,G,sEAC9ClH,GAAcC,S,gBACdc,GAAYgH,sB,sCAGNhC,GAAYgC,oBAAoB/B,EAAqBkB,G,2GCJxDc,G,4OApBHhI,GAAcC,S,gBACdzF,EAAWuG,GAAYkH,wB,sCAGNlC,GAAYkC,wB,OAA7BzN,E,uCAGGA,G,iLAGiB2M,G,sEACpBnH,GAAcC,S,gBACdc,GAAYmH,iB,sCAGNnC,GAAYmC,eAAef,G,uIC6L9BgB,G,kDAxLX,WAAYpN,GAA6B,IAAD,8BACpC,cAAMA,IAEDpB,MAAQ,CACTwN,iBAAkB,GAClBiB,kBAAkB,EAClBC,kBAAmB,IANa,E,qDAUvB,IAAD,OAiHNC,EAAyB,SAACC,GAC5B,IAAIC,EAAmBC,KAAKC,MAAMH,EAAMI,OAAOC,OAE3CP,EAAoB,EAAK1O,MAAM0O,mBACnCA,EAAoBA,EAAkBlO,QAAO,SAAAd,GAAC,OAAIA,EAAE8J,YAAcqF,EAAiBrF,cACjEzI,KAAK8N,GAEvB,EAAK/L,SAAS,CACV4L,kBAAmBA,KAIrBQ,EAAqB,SAAC7C,EAA6B7C,GACrD,IAAIgE,EAAmB,EAAKxN,MAAMwN,sBACqCtN,IAA1DsN,EAAiBlN,MAAK,SAAAZ,GAAC,OAAIA,EAAE8J,YAAcA,KAGpDgE,EAAmBA,EAAiBhN,QAAO,SAAAd,GAAC,OAAIA,EAAE8J,YAAcA,KAGhEgE,EAAiBzM,KAAK,CAClBsL,oBAAqBA,EACrB7C,UAAWA,EACXyC,SAAU,YAIlB,EAAKnJ,SAAS,CACV0K,iBAAkBA,EAClBiB,iBAAkBjB,EAAiBlM,OAAS,KAI9C6N,EAAoB,WACtB,IAAItO,EAAW,EAAKb,MAAMwN,iBAAiB1M,KAAI,SAAApB,GAC3C,IAAImP,EAAmB,EAAK7O,MAAM0O,kBAAkBpO,MAAK,SAAA8O,GAAI,OAAI1P,EAAE8J,YAAc4F,EAAK5F,aAClFyC,OAAgC/L,IAArB2O,EAAiC,UAAYA,EAAiB5C,SAG7E,OADAvM,EAAEuM,SAAWA,EACNvM,KAGX,EAAK0B,MAAM+N,kBAAkBtO,IAGjC,OACI,gBAACW,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,KACI,gDAEJ,gBAACA,EAAA,EAAD,KAvEA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KA7FyB,WACrC,GAAI,EAAKrD,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAQ3B,GAAc,IAJF,EAAKnO,MAAMR,mBAAmB6J,QAAQ,SAACC,EAAOhL,GAAR,OAC9CgL,EAAQhL,EAAEmB,SAASS,SACpB,GAGC,MAAO,yBAGX,IAAIkO,EACA,EAAKpO,MAAMR,mBACNE,KAAI,SAAA5B,GAAE,OACHA,EAAG2B,SAASC,KAAI,SAAA2O,GACZ,IAAIC,EACAC,GAAkB,EAClB5D,EAAU,EAAK3K,MAAMH,eACpBT,QAAO,SAAAd,GAAC,OACLA,EAAE+L,QAAUgE,EAAEhE,QACE,KAAf/L,EAAE8L,UAAmB9L,EAAE8L,WAAaiE,EAAEjE,aAG/C,GAAuB,IAAnBO,EAAQzK,OACRoO,EAAoB,2BAEnB,GAAuB,IAAnB3D,EAAQzK,OAAc,CAC3B,IAAI0K,EAASD,EAAQ,GAEjBC,EAAOpM,WAAa6P,EAAE7P,SACtB8P,EAAoB,WAGpBA,EAAoB1D,EAAOpM,SAC3B+P,GAAkB,QAGjB5D,EAAQzK,OAAS,IACtBoO,EACI,gBAACE,GAAA,EAAD,CAAOtR,KAAK,SAASuR,SAAUlB,GAC1B5C,EAAQjL,KAAI,SAAApB,GAAC,OACV,0BACIuP,MAAOH,KAAKgB,UAAU,CAACtG,UAAWiG,EAAEhR,GAAIwN,SAAUvM,EAAEuM,YAEnDvM,EAAEE,SAHP,KAGmBF,EAAEuM,SAHrB,SAOZ0D,GAAkB,GAGtB,OACI,sBAAIpO,WAAYoO,EAAkB,mBAAqB,IAAM,YACzD,0BACIA,EACI,gBAACC,GAAA,EAAD,CACItR,KAAK,WACLuR,SAAU,kBAAMX,EAAmBhQ,EAAGT,GAAIgR,EAAEhR,OAC3C,IAEb,0BAAKgR,EAAE9N,KAAP,KAAe8N,EAAEhE,MAAjB,KACA,0BAAKgE,EAAE7P,UACP,0BAAK8P,UAK7B,OACI,yBAAOnO,UAAU,8BACb,6BACI,0BACI,sBAAIwO,MAAM,QACV,sBAAIA,MAAM,OAAV,gBACA,sBAAIA,MAAM,OAAV,mBACA,sBAAIA,MAAM,OAAV,+BAGR,6BACKP,IAWIQ,OAuEb,gBAAC9K,EAAA,EAAD,KA9DA,gBAAC+K,GAAA,EAAD,CACIV,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV4O,UAAW,EAAKnQ,MAAMyO,iBACtBpL,QAAS8L,GALb,gB,GAnHiBhN,iBCD3BiO,G,kDACF,WAAYhP,GAA6B,IAAD,8BACpC,cAAMA,IAEDpB,MAAQ,CACTqQ,mBAAmB,EACnBC,kBAAkB,GAGtB,EAAKC,eAAe,EAAKnP,OACzB,EAAKoP,sBAAsB,EAAKpP,OATI,E,2DAYzBA,GAA6B,IAAD,OACvCA,EAAMqP,eAAerR,8BACrB+B,KAAK2B,SAAS,CACVuN,mBAAmB,IAGvBK,GACKxC,cACAyC,MAAK,SAAAzF,GACEtB,MAAMgH,QAAQ1F,IACdA,EAAI2F,SAAQ,SAAC3R,GACTkC,EAAMqP,eAAexR,wBAAwBC,GAE7CA,EAAG2B,SAASgQ,SAAQ,SAACpB,GAAD,OAChBrO,EAAMqP,eAAepR,cAAcoQ,EAAGvQ,EAAGT,UAKrD,EAAKqE,SAAS,CACVuN,mBAAmB,S,4CAKbjP,GAA6B,IAAD,OAC9CA,EAAM0P,qBAAqBjR,0BAE3BsB,KAAK2B,SAAS,CACVwN,kBAAkB,IAGtBjC,GACKC,wBACAqC,MAAK,SAAA5E,GACEnC,MAAMgH,QAAQ7E,IACdA,EAAQ8E,SAAQ,SAACnR,GAAD,OACZ0B,EAAM0P,qBAAqBrR,oBAAoBC,MAIvD,EAAKoD,SAAS,CACVwN,kBAAkB,S,+BAU9B,OACI,gBAAC,GAAD,CACI1P,mBAAoBO,KAAKC,MAAMR,mBAC/BK,eAAgBE,KAAKC,MAAMH,eAC3BoO,UAAWlO,KAAKnB,MAAMqQ,mBAAqBlP,KAAKnB,MAAMsQ,iBACtDnB,kBATkB,SAAC3B,GACvBa,GAAsBE,eAAef,U,GA9DpBrL,iBCxBdiO,GDkHAW,aAdS,SAAC/Q,GACrB,MAAO,CACHY,mBAAoBZ,EAAMV,QAAQsB,mBAClCK,eAAgBjB,EAAMgB,cAAcC,mBAIjB,SAAC+P,GACxB,MAAO,CACHP,eAAgBQ,YAAmBC,EAA6BF,GAChEF,qBAAsBG,YAAmBE,EAAmCH,MAIrED,CAGbX,IErHagB,GCIG,WACd,OACI,gBAAC5P,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,iBAAiB6D,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAC9C,gBAACR,EAAA,EAAD,KACI,gBAACY,EAAD,OAEJ,gBAACZ,EAAA,EAAD,KACI,gBAAC,EAAD,UCoFLkM,G,2JA7FqBhF,EAAqB7C,EAAWsC,G,4EAGxDzF,GAAcC,S,gBACd/H,EAAS6I,GAAYkK,qB,sCAGNlF,GAAYkF,mBAAmBjF,EAAqB7C,EAAWsC,G,OAA9EvN,E,uCAGGA,G,qQAMH8H,GAAcC,S,gBACdiL,EAAQnK,GAAYoK,kB,sCAGNpF,GAAYoF,kB,OAA1BD,E,uCAGGA,G,gLAGgB/E,EAAYC,G,4EAG/BpG,GAAcC,S,gBACdnG,EAAaiH,GAAYqK,gB,sCAGNrF,GAAYqF,cAAcjF,EAAYC,G,OAAzDtM,E,uCAGGA,G,sLAGmB1B,G,4EAGtB4H,GAAcC,S,gBACd/H,EAAS6I,GAAYsK,mB,sCAGNtF,GAAYsF,iBAAiBjT,G,OAA5CF,E,uCAGGA,G,mLAGkBE,G,sEACrB4H,GAAcC,S,gBACdc,GAAYuK,kB,sCAGNvF,GAAYuF,gBAAgBlT,G,mLAIbkO,G,sEACrBtG,GAAcC,S,gBACdc,GAAYwK,kB,sCAGNxF,GAAYwF,gBAAgBjF,G,qLAIXlO,G,4EAGvB4H,GAAcC,S,gBACd/H,EAAS6I,GAAYyK,oB,sCAGNzF,GAAYyF,kBAAkBpT,G,OAA7CF,E,uCAGGA,G,8LAG6B8N,EAAqB7C,EAAWsC,EAAMnK,EAAMuG,G,sEAC5E7B,GAAcC,S,gBACdc,GAAY0K,6B,sCAGN1F,GAAY0F,2BAA2BzF,EAAqB7C,EAAWsC,EAAMnK,EAAMuG,G,iHC7DtF6J,G,yKA3BmC3E,G,4EAGtC/G,GAAcC,S,gBACd0L,EAAkB5K,GAAY6K,mC,sCAGN7F,GAAY6F,iCAAiC7E,G,OAArE4E,E,uCAGGA,G,sMAGqC5E,G,4EAGxC/G,GAAcC,S,gBACd0L,EAAkB5K,GAAY8K,qC,sCAGN9F,GAAY8F,mCAAmC9E,G,OAAvE4E,E,uCAGGA,G,yGC+BAG,G,mJAtDa5J,EAAQ8D,EAAqB7C,EAAWsC,G,sEACxDzF,GAAcC,S,gBACdc,GAAYgL,a,sCAGNhG,GAAYgG,WAAW7J,EAAQ8D,EAAqB7C,EAAWsC,G,mLAItDO,EAAqB7C,EAAWsC,G,sEAC/CzF,GAAcC,S,gBACdc,GAAYiL,Y,sCAGNjG,GAAYiG,UAAUhG,EAAqB7C,EAAWsC,G,yLAIrCO,EAAqB7C,EAAWsC,G,4EAGvDzF,GAAcC,S,gBACd6G,EAAU/F,GAAYkL,oB,sCAGNlG,GAAYkG,kBAAkBjG,EAAqB7C,EAAWsC,G,OAA9EqB,E,uCAGGA,G,wLAGmBd,EAAqB7C,EAAW2D,G,sEACtD9G,GAAcC,S,gBACdc,GAAYmL,mB,sCAGNnG,GAAYmG,iBAAiBlG,EAAqB7C,EAAW2D,G,uLAI9Cd,EAAqB7C,EAAW2D,G,4EAGrD9G,GAAcC,S,gBACdkE,EAAOpD,GAAYoL,kB,sCAGNpG,GAAYoG,gBAAgBnG,EAAqB7C,EAAW2D,G,OAAzE3C,E,uCAGGA,G,6GCvDR,SAASiI,GAAYC,EAAKC,GAC7B,IAAIC,EAAWD,EAQf,OAPY,OAARD,GACIA,EAAIpR,OAAS,IACRuR,MAAMH,KACPE,EAAWE,SAASJ,KAIzBE,EAGJ,SAASG,GAAMC,GAElB,IAFsC,IAAfC,EAAc,uDAAH,EAC9BC,EAAI,EACCpL,EAAI,EAAGA,EAAImL,EAAUnL,IAC1BoL,GAAK,GAGT,OAAOvM,KAAKiC,OAAOoK,EAAMG,OAAOC,SAAWF,GAAKA,E,WChBrCG,G,uKCOM,IAAD,OACRC,EAAQnS,KAAKC,MAAMmS,OAAOzS,KAAI,SAACpB,EAAG8T,GAAJ,OAC9B,sBAAIjS,UAAWiS,IAAU,EAAKpS,MAAMqS,QAAU,SAAW,IACrD,4BAAO/T,OAIf,OACI,gBAAC,WAAD,KACI,sBAAI6B,UAAU,kBAAkB+R,Q,GAVrBnR,iBCapB,SAASuR,GAAajV,GACzB,IAAIgK,EApBJ,CACIkL,EAAG,OACHC,EAAG,OACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,QACHC,EAAG,QACHC,EAAG,OAEHC,GAAI,KACJC,GAAI,KACJC,GAAI,MACJC,GAAI,OAMc9V,GAEtB,MAAsB,qBAAVgK,EACD,UAGAA,E,IC1BA+L,G,uKCUM,IAAD,OAgDZ,OA/CyC,WACrC,GAAI,EAAKpT,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAQ3B,GAAc,IAJF,EAAKnO,MAAMR,mBAAmB6J,QAAQ,SAACC,EAAOhL,GAAR,OAC9CgL,EAAQhL,EAAEmB,SAASS,SACpB,GAGC,MAAO,yBAGX,IAAIkO,EACA,EAAKpO,MAAMR,mBACNE,KAAI,SAAA5B,GAAE,OACHA,EAAG2B,SAASC,KAAI,SAAA2O,GAAC,OACbA,EAAE/D,MACG5K,KAAI,SAAA+K,GAAC,OACF,sBAAItK,UAAU,UAAU8B,QAAS,kBAAM,EAAKjC,MAAM8N,mBAAmBhQ,EAAGT,GAAIgR,EAAG5D,EAAEpN,GAAIoN,EAAEpD,QACnF,0BAAKgH,EAAE9N,KAAP,KAAe8N,EAAEhE,MAAjB,KACA,0BAAKI,EAAEpN,GAAK,GACZ,0BAAKiV,GAAa7H,EAAEpD,iBAMhD,OACI,yBAAOlH,UAAU,8BACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,gBACA,sBAAIA,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,UAGR,6BACKP,IAObQ,O,GAlDmB7N,iBC6ChBsS,G,uKA3CM,IAAD,OAiCZ,OACI,gBAAC,WAAD,KACI,gBAACvP,EAAA,EAAD,KAZA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KAxByB,WACrC,IAAIiQ,EAAW,EAAKtT,MAAMR,mBAAmBE,KAAI,SAAA5B,GAC7C,IAAI2B,EAAW3B,EAAG2B,SAASC,KAAI,SAAA2O,GAC3B,IAAI/D,EAAQ+D,EAAE/D,MAAMlL,QAAO,SAAAqL,GAAC,OAAe,IAAXA,EAAEpD,MAAyB,IAAXoD,EAAEpD,QAElD,OADAgH,EAAE/D,MAAQA,EACH+D,KAGX,OADAvQ,EAAG2B,SAAWA,EACP3B,KAGX,OACI,gBAAC,GAAD,CACImQ,UAAW,EAAKjO,MAAMiP,kBACtBzP,mBAAoB8T,EACpBxF,mBAAoB,EAAK9N,MAAM8N,qBAUtBc,Y,GA3BiB7N,iBCkC/BwS,G,uKAnCM,IAAD,OAyBZ,OACI,gBAAC,WAAD,KACI,gBAACzP,EAAA,EAAD,KAxBA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KACI,uDACA,gBAACmL,GAAA,EAAD,CACItR,KAAK,SACLqU,aAAc,EAAKvR,MAAMwT,oBAAsB,EAC/C/E,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAM0T,sBAAsBD,EAAE7F,OAAOC,SAE3D,qCACA,qCACA,qCACA,qCACA,qCACA,+C,GAlBW9M,iBC2B5B4S,G,uKA1BM,IAAD,OAgBZ,OACI,gBAAC,WAAD,KACI,gBAAC7P,EAAA,EAAD,KAfA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KACI,iEACA,gBAACmL,GAAA,EAAD,CACI+C,aAAc,EAAKvR,MAAM4T,mBACzBnF,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAM6T,uBAAuBJ,EAAE7F,OAAOC,mB,GAVpC9M,iB,kBCVzC,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,OACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,OACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,MAGP,gBAAkB,KCxcH,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,OACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,MAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,IACP,KAAO,KAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,OAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,OAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,UC5qCQ,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,MAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,KACP,KAAO,MAEP,CACA,EAAI,IACJ,KAAO,IACP,KAAO,QCjPQ,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,MAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,IACP,KAAO,KAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,UCnHQ,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,OAGP,gBAAkB,KCxOH,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,MAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,KACP,KAAO,OAGP,gBAAkB,KCxOH,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,MAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,IACP,KAAO,KAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,UCxIQ,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,MAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,IACP,KAAO,QCvGQ,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,IACL,KAAO,IACP,KAAO,MAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,IACP,KAAO,QC9GQ,IACf,MAAQ,aACR,GAAK,EACL,EAAI,CACJ,EAAI,OACJ,QAAU,MACV,eAAiB,CACjB,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,KACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,OAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,OACL,KAAO,IACP,KAAO,KAEP,CACA,EAAI,MACJ,EAAI,IACJ,GAAK,MACL,KAAO,MACP,KAAO,QAGP,gBAAkB,CAClB,CACA,EAAI,IACJ,KAAO,IACP,KAAO,KAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,OAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,OAEP,CACA,EAAI,IACJ,KAAO,MACP,KAAO,UC1GA,SAAS+S,KACZ,IAAIC,EAA2B,GAY/B,OAFAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAaA,EAAW5U,OAAO6U,GAAaC,MACpB9U,OAAO6U,GAAaE,MACpB/U,OAAO6U,GAAaG,MACpBhV,OAAO6U,GAAaI,MACpBjV,OAAO6U,GAAaK,MACpBlV,OAAO6U,GAAaM,MACpBnV,OAAO6U,GAAaO,MACpBpV,OAAO6U,GAAaQ,MACpBrV,OAAO6U,GAAaS,MACpBtV,OAAO6U,GAAaU,KAKzC,SAASV,GAAaW,GACzB,IAAIxX,EAAuB,GAEvB2J,EAAY6N,EAAcC,EAC1BC,EAAS/N,EAAUgO,EACnBC,EAAMjO,EAAUkO,QAapB,OAXAlO,EAAUmO,eAAexF,SAAQ,SAAAyF,GAC7B/X,EAAOwC,KAAK,CACR0H,KAAM8N,GAAkBN,GACxBO,SAAUP,EAASK,EAAKG,EACxBR,OAAQA,EACRtU,KAAM2U,EAAKG,EACXC,UAAWP,IAAQG,EAAKG,EACxBE,IAAKC,GAAmBX,EAAQK,EAAKG,QAItClY,EAGJ,SAASgY,GAAkBN,GAG9B,MAAe,UAFfA,EAASA,EAAOY,eAEc,EACf,SAAXZ,EAA0B,EACf,SAAXA,EAA0B,EACf,SAAXA,EAA0B,EACf,SAAXA,EAA0B,EACf,SAAXA,EAA0B,EACf,SAAXA,GAAgC,SAAXA,EAA0B,EACpC,SAAXA,EAA0B,EAEvB,EAGJ,SAASW,GAAmBX,EAAgBtU,GAC/C,MAAO,iBAAmBsU,EAAOY,cAAgBlV,EAAKkV,cAAgB,cAGnE,SAASC,GAA6BnV,GACzC,IAAIuG,EAAYgN,KAAiB5U,MAAK,SAAAZ,GAAC,OAAIA,EAAE8W,SAASK,gBAAkBlV,EAAKkV,iBAE7E,YAAkB3W,IAAdgI,EACO,GAGJ0O,GAAmB1O,EAAU+N,OAAQ/N,EAAUvG,M,aC5G3CoV,G,uKCcP,OACI,gBAAC,KAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAMrJ,KAAKC,MAAM8V,SACjBC,OAAQ,CACJC,MAAO,GACPrT,OAAQ,KAGZ,gBAAC,KAAD,CACIsT,QAAQ,OACRC,OAAQ,IACZ,gBAAC,KAAD,CACIC,QAAQ,OACRC,YAAY,OACZC,MAAM,EACNC,OAAQ,CAAC,OAAQ,UACrB,gBAAC,KAAD,CACIH,QAAQ,QACRC,YAAY,QACZC,MAAM,EACNC,OAAQ,CAAC,OAAQ,UAErB,gBAAC,KAAD,CAAML,QAAQ,cAAcE,QAAQ,OAAOjZ,KAAK,WAAWqZ,OAAO,UAAUC,KAAK,IACjF,gBAAC,KAAD,CAAMP,QAAQ,QAAQE,QAAQ,QAAQjZ,KAAK,WAAWsZ,KAAK,U,GA1BnDzV,iB,SCPrB,SAAS0V,GAAqBxN,EAAYC,EAAeC,EAAaH,GACzE,OAAKA,EAPS,EAULC,EACE,wBAVK,EAYPA,EACE,sBAZD,EAcDA,EACE,gBAdD,EAgBDA,EACE,oBAEFC,EACE,cAEFC,EACE,YAGA,QArBA,cAyBR,SAASuN,GAAqBzN,EAAYC,EAAeC,EAAaH,GACzE,OAAKA,EAlCS,EAqCLC,GApCO,EAuCPA,GAtCC,EAyCDA,GAxCC,EA2CDA,EARE,EAWFC,EACE,EAEFC,EACE,EAGA,EArBA,E,WClCAwN,G,uKCsBP,IAAI5P,OAAsCjI,IAAxBiB,KAAKC,MAAM4W,SAAyB,EAAI7W,KAAKC,MAAM4W,SAAS7P,YAC1EF,OAAgC/H,IAAxBiB,KAAKC,MAAM4W,SAAyB,EAAI7W,KAAKC,MAAM4W,SAAS/P,MACpEoC,OAAqCnK,IAAxBiB,KAAKC,MAAM4W,SAAyB,EAAI7W,KAAKC,MAAM4W,SAAS3N,WACzED,OAAwClK,IAAxBiB,KAAKC,MAAM4W,UAAiC7W,KAAKC,MAAM4W,SAAS5N,cAChFE,OAAwCpK,IAAxBiB,KAAKC,MAAM4W,UAAiC7W,KAAKC,MAAM4W,SAAS1N,cAChFC,OAAsCrK,IAAxBiB,KAAKC,MAAM4W,UAAiC7W,KAAKC,MAAM4W,SAASzN,YAE9E0N,EAAc,gBAAkBH,GAChCzN,EACAC,EACAC,EACAH,GAEJ,OACI,gBAAC9F,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,QAAR,eACiB,IACb,wBAAM7D,UAAU,cAAhB,IAA+BoF,KAAKC,MAAMuB,EAAc,GAAxD,WAEJ,gBAAChD,EAAA,EAAD,cACW,IACP,wBAAM5D,UAAU,eAAeoF,KAAKC,MAAMqB,EAAQ,IAAlD,OAEJ,gBAAC9C,EAAA,EAAD,CAAK5D,UAAU,cACX,gBAAC,KAAD,CAAiB2W,KAAMC,KAAU5W,UAAW0W,IAC5C,0BAAQ1W,UAAU,QAAQsW,GACtBxN,EACAC,EACAC,EACAH,Y,GAjCHjI,iBCmKdiW,G,kDA3JX,WAAYhX,GAAkC,IAAD,sBACzC,cAAMA,GAEN,IAAIiX,EAAqB,GACrBC,EAAgB,GAChBnD,EAAaD,KACbqD,EAAmBpD,EAAW7U,MAAK,SAAAZ,GAAC,OAAIA,EAAEgX,WAAahX,EAAE+I,OAAS,EAAKrH,MAAMoX,gBANxC,YAQhBtY,IAArBqY,IACAF,EAAqBE,EAAiB5B,IACtC2B,EAAgBC,EAAiB/B,SACjC,EAAKpV,MAAMqX,sBAAsBF,EAAiB/B,WAGtD,EAAKxW,MAAQ,CACTmV,WAAYA,EACZkD,mBAAoBA,EACpBC,cAAeA,GAjBsB,E,qDAqB5B,IAAD,OA0GNG,EAAwB,SAACxJ,GAC3B,EAAK7N,MAAMqX,sBAAsBxJ,GACjC,IAAI/G,EAAY,EAAKlI,MAAMmV,WAAW7U,MAAK,SAAAZ,GAAC,OAAIA,EAAE8W,WAAavH,KAC3DoJ,OAAmCnY,IAAdgI,EAA0B,GAAKA,EAAUyO,IAC9D2B,OAA8BpY,IAAdgI,EAA0B,GAAKA,EAAUsO,SAE7D,EAAK1T,SAAS,CACVuV,mBAAoBA,EACpBC,cAAeA,KAIvB,OACI,gBAAC,WAAD,KACI,gBAACpT,EAAA,EAAD,CAAK3D,UAAU,QAtHZ,gBAAC,GAAD,CAAgByW,SAAU,EAAK5W,MAAMsX,oBAyHxC,gBAACxT,EAAA,EAAD,CAAK3D,UAAU,QA1Gf,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACX,EAAA,EAAD,KACI,gBAACmL,GAAA,EAAD,CACItR,KAAK,SACLuR,SAAU,SAACgF,GAAD,OAAO4D,EAAsB5D,EAAE7F,OAAOC,SAlB3D,EAAKjP,MAAMmV,WACvB3U,QAAO,SAAAd,GAAC,OAAIA,EAAE+I,OAAS,EAAKrH,MAAMoX,gBAClC1X,KAAI,SAAApB,GAAC,OACF,0BAAQiZ,SAAUjZ,EAAEgX,WAAYhX,EAAE8W,gBAqB1B,gBAACrR,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,eAClB,uBAAK2B,IAAK,EAAKlD,MAAMqY,mBAAoBlV,IAAK,EAAKnD,MAAMsY,qBA+FzE,gBAACpT,EAAA,EAAD,KA5BA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KA5De,WACvB,GAA6C,IAAzC,EAAKnD,MAAMwX,mBAAmBtX,OAC9B,OACI,gBAACmD,EAAA,EAAD,kEAMR,IAAIoU,EAAkB,EAAKzX,MAAMwX,mBAAmB9X,KAAI,SAAApB,GACpD,IAAI8K,EAaJ,OAZAA,EAAO9K,EAAE8K,KAAK1J,KAAI,SAAApB,GACd,MAAO,CACHyI,YAAazI,EAAEyI,YACfF,MAAOvI,EAAEuI,MACToC,WAAY3K,EAAE2K,WACdD,cAAe1K,EAAE0K,cACjBE,cAAe5K,EAAE4K,cACjBC,YAAa7K,EAAE6K,YACf7C,wBAAyBhI,EAAEgI,4BAK/B,gBAACvC,EAAA,EAAD,KACI,gBAACb,EAAA,EAAD,CAAM/C,UAAU,WACZ,gBAACgD,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QAClB,gBAACkD,EAAA,EAAD,cAAgB,8BAAS/E,EAAEoZ,gBAAgBpR,wBAA0B,GAArD,aAChB,gBAACjD,EAAA,EAAD,mBAAqB,8BAAS/E,EAAEwI,aAEpC,gBAAC/C,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,cAClB,qBAAGA,UAAU,UAAU8B,QAAS,kBAAM,EAAKjC,MAAM2X,yBAAyBrZ,EAAEsZ,QACxE,gBAAC,KAAD,CAAiBd,KAAMe,UAInC,gBAAC/T,EAAA,EAAD,KACI,gBAAC,GAAD,CACIgS,SAAU1M,EACV0O,mBAAoBxZ,EAAE8K,KAAKlJ,OAC3B6X,SAAUxS,KAAKC,MAAMlH,EAAE8K,KAAKlJ,OAAS,YAQjE,OACI,gBAAC4D,EAAA,EAAD,CAAKE,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAClBkT,GASIO,W,GA1H2BjX,iBC7B7C,SAASkX,GAAQC,GAMpB,OALUA,EAAO7O,QAAO,SAAU8O,EAAKtK,GACnC,OAAOsK,EAAMtK,IACd,GAEaqK,EAAOhY,OCmBpB,SAASkY,GAAoBC,GAGhC,IAFA,IAAIjP,EAAO,GAEF1C,EAAI,EAAGA,EAAI2R,EAAe3R,IAC/B0C,EAAKzJ,KAAK,CACN0W,MAAO,EACPtP,YAAa,EACbF,MAAO,EACPoC,WAAY,EACZD,eAAe,EACfE,eAAe,EACfC,aAAa,EACb7C,wBAAyB,IAIjC,OAAO8C,EAGJ,SAASkP,GAAmBlP,EAAMmP,GAAoC,IAAtBC,EAAqB,uDAAL,IACnEpP,EAAKzJ,KAAK,CACN0W,KAAMjN,EAAKlJ,OAAS,EAAIkJ,EAAKA,EAAKlJ,OAAS,GAAGmW,KAAO,EAAI,EACzDtP,YAAawR,EAAaxR,YAAc,EACxCF,MAAO0R,EAAa1R,MAAQ,GAC5BoC,WAAYsP,EAAatP,WACzBD,cAAeuP,EAAavP,cAC5BE,cAAeqP,EAAarP,cAC5BC,YAAaoP,EAAapP,cAG1BqP,EAAgB,GAAKA,EAAgBpP,EAAKlJ,QAC1CkJ,EAAKqP,OAAO,EAAGrP,EAAKlJ,OAASsY,G,ICqKtBE,G,uKAhMM,IAAD,OA+KR3E,EAnCsB,WACtB,IC/JqBmE,ED+JjBnE,EAAa,EAAK/T,MAAMwX,mBAAmB9X,KAAI,SAAApB,GAAC,OAAIA,EAAEwI,aAGtD6R,GAFJ5E,EC/JRmE,GAD6BA,EDgKSnE,GC/JtB3U,QAAO,SAAC8V,EAAM9C,GAAP,OAAiB8F,EAAOU,QAAQ1D,KAAU9C,MDkK1C1S,KAAI,SAAAoH,GAEX,IAAI+R,EAAmB,EAAK7Y,MAAMwX,mBAC7BpY,QAAO,SAAAd,GAAC,OAAIA,EAAEwI,YAAcA,KAE7BgS,EAAQD,EACPnZ,KAAI,SAAApB,GAAC,OAAIA,EAAEoZ,gBAAgBpR,2BAE5ByS,EAAWF,EACVnZ,KAAI,SAAApB,GAAC,OAAIA,EAAEoZ,gBAAgBvR,UAE5B6S,EAAUzT,KAAKiC,MAAMyQ,GAAQa,IAC7BG,EAAYtH,GAAMsG,GAAQc,GAAW,GAEzC,MAAO,CACHxY,KAAMuG,EACNyC,KAAMyP,EACN7S,OAAQ8S,EACR7P,KAAMyP,EAAiB,GAAGzP,SAStC,OALAuP,EAAqBO,MAAK,SAAUC,EAAcC,GAC9C,OAAOD,EAAE5P,KAAO6P,EAAE7P,MAAQ,EAAI,KAElCoP,EAAuBA,EAAqBU,MAAM,EAAG,GAKxCC,GAEjB,OACI,gBAAC,WAAD,KACI,gBAACxV,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aA7Hd,SAAC4T,GACjB,IAAIwF,EAeJ,OAbIA,EADA,EAAKvZ,MAAMiO,UAEP,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAKnB,gBAAC,WAAD,KACI,gBAAC9K,EAAA,EAAD,wBAA0B,8BAAS,EAAKrD,MAAMwZ,gBAAgB1S,YAjE9D,SAACiN,GAKb,IAHA,IAAI7T,EAASqF,KAAKkU,IAAIC,MAAMnU,KAAMwO,EAAWrU,KAAI,SAASpB,GAAK,OAAOA,EAAE8K,KAAKlJ,WACzEkJ,EAAoC,GAE/B1C,EAAI,EAAGA,EAAIxG,EAAQwG,IACxB0C,EAAKzJ,KAAK,IAGd,IAAS+G,EAAI,EAAGA,EAAIqN,EAAW7T,OAAQwG,IAGnC,IAFA,IAAII,EAAYiN,EAAWrN,GAElBiT,EAAI,EAAGA,EAAI7S,EAAUsC,KAAKlJ,OAAQyZ,IAAK,CAC5C,IAAIC,EAASxQ,EAAKuQ,GAClBC,EAAO9S,EAAUvG,MAAQuG,EAAUsC,KAAKuQ,GAAG9S,MAC3CuC,EAAKuQ,GAAKC,EAIlB,IAAIC,ED/CL,CACH,CAAEtD,OAAQ,UAAWuD,KAAM,WAC3B,CAAEvD,OAAQ,UAAWuD,KAAM,WAC3B,CAAEvD,OAAQ,UAAWuD,KAAM,WAC3B,CAAEvD,OAAQ,UAAWuD,KAAM,WAC3B,CAAEvD,OAAQ,UAAWuD,KAAM,YC2CnBC,EAAQhG,EAAWrU,KAAI,SAACpB,EAAG8T,GAC3B,IAAIjE,EAAQ0L,EAAOzH,EAAQyH,EAAO3Z,QAClC,OAAO,gBAAC,KAAD,CAAM+V,QAAS3X,EAAEiC,KAAM4V,QAAQ,OAAOjZ,KAAK,WAAWqZ,OAAQpI,EAAK,OAAYqI,KAAK,OAG/F,OACI,gBAAC,KAAD,CAAqBZ,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAMA,EACN2M,OAAQ,CACJC,MAAO,GACPrT,OAAQ,KAGZ,gBAAC,KAAD,CAAe4T,OAAO,YACtB,gBAAC,KAAD,MAEA,gBAAC,KAAD,CACIN,QAAQ,OACRC,OAAQ,GACR8D,MAAO,WACPC,cAAe,SAAC5D,GAAD,OAAUjR,GAAYG,KAAKC,MAAM6Q,EAAO,MACvD0B,SAAUxS,KAAKC,MAAM4D,EAAKlJ,OAAS,KACvC,gBAAC,KAAD,CACIiW,QAAQ,OACRC,YAAY,OACZE,OAAQ,CAAC,OAAQ,UAEpByD,IAkBAG,CAAQnG,IAKjB,gBAAC7Q,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACKoW,IA2GAY,CAAYpG,IAEjB,gBAAChQ,EAAA,EAAD,CAAKC,GAAG,KAvGC,SAAC+P,GAClB,IAAIwF,EACJ,GAAI,EAAKvZ,MAAMiO,UACXsL,EACI,uBAAKpZ,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,iBAGtB,CACD,IAAIoJ,EAAWxD,EAAW7U,MAAK,SAAAZ,GAAC,OAAIA,EAAEiC,OAAS,EAAKP,MAAMwZ,gBAAgB1S,aAEtEsH,EACA2F,EAAWrU,KAAI,SAAApB,GACX,IAAI8b,OACatb,IAAbyY,EAAyB,EACrBhS,KAAKiC,MAAuC,KAA/BlJ,EAAEiL,KAAOgO,EAAShO,KAAQ,IAE/C,OACI,sBAAIpJ,UAAW,EAAKH,MAAMwZ,gBAAgB1S,YAAcxI,EAAEiC,KAAO,mBAAqB,IAClF,0BACI,gBAACiO,GAAA,EAAD,CACItR,KAAK,QACLqD,KAAK,SACL8Z,eAAgB,EAAKra,MAAMwZ,gBAAgB1S,YAAcxI,EAAEiC,KAC3DkO,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAMqX,sBAAsB/Y,EAAEiC,UAG5D,0BAAKjC,EAAEiC,MACP,0BAAKjC,EAAEiL,KAAO,IACd,0BAAK,EAAKvJ,MAAMwZ,gBAAgB1S,YAAcxI,EAAEiC,KAAO,IAAM6Z,GAC7D,0BAAK9b,EAAE6H,YAIvBoT,EACI,yBAAOpZ,UAAU,kBACb,6BACI,0BACI,sBAAIwO,MAAM,QACV,sBAAIA,MAAM,OAAV,aACA,sBAAIA,MAAM,OAAV,oBACA,sBAAIA,MAAM,OAAV,aACA,sBAAIA,MAAM,OAAV,qBAGR,6BACKP,IAKjB,OACI,gBAAClL,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACKoW,IAkDAe,CAAavG,U,GAzLgBhT,iBEwIvCwZ,G,uKApIM,IAAD,OAoHZ,OACI,gBAAC,WAAD,KACI,gBAACzW,EAAA,EAAD,CAAK3D,UAAU,QApHZ,gBAAC,GAAD,CAAgByW,SAAU,EAAK5W,MAAMsX,oBAuHxC,gBAACxT,EAAA,EAAD,CAAK3D,UAAU,QApHM,WACzB,IAAIoZ,EAkCJ,OAhCIA,EADA,EAAKvZ,MAAMiO,UAEP,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAKnB,gBAACrK,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACX,EAAA,EAAD,4BAA+B,EAAKrD,MAAMwa,mBAC1C,gBAACnX,EAAA,EAAD,KACI,uDACA,gBAACmL,GAAA,EAAD,CACItR,KAAK,SACLqU,aAAc,EAAKvR,MAAMwT,oBAAsB,EAC/C/E,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAM0T,sBAAsBD,EAAE7F,OAAOC,SAE3D,qCACA,qCACA,qCACA,qCACA,qCACA,wCAIZ,gBAAC9J,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,eAClB,uBAAK2B,IAAK4T,GAA6B,EAAK1V,MAAMwa,mBAAoBzY,IAAK,EAAK/B,MAAMwa,sBAMlG,gBAACtX,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACKoW,IA+EJkB,IAEL,gBAAC3W,EAAA,EAAD,KAhBA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KA5De,WACvB,GAA6C,IAAzC,EAAKnD,MAAMwX,mBAAmBtX,OAC9B,OACI,gBAACmD,EAAA,EAAD,oEAMR,IAAIoU,EAAkB,EAAKzX,MAAMwX,mBAAmB9X,KAAI,SAAApB,GACpD,IAAI8K,EAaJ,OAZAA,EAAO9K,EAAE8K,KAAK1J,KAAI,SAAApB,GACd,MAAO,CACHyI,YAAazI,EAAEyI,YACfF,MAAOvI,EAAEuI,MACToC,WAAY3K,EAAE2K,WACdD,cAAe1K,EAAE0K,cACjBE,cAAe5K,EAAE4K,cACjBC,YAAa7K,EAAE6K,YACf7C,wBAAyBhI,EAAEgI,4BAK/B,gBAACvC,EAAA,EAAD,KACI,gBAACb,EAAA,EAAD,CAAM/C,UAAU,WACZ,gBAACgD,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QAClB,gBAACkD,EAAA,EAAD,cAAgB,8BAAS/E,EAAEoZ,gBAAgBpR,wBAA0B,GAArD,aAChB,gBAACjD,EAAA,EAAD,qBAAuB,8BAAS/E,EAAEkV,oBAAsB,EAAjC,YAE3B,gBAACzP,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,cAClB,qBAAGA,UAAU,UAAU8B,QAAS,kBAAM,EAAKjC,MAAM2X,yBAAyBrZ,EAAEsZ,QACxE,gBAAC,KAAD,CAAiBd,KAAMe,UAInC,gBAAC/T,EAAA,EAAD,KACI,gBAAC,GAAD,CACIgS,SAAU1M,EACV0O,mBAAoBxZ,EAAE8K,KAAKlJ,OAC3B6X,SAAUxS,KAAKC,MAAMlH,EAAE8K,KAAKlJ,OAAS,YAQjE,OACI,gBAAC4D,EAAA,EAAD,CAAKE,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAClBkT,GASIO,W,GA/GsBjX,iBCuIhC2Z,G,uKAtJM,IAAD,OAuIZ,OACI,gBAAC,WAAD,KACI,gBAAC5W,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aAlEI,WAClC,IAAIoZ,EAxESoB,EAAyBC,EAAwBC,EAsF9D,OAbI,EAAK7a,MAAMiO,UACXsL,EACI,uBAAKpZ,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,cA5EdwM,EAiFL,EAAK3a,MAAM8a,mBAAmBnR,YAAY5C,YAjFZ6T,EAkF9B,EAAK5a,MAAM8a,mBAAmBjR,WAAW9C,YAlFa8T,EAmFtD,EAAK7a,MAAM8a,mBAAmBlR,YAAY7C,YAH9CwS,EA9EA,gBAAC,KAAD,CAAqB3D,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAM,EAAKpJ,MAAM8a,mBAAmBtR,OACpCuM,OAAQ,CACJC,KAAM,GACNrT,MAAO,IAGX,gBAAC,KAAD,CAAe4T,OAAO,YACtB,gBAAC,KAAD,MAEA,gBAAC,KAAD,CACIN,QAAQ,cACRC,OAAQ,GACR6E,QAAS,CAAE/E,KAAM,GAAIrT,MAAO,IAC5BqX,MAAM,cACNC,cAAe,SAACpM,GAAD,OAAWtI,KAAKC,MAAMqI,EAAQ,IAC7CyI,OAAQ,CAAC,KAAS,MAClB0E,MAAO,CAAC,KAAS,KAAS,KAAS,MACnC9d,KAAK,WACT,gBAAC,KAAD,CACIiZ,QAAQ,OACRC,YAAY,OACZ6D,cAAe,SAACpM,GAAD,OAAoB,IAARA,EAAe,KAC1CyI,OAAQ,CAAC,EAAG,GACZ0E,MAAO,CAAC,EAAG,EAAG,GACd9d,KAAK,SACL8c,MAAO,CACHnM,MAAO,WACPoN,OAAQ,GACRC,SAAU,SACVC,IAAK,MAEb,gBAAC,KAAD,CACIhF,QAAQ,QACRC,YAAY,QACZ4D,MAAO,CACHnM,MAAO,sBACPoN,MAAO,GACPC,SAAU,SACVC,GAAI,MAGZ,gBAAC,KAAD,CACIhF,QAAQ,OACRiF,GAAI,KACJC,GAAIT,GAAkBD,EAAkBC,GAAkB,EAC1DU,GAAI,EAAGC,GAAI,EACXzB,KAAK,YACT,gBAAC,KAAD,CACI3D,QAAQ,OACRiF,GAAIR,GAAkBD,EAAkBC,GAAkB,EAC1DS,GAAIV,GAAmBE,EAAkBF,GAAmB,EAC5DW,GAAI,EAAGC,GAAI,EACXzB,KAAK,YACT,gBAAC,KAAD,CACI3D,QAAQ,OACRiF,GAAIT,GAAmBE,EAAkBF,GAAmB,EAC5DU,GAAI,KACJC,GAAI,EAAGC,GAAI,EACXzB,KAAK,YAET,gBAAC,KAAD,CAAMvZ,KAAK,WAAW0V,QAAQ,UAAUE,QAAQ,OAAOjZ,KAAK,WAAWqZ,OAAO,UAAUC,KAAK,IAC7F,gBAAC,KAAD,CAAMjW,KAAK,sBAAsB0V,QAAQ,cAAcE,QAAQ,QAAQjZ,KAAK,WAAWsZ,KAAK,OAsBpG,gBAACtT,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACKoW,IAiDAiC,IAEL,gBAACzX,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,sBA7CX,WACnB,IAAIoZ,EA6BJ,OA3BIA,EADA,EAAKvZ,MAAMiO,UAEP,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAKnB,gBAAC,WAAD,KACI,gBAACrK,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACX,EAAA,EAAD,mBAAqB,8BAAS,EAAKrD,MAAMwa,qBAE7C,gBAACzW,EAAA,EAAD,CAAKC,GAAG,KACJ,uBAAKlC,IAAK4T,GAA6B,EAAK1V,MAAMwa,mBAAoBzY,IAAK,EAAK/B,MAAMwa,sBAI9F,2BACA,gBAACnX,EAAA,EAAD,KACI,6CAEJ,gBAACA,EAAA,EAAD,kBAAyE,IAApD,EAAKrD,MAAM8a,mBAAmBnR,YAAYF,QAA/D,KACA,gBAACpG,EAAA,EAAD,6BAAgC,EAAKrD,MAAM8a,mBAAmBnR,YAAYD,aAC1E,gBAACrG,EAAA,EAAD,qBAAwBkC,KAAKC,MAAM,EAAKxF,MAAM8a,mBAAmBnR,YAAY5C,YAAc,GAA3F,WAKR,gBAAC7D,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACKoW,IAaAkC,U,GA/IyB1a,iBC6KnC2a,G,uKA9IM,IAAD,OAkHZ,OACI,gBAACtb,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,mDAEJ,gBAAC2D,EAAA,EAAD,CAAK3D,UAAU,uBACX,gBAAC,GAAD,CACIgS,OAAQ,CACJ,oBACA,wBACA,qBACA,iBACA,mBACA,mBACA,sBAEJE,QAAStS,KAAKC,MAAM2b,YAAc,KAxGf,IAA3B,EAAK3b,MAAM2b,YAEP,gBAAC,GAAD,CACI1M,kBAAmB,EAAKjP,MAAMiO,UAC9BzO,mBAAoB,EAAKQ,MAAMR,mBAC/BsO,mBAAoB,EAAK9N,MAAM8N,qBAKZ,IAA3B,EAAK9N,MAAM2b,YAEP,gBAAC,GAAD,CACInI,oBAAqB,EAAKxT,MAAMwT,oBAChCE,sBAAuB,EAAK1T,MAAM0T,wBAKf,IAA3B,EAAK1T,MAAM2b,YAEP,gBAAC,GAAD,CACI/H,mBAAoB,EAAK5T,MAAM4T,mBAC/BC,uBAAwB,EAAK7T,MAAM6T,yBAKhB,IAA3B,EAAK7T,MAAM2b,YAEP,gBAAC,GAAD,CACIvE,aAAc,EAAKpX,MAAMoX,aACzBE,iBAAkB,EAAKtX,MAAMsX,iBAC7BQ,mBAAoB,EAAK9X,MAAM8X,mBAE/BN,mBAAoB,EAAKxX,MAAMwX,mBAE/BH,sBAAuB,EAAKrX,MAAMqX,sBAClCM,yBAA0B,EAAK3X,MAAM2X,2BAKlB,IAA3B,EAAK3X,MAAM2b,YAEP,gBAAC,GAAD,CACI1N,UAAW,EAAKjO,MAAMiO,UACtBuJ,mBAAoB,EAAKxX,MAAMwX,mBAC/BgC,gBAAiB,EAAKxZ,MAAMwZ,gBAE5BnC,sBAAuB,EAAKrX,MAAMqX,wBAKf,IAA3B,EAAKrX,MAAM2b,YAEP,gBAAC,GAAD,CACI1N,UAAW,EAAKjO,MAAMiO,UAEtB2N,gBAAiB,EAAK5b,MAAM4b,gBAC5BC,aAAc,EAAK7b,MAAM6b,aACzBrI,oBAAqB,EAAKxT,MAAMwT,oBAChCgH,kBAAmB,EAAKxa,MAAMwa,kBAE9BlD,iBAAkB,EAAKtX,MAAMsX,iBAC7BQ,mBAAoB,EAAK9X,MAAM8X,mBAE/BN,mBAAoB,EAAKxX,MAAMwX,mBAE/B9D,sBAAuB,EAAK1T,MAAM0T,sBAClCiE,yBAA0B,EAAK3X,MAAM2X,2BAKlB,IAA3B,EAAK3X,MAAM2b,YAEP,gBAAC,GAAD,CACI1N,UAAW,EAAKjO,MAAMiO,UAEtB6M,mBAAoB,EAAK9a,MAAM8a,mBAC/BN,kBAAmB,EAAKxa,MAAMwa,yBAN1C,EAgCI,gBAAC1W,EAAA,EAAD,KArIW,WACf,IASIgY,EAR4B,IAA3B,EAAK9b,MAAM2b,aAAuD,KAAlC,EAAK3b,MAAM4b,gBAAgBve,IAChC,IAA3B,EAAK2C,MAAM2b,aAAqB,EAAK3b,MAAMwT,oBAAsB,GACtC,IAA3B,EAAKxT,MAAM2b,aACgB,IAA3B,EAAK3b,MAAM2b,aAAqB,EAAK3b,MAAMwX,mBAAmBtX,OAAS,GAC5C,IAA3B,EAAKF,MAAM2b,aACgB,IAA3B,EAAK3b,MAAM2b,aAAqB,EAAK3b,MAAMwX,mBAAmBtX,OAAS,GAC5C,IAA3B,EAAKF,MAAM2b,YAGZ,gBAAC9M,GAAA,EAAD,CACIV,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS,EAAKjC,MAAM+b,iBACK,IAA3B,EAAK/b,MAAM2b,YAAoB,cAAgB,YANzB,GAQ5B,OACI,gBAAC,WAAD,KACKG,GAkHAE,S,GAxIiBjb,iBCKhCkb,G,kDACF,WAAYjc,GAAkC,IAAD,8BACzC,cAAMA,IAEDpB,MAAQ,CACT+c,YAAa,EACb1N,WAAW,EACXiO,mBAAoB,EAEpBC,4BAA6B,GAC7BP,gBAAiB,CACbve,GAAI,GACJkD,KAAM,GACN/B,SAAU,GACV4L,SAAU,GACVC,MAAO,GACPJ,WAAW,EACXK,MAAO,IAEXuR,cAAe,EACfzE,aAAc,EACd5D,oBAAqB,KACrBgH,kBAAmB,GACnB5G,mBAAoB,EAEpB7H,SAAU,EACVqQ,eAAgB,GAChB9E,iBAAkB,CACdvQ,YAAa,EACbF,MAAO,EACPoC,WAAY,EACZD,eAAe,EACfE,eAAe,EACfC,aAAa,EACb7C,wBAAyB,GAE7BwR,mBAAoB,EACpBuE,kBAAkB,EAElBC,cAAc,EACd9E,mBAAoB,GACpB+E,2BAA4B,GAC5B/C,gBAAiB,CACbpQ,KAAM,GACNsO,gBAAiB,CACbvR,OAAQ,EACRE,WAAY,EACZC,wBAAyB,GAE7BQ,UAAW,GACX0M,oBAAqB,EACrBoE,KAAM,IAEVkD,mBAAoB,CAChBtR,OAAQ,GACRG,YAAa,CACT5C,YAAa,EACb0C,QAAS,EACTC,YAAa,GAEjBE,YAAa,CACT7C,YAAa,EACb0C,QAAS,EACTC,YAAa,GAEjBG,WAAY,CACR9C,YAAa,EACb0C,QAAS,EACTC,YAAa,KAKzB,EAAKyF,eAAe,EAAKnP,OAEzBwc,aAAY,WACJ,EAAK5d,MAAMmN,SAAW,GACtB,EAAKnN,MAAMyd,mBAEX,EAAK3a,SAAS,CACV2a,kBAAkB,IAGtB,EAAKI,kCAEL1L,GACKK,gBAAgB,EAAKxS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMmN,SAClGwD,MAAK,SAAC2I,GACH,IAAIkE,EAAiB,EAAKxd,MAAMwd,eAC5B9E,EAAmB,EAAK1Y,MAAM0Y,iBAC9BQ,EAAqB,EAAKlZ,MAAMkZ,mBAEhCwE,EAAe,EAAK1d,MAAM0d,aAC1B9E,EAAqB,EAAK5Y,MAAM4Y,mBAEhChP,MAAMgH,QAAQ0I,IACdA,EAAOzI,SAAQ,SAAAnR,GAGX,GAAIA,EAAE6K,cAAgBmT,EAAc,CAIhC,IAHA,IAAIlT,EAAwB,GACxBsT,EAAiBnX,KAAKoX,IAAIP,EAAelc,OAAQ5B,EAAEgI,yBAE9CI,EAAI0V,EAAelc,OAASwc,EAAgBhW,EAAI0V,EAAelc,OAAQwG,IAC5E0C,EAAKzJ,KAAKyc,EAAe1V,IAG7B,IAAIkW,EAAY,CACZxT,KAAMA,EACNsO,gBAAiB,CACbvR,OAAQ,EACRE,WAAY,EACZC,wBAAyB,GAE7BQ,UAAW,EAAKlI,MAAM4b,kBACtBhH,oBAAqB,EAAK5U,MAAM4U,oBAChCoE,MAAO,IAAIzW,MAAQgJ,YAGvBqN,EAAqBA,EAAmBrY,OAAOyd,GAqBnD,IAjBKte,EAAE6K,aAAemT,GAClBrM,GACKC,mBAAmB,EAAKtR,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACrGtM,MAAK,SAACjR,GACH,IAAIse,EAAYpF,EAAmBA,EAAmBtX,OAAS,GAC3DwX,EAAkBkF,EAAUlF,gBAEhCA,EAAgBvR,OAAS7H,EAAE6H,OAC3BuR,EAAgBpR,wBAA0BhI,EAAEgI,wBAC5CsW,EAAUlF,gBAAkBA,EAC5BkF,EAAU9V,UAAY,EAAKlI,MAAM4b,kBAEjChD,EAAmBA,EAAmBtX,OAAS,GAAK0c,KAK5Dte,EAAE6K,YAAa,CACf,IAAIyT,EAAYpF,EAAmBA,EAAmBtX,OAAS,GAC3DkJ,EAAOwT,EAAUxT,KAErBA,EAAKzJ,KAAKrB,GACVse,EAAUxT,KAAOA,EAEjB,IAAIsO,EAAkBkF,EAAUlF,gBAChCA,EAAgBpR,wBAA0BsW,EAAUxT,KAAKlJ,OACzD0c,EAAUlF,gBAAkBA,EAE5BF,EAAmBA,EAAmBtX,OAAS,GAAK0c,GAGxDR,EAAiBA,EAAejd,OAAOb,IACxBma,OAAO,EAAG2D,EAAelc,OA9JrC,IA+JHoX,EAAmBhZ,EACnBwZ,IAEAwE,EAAehe,EAAE6K,eAIzB,EAAKzH,SAAS,CACV0a,eAAgBA,EAChB9E,iBAAkBA,EAClBQ,mBAAoBA,EACpBuE,kBAAkB,EAElBC,aAAcA,EACd9E,mBAAoBA,UA5KN,KAGO,E,2DAgL9BxX,GAAkC,IAAD,OAC5CA,EAAMhC,8BACN+B,KAAK2B,SAAS,CACVuM,WAAW,IAGfqB,GACKxC,cACAyC,MAAK,SAAAzF,GACEtB,MAAMgH,QAAQ1F,IACdA,EAAI2F,SAAQ,SAAC3R,GACTkC,EAAMnC,wBAAwBC,GAE9BA,EAAG2B,SAASgQ,SAAQ,SAACpB,GAAD,OAChBrO,EAAM/B,cAAcoQ,EAAGvQ,EAAGT,UAKtC,EAAKqE,SAAS,CACVuM,WAAW,S,wDAM8B,IAAjDlO,KAAKnB,MAAM2d,2BAA2Brc,QAI1CH,KAAK2B,UAAS,SAAC9C,EAAeoB,GAC1B,MAAO,CACHwX,mBACI5Y,EAAM4Y,mBACDpY,QAAO,SAAAd,GAAC,OAAKM,EAAM2d,2BACfM,MAAK,SAAAC,GAAC,OAAIA,IAAMxe,EAAEsZ,WAC/B2E,2BAA4B,S,+BAKvB,IAAD,OA4BNQ,EAAgC,SAAC9R,EAA6B7C,EAAmBsC,EAAc3D,GAC/E,KAAdqB,IAA8B,IAAVsC,IAIpB,EAAK9L,MAAMsd,kBAAoB,GAC/Bc,OAAOC,aAAa,EAAKre,MAAMsd,mBAEnC,EAAKxa,SAAS,CACVwa,kBAAmBnW,WAAWgH,EAnQN,IAmQ+D9B,EAAqB7C,EAAWsC,EAAM3D,OAI/HgG,EAAyB,SAAC9B,EAA6B7C,EAAmBsC,EAAc3D,GAC1FuI,GAAevC,uBAAuB9B,EAAqB7C,EAAWsC,EAAM3D,IAiIhF,OACI,gBAAC,GAAD,CACI4U,YAAa5b,KAAKnB,MAAM+c,YACxB1N,UAAWlO,KAAKnB,MAAMqP,UAEtBzO,mBAAoBO,KAAKC,MAAMR,mBAC/BsO,mBAhLmB,SAAC7C,EAA6B/M,EAA+BwM,EAAcrD,GAClG,EAAK3F,SAAS,CACVya,4BAA6BlR,EAC7B2Q,gBAAiB1d,EACjB2d,aAAcnR,EACd0M,aAAc/P,IAGlB0V,EAA8B9R,EAAqB/M,EAAQb,GAAIqN,EAAM,EAAK9L,MAAM4U,sBAyK5EE,sBAtKsB,SAAC7F,GAC3B,IAAIqP,EAAS7L,GAAYxD,GAAQ,GAE7BqP,EAAS,IAIbA,GAAU,EAEV,EAAKxb,SAAS,CACV8R,oBAAqB0J,IAGzBH,EAA8B,EAAKne,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,aAAcqB,KA0J1H7F,sBAtIsB,SAACxJ,GAC3B,EAAKnM,SAAS,CACV8Y,kBAAmB3M,KAqInBgG,uBAjIuB,SAAChG,GAC5B,IAAIqP,EAAS7L,GAAYxD,GAAQ,GAE7BqP,EAAS,GAIb,EAAKxb,SAAS,CACVkS,mBAAoBsJ,KA0HpBvF,yBAtHyB,SAAC9J,GAC9B,EAAKnM,UAAS,SAAC9C,EAAeoB,GAC1B,MAAO,CACHuc,2BAA4B3d,EAAM2d,2BAA2Bpd,OAAO0O,QAoHxEkO,gBA/GgB,WACpB,IAAIhQ,EAAU,EAAKnN,MAAMmN,QAUzB,IARiB,IAAbA,IACA,EAAKrK,SAAS,CACVqK,SAAU,IAEdgF,GAAYI,iBAAiB,EAAKvS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI0O,IAIzE,IAA3B,EAAKnN,MAAM+c,YACX,EAAKja,SAAS,CACVia,YAAa,SAGhB,GAA+B,IAA3B,EAAK/c,MAAM+c,YAChB,EAAKja,SAAS,CACVia,YAAa,SAGhB,GAA+B,IAA3B,EAAK/c,MAAM+c,YAChB,EAAKja,SAAS,CACVia,YAAa,EACb7D,mBAAoB,EAEpBwE,cAAc,EACd9E,mBAAoB,KAGxBzG,GACKG,kBAAkB,EAAKtS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACpGtM,MAAK,SAAC1B,GACH,EAAKnM,SAAS,CACVqK,QAAS8B,YAIpB,GAA+B,IAA3B,EAAKjP,MAAM+c,YAChB,EAAKja,SAAS,CACVia,YAAa,EACb1N,WAAW,IAGf0C,GACKE,iCAAiC,EAAKjS,MAAM4Y,oBAC5CjI,MAAK,SAAC1B,GACH,EAAKnM,SAAS,CACVuM,WAAW,EACXuL,gBAAiB3L,YAI5B,GAA+B,IAA3B,EAAKjP,MAAM+c,YAChB,EAAKja,SAAS,CACVia,YAAa,EACb7D,mBAAoB,EAEpBwE,cAAc,EACd9E,mBAAoB,KAGxBzG,GACKG,kBAAkB,EAAKtS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACpGtM,MAAK,SAAC1B,GACH,EAAKnM,SAAS,CACVqK,QAAS8B,YAIpB,GAA+B,IAA3B,EAAKjP,MAAM+c,YAAmB,CACnC,EAAKja,SAAS,CACVia,YAAa,EACb1N,WAAW,IAGf,IAAIjC,EAAa,EAAKpN,MAAM4Y,mBAAmB9X,KAAI,SAAApB,GAE/C,OADAA,EAAEoZ,gBAAgBpR,yBAA2D,GAAhC,EAAK1H,MAAMgV,mBACjDtV,KAGXqS,GACKG,mCAAmC9E,GACnCuD,MAAK,SAAC1B,GACH,EAAKnM,SAAS,CACVuM,WAAW,EACX6M,mBAAoBjN,YAIA,IAA3B,EAAKjP,MAAM+c,cAChB,EAAKja,SAAS,CACVia,YAAa,EACb1N,WAAW,IAGf,EAAKkB,eAAe,EAAKnP,SAiBzB4b,gBAAiB7b,KAAKnB,MAAMgd,gBAC5BC,aAAc9b,KAAKnB,MAAMid,aACzBzE,aAAcrX,KAAKnB,MAAMwY,aACzB5D,oBAAqBzT,KAAKnB,MAAM4U,oBAChCgH,kBAAmBza,KAAKnB,MAAM4b,kBAC9B5G,mBAAoB7T,KAAKnB,MAAMgV,mBAE/B0D,iBAAkBvX,KAAKnB,MAAM0Y,iBAC7BQ,mBAAoB/X,KAAKnB,MAAMkZ,mBAE/BN,mBAAoBzX,KAAKnB,MAAM4Y,mBAC/BgC,gBAAiBzZ,KAAKnB,MAAM4a,gBAC5BsB,mBAAoB/a,KAAKnB,MAAMkc,yB,GA9Zb/Z,iBC/CnBkb,GDydAtM,aANS,SAAC/Q,GACrB,MAAO,CACHY,mBAAoBZ,EAAMV,QAAQsB,sBAMtCsQ,EAFWH,CAGbsM,I,+EE5dakB,G,uKCYM,IAAD,OAiDRC,EAAa7X,KAAK8X,KAAKtd,KAAKC,MAAMsd,cAAgBvd,KAAKC,MAAMqL,UAC7D6G,EAjDa,SAAC9G,EAAoBgS,GAClC,IAAIlL,EAAQ,GA4CZ,OA1CAA,EAAMvS,KACF,gBAAC4d,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CACIC,OAAK,EACL1O,SAAyB,IAAf3D,EACVnJ,QAAS,kBAAM,EAAKjC,MAAM0d,gBAAgB,QAGtDxL,EAAMvS,KACF,gBAAC4d,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CACIG,UAAQ,EACR5O,SAAyB,IAAf3D,EACVnJ,QAAS,EAAKjC,MAAM4d,4BAIhC1L,EAAMvS,KAAK,IAAI6I,MAAM4U,GAAYtD,KAAK,GAAGpa,KAAI,SAACme,EAAMzL,GAAP,OACzC,gBAACmL,GAAA,EAAD,CAAgB7c,OAAQ0K,IAAegH,EAAQ,GAC3C,gBAACoL,GAAA,EAAD,CAAgBvb,QAAS,kBAAM,EAAKjC,MAAM0d,gBAAgBtL,EAAQ,KAC7DA,EAAQ,QAKrBF,EAAMvS,KACF,gBAAC4d,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CACIM,MAAI,EACJ/O,SAAU3D,IAAegS,EACzBnb,QAAS,EAAKjC,MAAM+d,wBAGhC7L,EAAMvS,KACF,gBAAC4d,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CACIQ,MAAI,EACJjP,SAAU3D,IAAegS,EACzBnb,QAAS,kBAAM,EAAKjC,MAAM0d,gBAAgBN,QAI/ClL,EAIC+L,CAASle,KAAKC,MAAMoL,WAAYgS,GAE5C,OACI,gBAACc,GAAA,EAAD,KACKhM,O,GAvDWnR,iBCNtBod,G,uKAME,IAAIC,EAAcre,KAAKC,MAAM8V,SAASpW,KAAI,SAACpB,GACvC,MAAO,CAAEuI,MAAOvI,MAIpB,OACI,gBAAC,KAAD,CAAqBsX,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAMgV,EACNrI,OAAQ,CACJC,MAAO,GACPrT,MAAO,IAGX,gBAAC,KAAD,CACIsT,QAAQ,OACRC,OAAQ,IACZ,gBAAC,KAAD,CACIC,QAAQ,OACRC,YAAY,OACZE,OAAQ,CAAC,OAAQ,UAErB,gBAAC,KAAD,CAAML,QAAQ,QAAQE,QAAQ,OAAOjZ,KAAK,WAAWsZ,KAAK,U,GA5B9CzV,iBAA1Bod,GACYE,aAAe,CACzBC,YAAY,GAiCLH,ICxCAA,GDwCAA,GEgLAI,G,kDAtLX,WAAYve,GAAkC,IAAD,8BACzC,cAAMA,IAEDpB,MAAQ,CACT4f,iBAAiB,EACjBC,qBAAsB,GALe,E,qDAS5B,IAAD,OA8ENC,EAAoB,SAAClR,EAAwDnQ,GAC/EmQ,EAAMmR,iBAEN,EAAKjd,SAAS,CACV+c,oBAAqBphB,EACrBmhB,iBAAiB,KAWnBI,EAA0B,WAC5B,EAAKld,SAAS,CACV8c,iBAAiB,KAInBK,EAAoB,WACtBC,EAAaC,SAeXD,EAAeE,SAASC,cAAc,SAK5C,OAJAH,EAAaI,aAAa,OAAQ,QAClCJ,EAAaI,aAAa,SAAU,QACpCJ,EAAaK,iBAAiB,UAfH,SAAC1L,GACxB,IAAI2L,EAAQ3L,EAAE7F,OAEd,GAAIwR,EAAMC,MAAO,CACb,IAAI9T,EAAO6T,EAAMC,MAAM,GACnBC,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQjU,GAExB,EAAKvL,MAAMwQ,gBAAgB8O,OAU/B,gBAAClf,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,KACI,2DAEJ,gBAACA,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC0O,GAAA,EAAD,CACI4Q,SAAO,EACPtR,MAAM,UACNW,KAAK,KACL3O,UAAU,OACV,gBAACQ,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,MAAMW,GAAG,qCACnC,gBAAC,KAAD,CAAiBgW,KAAM4I,OAD3B,gBAIJ,gBAAC7Q,GAAA,EAAD,CACI4Q,SAAO,EACPtR,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS4c,GAET,gBAAC,KAAD,CAAiB/H,KAAM6I,OAP3B,YAUJ,gBAAC7b,EAAA,EAAD,CAAK3D,UAAU,QA9Ef,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KArEU,WACtB,GAAI,EAAKrD,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,GAAoC,IAAhC,EAAKnO,MAAMhB,iBACX,OACI,gBAAC,WAAD,KACI,yDACA,gBAAC2B,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,eAAeW,GAAG,qCAAhD,cACA,oCACA,gBAACH,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,eAAe8B,QAAS4c,GAAtD,cACA,kCAIZ,IAnB4B,EAmBtBzQ,EAAU,GAnBY,eAqBR,EAAKpO,MAAMjB,YArBH,yBAqBjB8O,EArBiB,QAsBxBO,EAAQzO,KACJ,0BACI,0BAAKkO,EAAMxQ,IACX,0BACI,gBAAC,GAAD,CACIyY,SAAUjI,EAAMhH,SAGxB,0BAA2B,IAAtBgH,EAAMtN,KAAKL,OAAe,YAAc2N,EAAMtN,MACnD,0BAAKsN,EAAM/G,WACX,0BAAK+G,EAAM9G,YAAc,GACzB,0BAAK8G,EAAM7G,sBAAwB,IACnC,0BACI,gBAACrG,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,oBAAoB8B,QAAS,kBAAM,EAAKjC,MAAMyQ,kBAAkB5C,EAAMxQ,GAAIwQ,EAAMtN,QAC1G,gBAAC,KAAD,CAAiBuW,KAAM8I,KAAYzf,UAAU,QAEjD,qBAAG0f,KAAK,IAAI1f,UAAU,OAAO8B,QAAS,SAACuL,GAAD,OAAWkR,EAAkBlR,EAAOK,EAAMxQ,MAC5E,gBAAC,KAAD,CAAiByZ,KAAMe,KAAY1X,UAAU,YAlBjE,2BAA4C,IArBhB,8BA6C5B,OACI,yBAAOA,UAAU,kBACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,QACA,sBAAIA,MAAM,MAAMxO,UAAU,QAA1B,aACA,sBAAIwO,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,aACA,sBAAIA,MAAM,OAAV,uBACA,sBAAIA,MAAM,OAAV,gBACA,sBAAIA,MAAM,OAAV,aAGR,6BACKP,IAWI0R,OA8Eb,gBAAChc,EAAA,EAAD,KACI,gBAAC,GAAD,CACIwZ,cAAevd,KAAKC,MAAMhB,iBAC1BqM,SAAUtL,KAAKC,MAAMqL,SACrBD,WAAYrL,KAAKC,MAAMoL,WACvBsS,gBAAiB3d,KAAKC,MAAM0d,gBAC5BE,wBAAyB7d,KAAKC,MAAM4d,wBACpCG,oBAAqBhe,KAAKC,MAAM+d,uBAIxC,gBAACgC,GAAA,EAAD,CAAOve,OAAQzB,KAAKnB,MAAM4f,gBAAiB/c,OAAQ,kBAAMmd,MACrD,gBAACoB,GAAA,EAAD,CAAave,OAAQ,kBAAMmd,MAA3B,oBACA,gBAACqB,GAAA,EAAD,6EACA,gBAACC,GAAA,EAAD,KACI,gBAACrR,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUlM,QAAS,kBA5ErD,EAAKjC,MAAMuQ,gBAAgB,EAAK3R,MAAM6f,0BACtC,EAAK/c,SAAS,CACV8c,iBAAiB,MA0ET,WAA4F,IAC5F,gBAAC3P,GAAA,EAAD,CAAQV,MAAM,UAAUlM,QAAS,kBAAM2c,MAAvC,iB,GA/Kc7d,iBCjBhCof,G,kDACF,WAAYngB,GAAkC,IAAD,8BACzC,cAAMA,IAEDpB,MAAQ,CACTqP,WAAW,EACXjP,iBAAkB,EAClBqM,SAAU,GACVD,WAAY,GAGhB,EAAKgV,iBAAiB,EAAKpgB,MAAO,EAAKpB,MAAMwM,YAVJ,E,6DAa5BpL,EAAiCoL,GAAqB,IAAD,OAClEpL,EAAMqgB,sBAENtgB,KAAK2B,SAAS,CACVuM,WAAW,EACX7C,WAAYA,IAGhB6E,GACKI,cAAcjF,EAAYrL,KAAKnB,MAAMyM,UACrCkE,MAAK,SAAAxQ,GACEyJ,MAAMgH,QAAQzQ,IACdA,EAAW0Q,SAAQ,SAACnR,GAAD,OACf0B,EAAMsgB,gBAAgBhiB,MAI9B,EAAKoD,SAAS,CACVuM,WAAW,OAIvBgC,GACKG,kBACAb,MAAK,SAAA1B,GACF,EAAKnM,SAAS,CACV1C,iBAAkB6O,S,+BAKjB,IAAD,OA+DZ,OACI,gBAAC,GAAD,CACI9O,WAAYgB,KAAKC,MAAMjB,WACvBC,iBAAkBe,KAAKnB,MAAMI,iBAC7BqM,SAAUtL,KAAKnB,MAAMyM,SACrBD,WAAYrL,KAAKnB,MAAMwM,WACvB6C,UAAWlO,KAAKnB,MAAMqP,UAEtBsC,gBAtEsB,SAAClT,GAC3B4S,GACKM,gBAAgBlT,GAChBkS,MAAK,kBACF,EAAK6Q,iBACD,EAAKpgB,MACL,EAAKpB,MAAMwM,gBAiEnBoF,gBA7DsB,SAACjF,GAC3B0E,GACKO,gBAAgBjF,GAChBgE,MAAK,kBACF,EAAK6Q,iBACD,EAAKpgB,MACL,EAAKpB,MAAMwM,gBAwDnBqF,kBApDwB,SAACpT,EAAYkD,GACzC,IAAKA,EAAM,CACP,IAAIqX,EAAO,IAAIzW,KACfZ,EAAOqX,EAAK2I,cAGhBtQ,GACKQ,kBAAkBpT,GAClBkS,MAAK,SAAC1B,GACH,IAAIzE,EAAOsE,KAAKgB,UAAUb,GACpB7D,EAAMgT,OAAOwD,IAAIC,gBAAgB,IAAIC,KAAK,CAACtX,KAC7CuX,EAAO3B,SAASC,cAAc,KAClC0B,EAAKd,KAAO7V,EACZ2W,EAAKzB,aAAa,WAAY3e,EAAKqgB,OAAS,QAC5C5B,SAAS6B,KAAKC,YAAYH,GAE1BA,EAAK5B,QAELC,SAAS6B,KAAKE,YAAYJ,OAoC9BjD,gBAhCgB,SAACtS,GACrB,EAAKgV,iBACD,EAAKpgB,MACLoL,IA8BAwS,wBA3BwB,WAC5B,EAAKwC,iBACD,EAAKpgB,MACLuF,KAAKkU,IAAI,EAAG,EAAK7a,MAAMwM,WAAa,KAyBpC2S,oBAtBoB,WACxB,EAAKqC,iBACD,EAAKpgB,MACLuF,KAAKoX,IACDpX,KAAK8X,KAAK,EAAKze,MAAMI,iBAAmB,EAAKJ,MAAMyM,UACnD,EAAKzM,MAAMwM,WAAa,W,GAzGVrK,iBChBnBof,GDsJAxQ,aANS,SAAC/Q,GACrB,MAAO,CACHG,WAAYH,EAAMD,UAAUI,ctFxHN,CAC1BuhB,gBAAiB,SAAC1Z,GAAD,MAA2B,CAAE1J,KAAM,mBAAoBC,OAAQyJ,IAChF2J,gBAAiB,SAAClT,GAAD,MAAiB,CAAEH,KAAM,mBAAoBC,OAAQE,IACtEgjB,oBAAqB,iBAAO,CAAEnjB,KAAM,0BACpC8jB,mBAAoB,SAACxjB,GAAD,MAAqB,CAAEN,KAAM,uBAAwBC,OAAQK,KsFwHtEmS,CAGbwQ,IE4Cac,G,kDAvKX,WAAYjhB,GAAiC,IAAD,sBACxC,cAAMA,GAEN,IAEI+T,EAAaD,KALuB,OAOxC,EAAKlV,MAAQ,CACTmV,WAAYA,EACZmD,cALgB,GAMhBD,mBAPqB,IAHe,E,qDAc3B,IAAD,OACZ,GAA+B,IAA3BlX,KAAKC,MAAM2b,YACX,OAAO,KAGX,IAiCM7N,EAAqB,SAAC7C,EAA6B/M,EAA+BwM,EAAcrD,GAClG,EAAKrH,MAAM8N,mBAAmB7C,EAAqB/M,EAASwM,EAAMrD,GAElE,IAAI4P,EAAqB,GACrBC,EAAgB,GAChBC,EAAmB,EAAKvY,MAAMmV,WAAW7U,MAAK,SAAAZ,GAAC,OAAIA,EAAEgX,WAAahX,EAAE+I,OAASA,UAExDvI,IAArBqY,IACAF,EAAqBE,EAAiB5B,IACtC2B,EAAgBC,EAAiB5W,KACjC,EAAKP,MAAMqX,sBAAsBF,EAAiB/B,WAGtD,EAAK1T,SAAS,CACVuV,mBAAoBA,EACpBC,cAAeA,KA+EvB,OACI,gBAAC,WAAD,KACI,gBAACpT,EAAA,EAAD,CAAK3D,UAAU,QACX,sDAEJ,gBAAC2D,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aA/G1B,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,2BACA,gBAACD,EAAA,EAAD,KAzByB,WACrC,IAAIiQ,EAAW,EAAKtT,MAAMR,mBAAmBE,KAAI,SAAA5B,GAC7C,IAAI2B,EAAW3B,EAAG2B,SAASC,KAAI,SAAA2O,GAC3B,IAAI/D,EAAQ+D,EAAE/D,MAAMlL,QAAO,SAAAqL,GAAC,OAAe,IAAXA,EAAEpD,MAAyB,IAAXoD,EAAEpD,QAElD,OADAgH,EAAE/D,MAAQA,EACH+D,KAGX,OADAvQ,EAAG2B,SAAWA,EACP3B,KAGX,OACI,gBAAC,GAAD,CACImQ,UAAW,EAAKjO,MAAMiO,UACtBzO,mBAAoB8T,EACpBxF,mBAAoBA,IAWXc,OA8GT,gBAAC7K,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QA5D1B,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,sBACA,gBAACQ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACX,EAAA,EAAD,KACI,uDACA,gBAACmL,GAAA,EAAD,CACI+C,aAAc,EAAKvR,MAAMwT,oBAAsB,EAC/C/E,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAM0T,sBAAsBD,EAAE7F,OAAOC,WAGnE,gBAACxK,EAAA,EAAD,KACI,qDACA,gBAACmL,GAAA,EAAD,CACItR,KAAK,SACLuR,SAAU,SAACgF,GAAD,OA9BZ,SAAC5F,GAC3B,EAAK7N,MAAMqX,sBAAsBxJ,GACjC,IAAI/G,EAAY,EAAKlI,MAAMmV,WAAW7U,MAAK,SAAAZ,GAAC,OAAIA,EAAE8W,WAAavH,KAC3DoJ,OAAmCnY,IAAdgI,EAA0B,GAAKA,EAAUyO,IAC9D2B,OAA8BpY,IAAdgI,EAA0B,GAAKA,EAAUvG,KAE7D,EAAKmB,SAAS,CACVuV,mBAAoBA,EACpBC,cAAeA,IAsB0BG,CAAsB5D,EAAE7F,OAAOC,SAvC3D,EAAKjP,MAAMmV,WACvB3U,QAAO,SAAAd,GAAC,OAAIA,EAAE+I,OAAS,EAAKrH,MAAMoX,gBAClC1X,KAAI,SAAApB,GAAC,OACF,0BAAQiZ,SAAUjZ,EAAEgX,WAAYhX,EAAE8W,eAyCtB,gBAAC/R,EAAA,EAAD,KACI,uCACA,gBAACmL,GAAA,EAAD,CACIC,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAMkhB,iBAAiBzN,EAAE7F,OAAOC,YAIlE,gBAAC9J,EAAA,EAAD,CAAKC,GAAG,KACJ,uBAAKlC,IAAK,EAAKlD,MAAMqY,mBAAoBlV,IAAK,EAAKnD,MAAMsY,sBAmCzE,gBAACpT,EAAA,EAAD,KA1BC,EAAK9D,MAAMmhB,cAKZ,gBAACtS,GAAA,EAAD,CACIV,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS,EAAKjC,MAAM+b,iBAJxB,YAJO,S,GAvIkBhb,iBChBnCqgB,G,uKAME,OACI,gBAAC,KAAD,CAAqBxL,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAMrJ,KAAKC,MAAM8V,SACjBC,OAAQ,CACJC,MAAO,GACPrT,OAAQ,KAGZ,gBAAC,KAAD,CAAe4T,OAAO,YAEtB,gBAAC,KAAD,CACIN,QAAQ,OACRC,OAAQ,GACR8D,MAAO,WACPC,cAAe,SAAC5D,GAAD,OAAUjR,GAAYG,KAAKC,MAAM6Q,EAAO,MACvD0B,SAAUhY,KAAKC,MAAM+X,WACzB,gBAAC,KAAD,CACI5B,QAAQ,OACRC,YAAY,OACZE,OAAQ,CAAC,EAAG,OAChB,gBAAC,KAAD,CACIH,QAAQ,QACRC,YAAY,QACZE,OAAQ,CAAC,EAAG,OAEhB,gBAAC,KAAD,CAAML,QAAQ,cAAcE,QAAQ,OAAOjZ,KAAK,WAAWqZ,OAAO,UAAUC,KAAK,IACjF,gBAAC,KAAD,CAAMP,QAAQ,QAAQE,QAAQ,QAAQjZ,KAAK,WAAWsZ,KAAK,U,GAjCvDzV,iBAAlBqgB,GACY/C,aAAe,CACzBC,YAAY,GAsCL8C,ICrDAA,GDqDAA,GEiFAC,G,uKAhHM,IAAD,OACZ,GAA+B,IAA3BthB,KAAKC,MAAM2b,YACX,OAAO,KAsFX,OACI,gBAAC,WAAD,KACI,gBAAC7X,EAAA,EAAD,CAAK3D,UAAU,QACX,sDAEJ,gBAAC2D,EAAA,EAAD,CAAK3D,UAAU,QAvFZ,gBAAC,GAAD,CAAgByW,SAAU,EAAK5W,MAAMsX,oBA0FxC,gBAACxT,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC4D,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QAxFL,WACzB,IAAIiJ,EACJA,EAAO,EAAKpJ,MAAMshB,kBAAkBlY,KAAK1J,KAAI,SAAApB,GACzC,MAAO,CACHyI,YAAazI,EAAEyI,YAAc,EAC7BF,MAAOvI,EAAEuI,MAAQ,GACjBoC,WAAY3K,EAAE2K,WACdD,cAAe1K,EAAE0K,cACjBE,cAAe5K,EAAE4K,cACjBC,YAAa7K,EAAE6K,YACf7C,wBAAyBhI,EAAEgI,4BAInC,IAAIib,EACA,gBAAC,GAAD,CACIzL,SAAU1M,EACV0O,mBAAoB1O,EAAKlJ,OACzB6X,SAAUxS,KAAKC,MAAM4D,EAAKlJ,OAAS,KAGvCshB,EACyE,IAAzE,EAAKxhB,MAAMshB,kBAAkB5J,gBAAgBpR,wBACzC,GACA,gBAACuI,GAAA,EAAD,CACI4Q,SAAO,EACPtR,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS,EAAKjC,MAAMyhB,0BALxB,kBAQR,OACI,gBAACve,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,uBACA,gBAACD,EAAA,EAAD,cAAgB,8BAAS,EAAKrD,MAAMshB,kBAAkB5J,gBAAgBpR,wBAA0B,GAAhF,aAChB,gBAACjD,EAAA,EAAD,gBAAkB,8BAAS,EAAKrD,MAAMshB,kBAAkB5J,gBAAgBvR,OAAtD,YAClB,gBAAC9C,EAAA,EAAD,KAAWke,GACX,gBAACle,EAAA,EAAD,KAAWme,KAkDVE,IAEL,gBAAC3d,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aA9CL,WACzB,IACI2G,EADagN,KACU5U,MAAK,SAAAZ,GAAC,OAAIA,EAAE8W,WAAa,EAAKpV,MAAMwa,qBAC3DvD,OAAmCnY,IAAdgI,EAA0B,GAAKA,EAAUyO,IAElE,OACI,gBAACrS,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,sBACA,gBAACQ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACX,EAAA,EAAD,8BAAiC,EAAKrD,MAAMwT,oBAAsB,EAAlE,UACA,gBAACnQ,EAAA,EAAD,mBAAsB,EAAKrD,MAAMwa,mBACjC,gBAACnX,EAAA,EAAD,cAAoD,IAAnC,EAAKrD,MAAM2hB,aAAazhB,OAAe,YAAc,EAAKF,MAAM2hB,eAErF,gBAAC5d,EAAA,EAAD,CAAKC,GAAG,KACJ,uBAAKlC,IAAKmV,EAAoBlV,IAAK,EAAK/B,MAAMwa,wBA+BrDC,KAGT,gBAAC3W,EAAA,EAAD,KAxBA,gBAAC+K,GAAA,EAAD,CACIV,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS,EAAKjC,MAAM+b,iBAJxB,kB,GAjFyBhb,iBC6C1B6gB,G,uKAnCP,OACI,gBAACxhB,EAAA,EAAD,KACI,gBAAC,GAAD,CACIub,YAAa5b,KAAKC,MAAM2b,YACxB1N,UAAWlO,KAAKC,MAAMiO,UACtBkT,cAAephB,KAAKC,MAAMmhB,cAE1B3hB,mBAAoBO,KAAKC,MAAMR,mBAE/B4X,aAAcrX,KAAKC,MAAMoX,aACzB5D,oBAAqBzT,KAAKC,MAAMwT,oBAEhC1F,mBAAoB/N,KAAKC,MAAM8N,mBAC/B4F,sBAAuB3T,KAAKC,MAAM0T,sBAClC2D,sBAAuBtX,KAAKC,MAAMqX,sBAClC6J,iBAAkBnhB,KAAKC,MAAMkhB,iBAC7BnF,gBAAiBhc,KAAKC,MAAM+b,kBAEhC,gBAAC,GAAD,CACIJ,YAAa5b,KAAKC,MAAM2b,YACxBrE,iBAAkBvX,KAAKC,MAAMsX,iBAC7BgK,kBAAmBvhB,KAAKC,MAAMshB,kBAE9B9N,oBAAqBzT,KAAKC,MAAMwT,oBAChCgH,kBAAmBza,KAAKC,MAAMwa,kBAC9BmH,aAAc5hB,KAAKC,MAAM2hB,aAEzB5F,gBAAiBhc,KAAKC,MAAM+b,gBAC5B0F,yBAA0B1hB,KAAKC,MAAMyhB,gC,GA9BjB1gB,iBCclC8gB,G,kDACF,WAAY7hB,GAAiC,IAAD,8BACxC,cAAMA,IAEDpB,MAAQ,CACT+c,YAAa,EACb1N,WAAW,EACXiO,mBAAoB,EAEpBC,4BAA6B,GAC7BP,gBAAiB,CACbve,GAAI,GACJkD,KAAM,GACN/B,SAAU,GACV4L,SAAU,GACVC,MAAO,GACPJ,WAAW,EACXK,MAAO,IAEXuR,cAAe,EACfzE,cAAe,EACf5D,oBAAqB,KACrBgH,kBAAmB,GACnBmH,aAAc,GAEd5V,SAAU,EACVqQ,eAAgB,GAChB9E,iBAAkB,CACdvQ,YAAa,EACbF,MAAO,EACPoC,WAAY,EACZD,eAAe,EACfE,eAAe,EACfC,aAAa,EACb7C,wBAAyB,GAE7B+V,kBAAkB,EAElBC,cAAc,EACdgF,kBAAmB,CACflY,KAAM,GACNsO,gBAAiB,CACbvR,OAAQ,EACRE,WAAY,EACZC,wBAAyB,GAE7BQ,UAAW,GACX0M,oBAAqB,EACrBoE,KAAM,KAId,EAAKzI,eAAe,EAAKnP,OAEzBwc,aAAY,WACJ,EAAK5d,MAAMmN,SAAW,GACtB,EAAKnN,MAAMyd,mBAEX,EAAK3a,SAAS,CACV2a,kBAAkB,IAGtBtL,GACKK,gBAAgB,EAAKxS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMmN,SAClGwD,MAAK,SAAC2I,GACC1P,MAAMgH,QAAQ0I,IACdA,EAAOzI,SAAQ,SAAAnR,GAGX,GAAIA,EAAE6K,cAAgB,EAAKvK,MAAM0d,aAAc,CAK3C,IAHA,IAAIlT,EAAwB,GACxBsT,EAAiBnX,KAAKoX,IAAI,EAAK/d,MAAMwd,eAAelc,OAAQ5B,EAAEgI,yBAEzDI,EAAI,EAAK9H,MAAMwd,eAAelc,OAASwc,EAAgBhW,EAAI,EAAK9H,MAAMwd,eAAelc,OAAQwG,IAClG0C,EAAKzJ,KAAK,EAAKf,MAAMwd,eAAe1V,IAGxC,IAAIkW,EAAY,CACZxT,KAAMA,EACNsO,gBAAiB,CACbvR,OAAQ,EACRE,WAAY,EACZC,wBAAyB,GAE7BQ,UAAW,GACX0M,oBAAqB,EACrBoE,MAAO,IAAIzW,MAAQgJ,YAGvB,EAAKzI,UAAS,SAAC9C,EAAeoB,GAC1B,MAAO,CACHshB,kBAAmB1E,EACnBN,cAAc,OAMrBhe,EAAE6K,aAAe,EAAKvK,MAAM0d,cAC7BrM,GACKC,mBAAmB,EAAKtR,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACrGtM,MAAK,SAACjR,GACH,EAAKoD,UAAS,SAAC9C,EAAeoB,GAC1B,IAAI4c,EAAYhe,EAAM0iB,kBAClB5J,EAAkBkF,EAAUlF,gBAMhC,OAJAA,EAAgBvR,OAAS7H,EAAE6H,OAC3BuR,EAAgBpR,wBAA0BhI,EAAEgI,wBAGrC,CACHgb,kBAAmB1E,EACnBN,cAAc,SAO9Bhe,EAAE6K,aACF,EAAKzH,UAAS,SAAC9C,EAAeoB,GAC1B,IAAI4c,EAAYhe,EAAM0iB,kBAClBlY,EAAOwT,EAAUxT,KAErBA,EAAKzJ,KAAKrB,GACVse,EAAUxT,KAAOA,EAEjB,IAAIsO,EAAkBkF,EAAUlF,gBAIhC,OAHAA,EAAgBpR,wBAA0BsW,EAAUxT,KAAKlJ,OACzD0c,EAAUlF,gBAAkBA,EAErB,CACH4J,kBAAmB1E,MAK/B,EAAKlb,UAAS,SAAC9C,EAAeoB,GAC1B,IAAIoc,EAAiBxd,EAAMwd,eAAejd,OAAOb,GAGjD,OAFA8d,EAAe3D,OAAO,EAAG2D,EAAelc,OA/IzC,IAiJQ,CACHkc,eAAgBA,EAChB9E,iBAAkBhZ,SAKlC,EAAKoD,SAAS,CACV2a,kBAAkB,UAxJJ,KAGM,E,2DA4J7Brc,GAAiC,IAAD,OAC3CA,EAAMhC,8BACN+B,KAAK2B,SAAS,CACVuM,WAAW,IAGfqB,GACKxC,cACAyC,MAAK,SAAAzF,GACEtB,MAAMgH,QAAQ1F,IACdA,EAAI2F,SAAQ,SAAC3R,GACTkC,EAAMnC,wBAAwBC,GAE9BA,EAAG2B,SAASgQ,SAAQ,SAACpB,GAAD,OAChBrO,EAAM/B,cAAcoQ,EAAGvQ,EAAGT,UAKtC,EAAKqE,SAAS,CACVuM,WAAW,S,+BAKV,IAAD,OA4BN8O,EAAgC,SAAC9R,EAA6B7C,EAAmBsC,EAAc3D,GAC/E,KAAdqB,IAA8B,IAAVsC,IAIpB,EAAK9L,MAAMsd,kBAAoB,GAC/Bc,OAAOC,aAAa,EAAKre,MAAMsd,mBAEnC,EAAKxa,SAAS,CACVwa,kBAAmBnW,WAAWgH,EA/NN,IA+N+D9B,EAAqB7C,EAAWsC,EAAM3D,OAI/HgG,EAAyB,SAAC9B,EAA6B7C,EAAmBsC,EAAc3D,GAC1FuI,GAAevC,uBAAuB9B,EAAqB7C,EAAWsC,EAAM3D,IA8DhF,OACI,gBAAC,GAAD,CACI4U,YAAa5b,KAAKnB,MAAM+c,YACxB1N,UAAWlO,KAAKnB,MAAMqP,UACtBkT,cAAiD,KAAlCphB,KAAKnB,MAAMgd,gBAAgBve,GAE1CmC,mBAAoBO,KAAKC,MAAMR,mBAE/B8X,iBAAkBvX,KAAKnB,MAAM0Y,iBAC7BgK,kBAAmBvhB,KAAKnB,MAAM0iB,kBAE9BlK,aAAcrX,KAAKnB,MAAMwY,aACzB5D,oBAAqBzT,KAAKnB,MAAM4U,oBAChCgH,kBAAmBza,KAAKnB,MAAM4b,kBAC9BmH,aAAc5hB,KAAKnB,MAAM+iB,aAEzB7T,mBAvHmB,SAAC7C,EAA6B/M,EAA+BwM,EAAcrD,GAClG,EAAK3F,SAAS,CACVya,4BAA6BlR,EAC7B2Q,gBAAiB1d,EACjB2d,aAAcnR,EACd0M,aAAc/P,IAGlB0V,EAA8B9R,EAAqB/M,EAAQb,GAAIqN,EAAM,EAAK9L,MAAM4U,sBAgH5EE,sBA7GsB,SAAC7F,GAC3B,IAAIqP,EAAS7L,GAAYxD,GAAQ,GAE7BqP,EAAS,IAIbA,GAAU,EAEV,EAAKxb,SAAS,CACV8R,oBAAqB0J,IAGzBH,EAA8B,EAAKne,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,aAAcqB,KAiG1H7F,sBA7EsB,SAACxJ,GAC3B,EAAKnM,SAAS,CACV8Y,kBAAmB3M,KA4EnBqT,iBAxEiB,SAACrT,GACtB,EAAKnM,SAAS,CACVigB,aAAc9T,KAuEdkO,gBAtDgB,WACpB,IAAIhQ,EAAU,EAAKnN,MAAMmN,SAER,IAAbA,IACA,EAAKrK,SAAS,CACVqK,SAAU,IAEdgF,GAAYI,iBAAiB,EAAKvS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI0O,IAIzE,IAA3B,EAAKnN,MAAM+c,aACX,EAAKja,SAAS,CACVia,YAAa,IAGjB5K,GACKG,kBAAkB,EAAKtS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACpGtM,MAAK,SAAC1B,GACH,EAAKnM,SAAS,CACVqK,QAAS8B,QAIW,IAA3B,EAAKjP,MAAM+c,cAChB,EAAKja,SAAS,CACVia,YAAa,EACb1N,WAAW,IAGf,EAAKkB,eAAe,EAAKnP,SAyBzByhB,yBApEyB,WAC7BxR,GACKS,2BACG,EAAK9R,MAAMud,4BACX,EAAKvd,MAAMgd,gBAAgBve,GAC3B,EAAKuB,MAAMid,aACX,EAAKjd,MAAM+iB,aACX,EAAK/iB,MAAM4b,mBACdjL,MAAK,kBACF,EAAKvP,MAAM8hB,QAAQniB,KAAK,2C,GAxPRoB,iBC3CrB8gB,GD0WAlS,aANS,SAAC/Q,GACrB,MAAO,CACHY,mBAAoBZ,EAAMV,QAAQsB,sBAMtCsQ,EAFWH,CAGbkS,IE7WaE,GCCgB,WAC3B,OACI,kBAACve,EAAD,CACI1C,GAAG,uBACHiC,QAAQ,4BACRC,SAAS,qDACTC,UAAU,mBACVlB,IAAI,iBCRDigB,GCKM,WACb,OACI,gBAAC5hB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,iBAAiB6D,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAC9C,gBAACR,EAAA,EAAD,KACI,gBAACc,GAAD,OAEJ,gBAACd,EAAA,EAAD,KACI,gBAACe,GAAD,OAEJ,gBAACf,EAAA,EAAD,KACI,gBAACke,GAAD,UCsDTC,G,mJAnEa9iB,G,4EAGhB6F,GAAcC,S,gBACdiL,EAAQnK,GAAYmc,a,sCAGNnX,GAAYmX,WAAW/iB,G,OAArC+Q,E,uCAGGA,G,4KAGW/Q,EAAQgM,EAAYC,G,4EAGlCpG,GAAcC,S,gBACd7F,EAAQ2G,GAAYoc,W,sCAGNpX,GAAYoX,SAAShjB,EAAQgM,EAAYC,G,OAAvDhM,E,uCAGGA,G,mLAGchC,G,4EAGjB4H,GAAcC,S,gBACdjI,EAAO+I,GAAYqc,c,sCAGNrX,GAAYqX,YAAYhlB,G,OAArCJ,E,uCAGGA,G,8KAGaA,G,sEAChBgI,GAAcC,S,gBACdc,GAAYhJ,a,sCAGNgO,GAAYhO,WAAWC,G,8KAIbA,G,sEAChBgI,GAAcC,S,gBACdc,GAAYsc,a,sCAGNtX,GAAYsX,WAAWrlB,G,8KAIbI,G,sEAChB4H,GAAcC,S,gBACdc,GAAY5I,a,sCAGN4N,GAAY5N,WAAWC,G,6HCiE1BklB,G,uKAtGM,IAAD,OAkEZ,OACI,gBAACniB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,KACI,4CAEJ,gBAACA,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC0O,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUW,KAAK,KAAK3O,UAAU,OAChD,gBAACQ,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,MAAMW,GAAG,iBACnC,gBAAC,KAAD,CAAiBgW,KAAM4I,OAD3B,iBAKR,gBAAC5b,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAACqiB,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CAAiBC,UAAU,WAA3B,UACA,gBAAClU,GAAA,EAAD,CAAOC,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAM2iB,wBAAwBlP,EAAE7F,OAAOC,YAG5E,gBAAC/J,EAAA,EAAD,CAAK3D,UAAU,QA7Bf,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,uBAA2B,EAAKtD,MAAMV,YAAtC,cACA,gBAAC+D,EAAA,EAAD,KAzDY,WACxB,GAAI,EAAKrD,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAK3B,GAA+B,IAA3B,EAAKnO,MAAMV,YACX,OACI,gBAAC,WAAD,KACI,0CAAuB,gBAACqB,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,eAAeW,GAAG,iBAAhD,cAAoF,sCAIvH,IAhB8B,EAgBxBsN,EAAU,GAhBc,eAkBV,EAAKpO,MAAMX,OAlBD,IAkB9B,2BAAsC,CAAC,IAA5BwO,EAA2B,QAClCO,EAAQzO,KACJ,0BACI,0BAAKkO,EAAMxQ,IACX,0BAAKwQ,EAAMtN,MACX,0BAAKsN,EAAMhG,gBACX,0BACI,gBAAClH,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,oBAAoBW,GAAI,aAAe+M,EAAMxQ,GAAK,WAC5E,gBAAC,KAAD,CAAiByZ,KAAM8L,KAAOziB,UAAU,QAE5C,gBAACQ,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,oBAAoBW,GAAI,aAAe+M,EAAMxQ,GAAK,SAC5E,gBAAC,KAAD,CAAiByZ,KAAM+L,KAAO1iB,UAAU,YA7B9B,8BAmC9B,OACI,yBAAOA,UAAU,kBACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,wBACA,sBAAIA,MAAM,OAAV,aAGR,6BACKP,IAYI0U,OA4Bb,gBAAChf,EAAA,EAAD,KACI,gBAAC,GAAD,CACIwZ,cAAevd,KAAKC,MAAMV,YAC1B+L,SAAUtL,KAAKC,MAAMqL,SACrBD,WAAYrL,KAAKC,MAAMoL,WACvBsS,gBAAiB3d,KAAKC,MAAM0d,gBAC5BE,wBAAyB7d,KAAKC,MAAM4d,wBACpCG,oBAAqBhe,KAAKC,MAAM+d,4B,GAhGhChd,iBCJlBgiB,G,kDACF,WAAY/iB,GAAoB,IAAD,8BAC3B,cAAMA,IACDpB,MAAQ,CACTokB,OAAQ,EACR/U,WAAW,EACX3O,YAAa,EACb+L,SAAU,GACVD,WAAY,EACZhM,OAAQ,IAGZ,EAAK6jB,YAAY,EAAKjjB,MAAO,EAAKpB,MAAMQ,OAAQ,EAAKR,MAAMwM,YAXhC,E,wDAcnBpL,EAAmBZ,EAAgBgM,GAAqB,IAAD,OAC/DpL,EAAM1C,iBAENyC,KAAK2B,SAAS,CACVuM,WAAW,EACX7C,WAAYA,EACZhM,OAAQA,IAGZ8iB,GACKE,SAAShjB,EAAQgM,EAAYrL,KAAKnB,MAAMyM,UACxCkE,MAAK,SAAAlQ,GACEmJ,MAAMgH,QAAQnQ,IACdA,EAAMoQ,SAAQ,SAACnR,GAAD,OACV0B,EAAMhD,WAAWsB,MAIzB,EAAKoD,SAAS,CACVuM,WAAW,OAIvBiU,GACKC,WAAW/iB,GACXmQ,MAAK,SAAA1B,GACF,EAAKnM,SAAS,CACVpC,YAAauO,S,+BAKZ,IAAD,OAkCZ,OACI,gBAAC,GAAD,CACIxO,MAAOU,KAAKC,MAAMX,MAClBC,YAAaS,KAAKnB,MAAMU,YACxB+L,SAAUtL,KAAKnB,MAAMyM,SACrBD,WAAYrL,KAAKnB,MAAMwM,WACvB6C,UAAWlO,KAAKnB,MAAMqP,UAEtByP,gBAzCgB,SAACtS,GACrB,EAAK6X,YACD,EAAKjjB,MACL,EAAKpB,MAAMQ,OACXgM,IAsCAwS,wBAnCwB,WAC5B,EAAKqF,YACD,EAAKjjB,MACL,EAAKpB,MAAMQ,OACXmG,KAAKkU,IAAI,EAAG,EAAK7a,MAAMwM,WAAa,KAgCpC2S,oBA7BoB,WACxB,EAAKkF,YACD,EAAKjjB,MACL,EAAKpB,MAAMQ,OACXmG,KAAKoX,IACDpX,KAAK8X,KAAK,EAAKze,MAAMU,YAAc,EAAKV,MAAMyM,UAC9C,EAAKzM,MAAMwM,WAAa,KAwB5BuX,wBArBwB,SAACvjB,GACzB,EAAKR,MAAMokB,MAAQ,GACnBhG,OAAOC,aAAa,EAAKre,MAAMokB,OAEnC,EAAKthB,SAAS,CACV0J,WAAY,EACZ4X,MAAOjd,WAAW,EAAKkd,YAAYC,KAAK,GA7FlC,IA6FwD,EAAKljB,MAAOZ,EAAQ,Y,GA7E9E2B,iBCtBLgiB,GD8HApT,aANS,SAAC/Q,GACrB,MAAO,CACHS,MAAOT,EAAM3B,KAAKoC,SAMtB8jB,EAFWxT,CAGboT,I,mBEmIaK,G,kDA5OX,WAAYpjB,GAAsB,IAAD,6BAC7B,cAAMA,IAgBDpB,MAAQ,CACT3B,KAfO,CACPI,GAAI,EACJkD,KAAM,GACNoH,WAAY,CACRN,KAAM,EACNC,aAAc,KACdC,oBAAoB,EACpBK,sBAAuB,EACvBH,0BAA0B,EAC1BC,gBAAgB,GAEpBG,eAAgB,IAdS,E,qDAsBhB,IAAD,OAwCNwb,EAAmB,SAACxV,GACtB,IAAIqP,EAAS7L,GAAYxD,EAAO,MAEhC,GAAc,MAAVqP,EAAJ,CAIA,IAAIoG,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ3b,WAAWN,KAAO6V,EAE1B,EAAKxb,SAAS,CACVzE,KAAMqmB,MA8Ed,OACI,gBAACljB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,uCAEJ,gBAAC2D,EAAA,EAAD,KACI,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACF,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAAtB,SACA,gBAAC4D,EAAA,EAAD,KACI,gBAACyK,GAAA,EAAD,CACItR,KAAK,OACLuR,SAAU,SAACgF,GAAD,OAjHzB,SAAC5F,GACtB,IAAIyV,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ/iB,KAAOsN,EAEf,EAAKnM,SAAS,CACVzE,KAAMqmB,IA4G2CpC,CAAiBzN,EAAE7F,OAAOC,YAGvD,gBAAC/J,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAAtB,SACA,gBAAC4D,EAAA,EAAD,KApJX,WACjB,IAAIyf,EtDhDZ,CACIjR,EAAG,OACHC,EAAG,OACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,QACHC,EAAG,QACHC,EAAG,OAEHC,GAAI,KACJC,GAAI,KACJC,GAAI,MACJC,GAAI,OsDmCA,OACI,gBAAC3E,GAAA,EAAD,CAAOtR,KAAK,SAASuR,SAAU,SAACgF,GAAD,OAAO4P,EAAiB5P,EAAE7F,OAAOC,SAC3D4V,OAAOC,QAAQF,GAAO9jB,KAAI,oCAAEY,EAAF,KAAOuN,EAAP,YACvB,0BAAQA,MAAOvN,GAAMuN,OA+IC8V,KAEV,gBAAC7f,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAClB,gBAACyjB,GAAA,EAAD,CACI1mB,KAAK,WACLG,GAAG,yBACH2c,MAAM,uBACNvL,SAAU,SAACgF,GAAD,OAtGd,SAAC5F,GACjC,IAAIyV,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ3b,WAAWJ,mBAAqBsG,EAExC,EAAKnM,SAAS,CACVzE,KAAMqmB,IAiG2CO,CAA4BpQ,EAAE7F,OAAOkW,aAE9D,gBAAC/f,EAAA,EAAD,KACI,gBAACyK,GAAA,EAAD,CACItR,KAAK,OACL6mB,QAAQ,SACRtV,SAAU,SAACgF,GAAD,OAnGpB,SAAC5F,GAC3B,IAAIqP,EAAS7L,GAAYxD,EAAO,MAEhC,GAAc,MAAVqP,EAAJ,CAIAA,GAAU,EAEV,IAAIoG,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ3b,WAAWL,aAAe4V,EAElC,EAAKxb,SAAS,CACVzE,KAAMqmB,KAsF2C5P,CAAsBD,EAAE7F,OAAOC,YAG5D,gBAAC/J,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAClB,gBAACyjB,GAAA,EAAD,CACI1mB,KAAK,WACLG,GAAG,+BACH2c,MAAM,2BACNvL,SAAU,SAACgF,GAAD,OA3FV5F,EA2FgD4F,EAAE7F,OAAOkW,aA1F7F,EAAKpiB,UAAS,SAAAsiB,GAAS,MAAK,CACxB/mB,KAAK,eACE+mB,EAAU/mB,KADb,CAEA0K,WAAW,eACJqc,EAAU/mB,KAAK0K,WADZ,CAENF,yBAA0BoG,UANH,IAACA,MA6FR,gBAAC9J,EAAA,EAAD,KACI,gBAACyK,GAAA,EAAD,CACItR,KAAK,OACLuR,SAAU,SAACgF,GAAD,OApFjB,SAAC5F,GAC9B,IAAIqP,EAAS7L,GAAYxD,EAAO,MAElB,MAAVqP,IAIJ,EAAKld,MAAMikB,yBAAyB/G,GAEpC,EAAKxb,UAAS,SAAAsiB,GAAS,MAAK,CACxB/mB,KAAK,eACE+mB,EAAU/mB,KADb,CAEA0K,WAAW,eACJqc,EAAU/mB,KAAK0K,WADZ,CAENC,qBAAsBsV,WAsEmBgH,CAAyBzQ,EAAE7F,OAAOC,YAG/D,gBAAC/J,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAClB,gBAACyjB,GAAA,EAAD,CACI1mB,KAAK,WACLG,GAAG,2BACH2c,MAAM,4BACNvL,SAAU,SAACgF,GAAD,OAzEd5F,EAyEgD4F,EAAE7F,OAAOkW,aAxEzF,EAAKpiB,UAAS,SAAAsiB,GAAS,MAAK,CACxB/mB,KAAK,eACE+mB,EAAU/mB,KADb,CAEA0K,WAAW,eACJqc,EAAU/mB,KAAK0K,WADZ,CAEND,eAAgBmG,UANG,IAACA,QA6EZ,gBAAC9J,EAAA,EAAD,CAAKC,GAAG,KAjLxB,EAAKhE,MAAMiO,UAEP,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAIvB,EAAKnO,MAAM4G,UAAUvJ,IAAM,EACpB,iCAIP,gBAAC,GAAD,CACIyY,SAAU,EAAK9V,MAAM4G,UAAUC,aA2KnC,gBAAC/C,EAAA,EAAD,KACI,gBAAC+K,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUW,KAAK,KAAK3O,UAAU,MAAM8B,QAAS,WAxE3E,EAAKjC,MAAMsjB,QAAQ,EAAK1kB,MAAM3B,QAwEtB,UAIA,gBAAC4R,GAAA,EAAD,CAAQV,MAAM,UAAUW,KAAK,KAAK3O,UAAU,OACxC,gBAACQ,EAAA,EAAD,CACIC,IAAKC,IACLV,UAAU,iBACVW,GAAG,aAHP,iB,GAlOEC,iBCPpBojB,G,kDACF,WAAYnkB,GAAsB,IAAD,8BAC7B,cAAMA,IAEDpB,MAAQ,CACTwlB,SAAU,GACVnW,WAAW,EACXrH,UAAW,CACPvJ,IAAK,EACLkD,KAAM,GACNsG,MAAO,GACPC,UAAW,GACXC,YAAa,EACbC,sBAAuB,IAZF,E,qDAiBhB,IAAD,OA0BZ,OAAIjH,KAAKnB,MAAMwlB,SAASlkB,OAAS,EACtB,gBAAC,IAAD,CAAUY,GAAIf,KAAKnB,MAAMwlB,WAIhC,gBAAC,GAAD,CACInW,UAAWlO,KAAKnB,MAAMqP,UACtBrH,UAAW7G,KAAKnB,MAAMgI,UAEtBqd,yBAlCyB,SAAC5mB,GAC9B,EAAKqE,SAAS,CACVuM,WAAW,IAGfgC,GACKK,iBAAiBjT,GACjBkS,MAAK,SAAA3I,GACF,EAAKlF,SAAS,CACVuM,WAAW,EACXrH,UAAWA,QAyBnB0c,QApBc,SAACrmB,GACnBilB,GACKllB,WAAWC,GACXsS,MAAK,SAAAjR,GACF,EAAKoD,SAAS,CACV0iB,SAAU,wB,GAvCZrjB,iBChBPojB,GD4EAxU,YACX,KACAwT,EAFWxT,CAGbwU,IEqOaE,G,kDAvRX,WAAYrkB,GAAuB,IAAD,8BAC9B,cAAMA,IAEDpB,MAAQ,CACT3B,KAAM+C,EAAM/C,KACZuhB,iBAAiB,GALS,E,qDASjB,IAAD,OAsDN6E,EAAmB,SAACxV,GACtB,IAAIqP,EAAS7L,GAAYxD,EAAO,MAEhC,GAAc,MAAVqP,EAAJ,CAIA,IAAIoG,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ3b,WAAWN,KAAO6V,EAE1B,EAAKxb,SAAS,CACVzE,KAAMqmB,MAgFR5E,EAAoB,SAAClR,GACvBA,EAAMmR,iBACN,EAAKjd,SAAS,CACV8c,iBAAiB,KAWnBI,EAA0B,WAC5B,EAAKld,SAAS,CACV8c,iBAAiB,KAIzB,OACI,gBAACpe,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,KACI,0BAAK/D,KAAKnB,MAAM3B,KAAKsD,OAEzB,gBAACuD,EAAA,EAAD,CAAK3D,UAAU,QA1If,EAAKH,MAAM/C,KAAK4K,eAAiB,EAC1B,GAIP,gBAACgH,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUW,KAAK,KAAK3O,UAAU,OAChD,qBAAG0f,KAAK,IAAI1f,UAAU,MAAM8B,QAAS,SAACuL,GAAD,OAAWkR,EAAkBlR,KAC9D,gBAAC,KAAD,CAAiBsJ,KAAMe,KAAY1X,UAAU,SADjD,kBAuIJ,gBAAC2D,EAAA,EAAD,KACI,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,gBAACF,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAAtB,SACA,gBAAC4D,EAAA,EAAD,KACI,gBAACyK,GAAA,EAAD,CACItR,KAAK,OACLqU,aAAcxR,KAAKnB,MAAM3B,KAAKsD,KAC9BkO,SAAU,SAACgF,GAAD,OA3IzB,SAAC5F,GACtB,IAAIyV,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ/iB,KAAOsN,EAEf,EAAKnM,SAAS,CACVzE,KAAMqmB,IAsI2CpC,CAAiBzN,EAAE7F,OAAOC,YAGvD,gBAAC/J,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAAtB,SACA,gBAAC4D,EAAA,EAAD,KA5LX,WACjB,IAAIyf,EzDxCZ,CACIjR,EAAG,OACHC,EAAG,OACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,QACHC,EAAG,QACHC,EAAG,OAEHC,GAAI,KACJC,GAAI,KACJC,GAAI,MACJC,GAAI,OyD2BA,OACI,gBAAC3E,GAAA,EAAD,CAAOtR,KAAK,SAASuR,SAAU,SAACgF,GAAD,OAAO4P,EAAiB5P,EAAE7F,OAAOC,SAC3D4V,OAAOC,QAAQF,GAAO9jB,KAAI,oCAAEY,EAAF,KAAOuN,EAAP,YACvB,0BAAQA,MAAOvN,GAAMuN,OAuLC8V,KAEV,2BACA,gBAAC7f,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAClB,gBAACyjB,GAAA,EAAD,CACI1mB,KAAK,WACLG,GAAG,yBACH2c,MAAM,uBACNK,eAAgBta,KAAKnB,MAAM3B,KAAK0K,WAAWJ,mBAC3CkH,SAAU,SAACgF,GAAD,OAlId,SAAC5F,GACjC,IAAIyV,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ3b,WAAWJ,mBAAqBsG,EAExC,EAAKnM,SAAS,CACVzE,KAAMqmB,IA6H2CO,CAA4BpQ,EAAE7F,OAAOkW,aAE9D,gBAAC/f,EAAA,EAAD,KACI,gBAACyK,GAAA,EAAD,CACItR,KAAK,OACL6mB,QAAQ,SACRxS,aAAcxR,KAAKnB,MAAM3B,KAAK0K,WAAWL,aAAe,EACxDmH,SAAU,SAACgF,GAAD,OAhIpB,SAAC5F,GAC3B,IAAIqP,EAAS7L,GAAYxD,EAAO,MAEhC,GAAc,MAAVqP,EAAJ,CAIAA,GAAU,EAEV,IAAIoG,EAAU,EAAK1kB,MAAM3B,KACzBqmB,EAAQ3b,WAAWL,aAAe4V,EAElC,EAAKxb,SAAS,CACVzE,KAAMqmB,KAmH2C5P,CAAsBD,EAAE7F,OAAOC,YAG5D,gBAAC/J,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAClB,gBAACyjB,GAAA,EAAD,CACI1mB,KAAK,WACLG,GAAG,+BACH2c,MAAM,2BACNK,eAAgBta,KAAKnB,MAAM3B,KAAK0K,WAAWF,yBAC3CgH,SAAU,SAACgF,GAAD,OAzHV5F,EAyHgD4F,EAAE7F,OAAOkW,aAxH7F,EAAKpiB,UAAS,SAAAsiB,GAAS,MAAK,CACxB/mB,KAAK,eACE+mB,EAAU/mB,KADb,CAEA0K,WAAW,eACJqc,EAAU/mB,KAAK0K,WADZ,CAENF,yBAA0BoG,UANH,IAACA,MA2HR,gBAAC9J,EAAA,EAAD,KACI,gBAACyK,GAAA,EAAD,CACItR,KAAK,OACLqU,aAAcxR,KAAKnB,MAAM3B,KAAK0K,WAAWC,qBACzC6G,SAAU,SAACgF,GAAD,OAnHjB,SAAC5F,GAC9B,IAAIqP,EAAS7L,GAAYxD,EAAO,MAElB,MAAVqP,GAIJ,EAAKxb,UAAS,SAAAsiB,GAAS,MAAK,CACxB/mB,KAAK,eACE+mB,EAAU/mB,KADb,CAEA0K,WAAW,eACJqc,EAAU/mB,KAAK0K,WADZ,CAENC,qBAAsBsV,UAuGmBgH,CAAyBzQ,EAAE7F,OAAOC,YAG/D,2BACA,gBAAC/J,EAAA,EAAD,CAAKyf,MAAI,EAACpjB,UAAU,QAChB,gBAAC4D,EAAA,EAAD,CAAKO,GAAI,EAAGnE,UAAU,OAClB,gBAACyjB,GAAA,EAAD,CACI1mB,KAAK,WACLG,GAAG,2BACH2c,MAAM,4BACNK,eAAgBta,KAAKnB,MAAM3B,KAAK0K,WAAWD,eAC3C+G,SAAU,SAACgF,GAAD,OA5Gd5F,EA4GgD4F,EAAE7F,OAAOkW,aA3GzF,EAAKpiB,UAAS,SAAAsiB,GAAS,MAAK,CACxB/mB,KAAK,eACE+mB,EAAU/mB,KADb,CAEA0K,WAAW,eACJqc,EAAU/mB,KAAK0K,WADZ,CAEND,eAAgBmG,UANG,IAACA,QAgHZ,gBAAC9J,EAAA,EAAD,CAAKC,GAAG,KAhOxB,EAAKhE,MAAMiO,UAEP,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAIvB,EAAKnO,MAAM4G,UAAUvJ,IAAM,EACpB,iCAIP,gBAAC,GAAD,CACIyY,SAAU,EAAK9V,MAAM4G,UAAUC,aA0NnC,gBAAC/C,EAAA,EAAD,KACI,gBAAC+K,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUW,KAAK,KAAK3O,UAAU,MAAM8B,QAAS,gBA3GnDnD,IAApB,EAAKF,MAAM3B,MAIf,EAAK+C,MAAMsiB,WAAW,EAAK1jB,MAAM3B,QAuGzB,WAIA,gBAAC4R,GAAA,EAAD,CAAQV,MAAM,UAAUW,KAAK,KAAK3O,UAAU,OACxC,gBAACQ,EAAA,EAAD,CACIC,IAAKC,IACLV,UAAU,iBACVW,GAAI,aAAef,KAAKnB,MAAM3B,KAAKI,GAAK,WAH5C,YAOR,gBAAC0iB,GAAA,EAAD,CAAOve,OAAQzB,KAAKnB,MAAM4f,gBAAiB/c,OAAQ,kBAAMmd,MACrD,gBAACoB,GAAA,EAAD,CAAave,OAAQ,kBAAMmd,MAA3B,eACA,gBAACqB,GAAA,EAAD,wEACA,gBAACC,GAAA,EAAD,KACI,gBAACrR,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUlM,QAAS,kBA5GrD,EAAKjC,MAAM5C,WAAW,EAAKwB,MAAM3B,KAAKI,SACtC,EAAKqE,SAAS,CACV8c,iBAAiB,MA0GT,WAA4F,IAC5F,gBAAC3P,GAAA,EAAD,CAAQV,MAAM,UAAUlM,QAAS,kBAAM2c,MAAvC,iB,GAhRG7d,iBCNrBujB,G,kDACF,WAAYtkB,GAAuB,IAAD,sBAE9B,IAAM3C,EAAKgU,IADX,cAAMrR,IACsBA,MAAMukB,MAAMC,OAAjB,GAA+B,GAFxB,OAI9B,EAAK5lB,MAAQ,CACTvB,GAAIA,EACJ4Q,WAAW,EACXwW,uBAAuB,EACvB7d,UAAW,CACPvJ,IAAK,EACLkD,KAAM,GACNsG,MAAO,GACPC,UAAW,GACXC,YAAa,EACbC,sBAAuB,IAI/B,EAAK0d,WAAW,EAAK1kB,MAAO3C,GAlBE,E,uDAqBvB2C,EAAsB3C,GAAa,IAAD,OACzC6kB,GACKG,YAAYhlB,GACZkS,MAAK,SAACjR,GACH0B,EAAMhD,WAAWsB,GAEjB,EAAKoD,SAAS,CACVuM,WAAW,IAGX3P,EAAEqJ,WAAWF,yBACbwI,GACKK,iBAAiBhS,EAAEqJ,WAAWC,sBAC9B2H,MAAK,SAAA3I,GACF,EAAKlF,SAAS,CACV+iB,uBAAuB,EACvB7d,UAAWA,OAKvB,EAAKlF,SAAS,CACV+iB,uBAAuB,S,+BAM1B,IAAD,OAgCZ,GAAI1kB,KAAKnB,MAAMqP,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,IAAMlR,EAAO8C,KAAKC,MAAMX,MAAMH,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO,EAAKuB,MAAMvB,MAE5D,YAAayB,IAAT7B,EACO,iBAIP,gBAAC,GAAD,CACIA,KAAMA,EACNgR,UAAWlO,KAAKnB,MAAM6lB,sBACtB7d,UAAW7G,KAAKnB,MAAMgI,UAEtBqd,yBAlDyB,SAAC5mB,GAC9B,EAAKqE,SAAS,CACV+iB,uBAAuB,IAG3BxU,GACKK,iBAAiBjT,GACjBkS,MAAK,SAAA3I,GACF,EAAKlF,SAAS,CACV+iB,uBAAuB,EACvB7d,UAAWA,QAyCnB0b,WApCiB,SAACrlB,GACtBilB,GACKI,WAAWrlB,GACXsS,MAAK,kBACF,EAAKvP,MAAM8hB,QAAQniB,KAAK,aAAe,EAAKf,MAAMvB,GAAK,eAiC3DD,WA7BiB,SAACC,GACtB6kB,GACK9kB,WAAWC,GACXkS,MAAK,kBACF,EAAKvP,MAAM8hB,QAAQniB,KAAK,uB,GA9ErBoB,iBCtBRujB,GDmIA3U,aACX,SAAC/Q,GAAD,OAA6BA,EAAM3B,OACnCkmB,EAFWxT,CAGb2U,IEzFaK,G,2JA1CqBxd,G,4EAGxBlC,GAAcC,S,gBACdiL,EAAQnK,GAAY4e,qB,sCAGN5Z,GAAY4Z,mBAAmBzd,G,OAA7CgJ,E,uCAGGA,G,oLAGmB9S,EAAI+N,EAAYC,G,4EAGtCpG,GAAcC,S,gBACd7F,EAAQ2G,GAAY6e,iBAAiBxnB,G,sCAIvB2N,GAAY6Z,iBAAiBxnB,EAAI+N,EAAYC,G,OAA3DhM,E,uCAGGA,G,0LAGqBhC,G,4EAGxB4H,GAAcC,S,gBACdjI,EAAO+I,GAAY8e,mBAAmBznB,G,sCAIzB2N,GAAY8Z,mBAAmBznB,G,OAA5CJ,E,uCAGGA,G,yGCzCA8nB,G,uKCOP,IAAMC,EAAS,CAAC,UAAW,WAE3B,OACI,gBAAC,KAAD,KACI,gBAAC,KAAD,KACI,gBAAC,KAAD,CACI5b,KAAMrJ,KAAKC,MAAMoJ,KACjB6M,QAAQ,SAGJlW,KAAKC,MAAMoJ,KAAK1J,KAAI,SAACulB,EAAO7S,GAAR,OAAkB,gBAAC,KAAD,CAAM9R,IAAG,eAAU8R,GAAS0H,KAAMkL,EAAO5S,EAAQ4S,EAAO9kB,oB,GAZzFa,iBCwRlBmkB,G,uKAzPM,IAAD,OACZ,GAAInlB,KAAKC,MAAMmlB,cACX,OACI,uBAAKhlB,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,QAAwBrP,IAApBiB,KAAKC,MAAM/C,KACX,MAAO,iBAGX,IAgCMwe,EAAiB,WACnB,QAAwB3c,IAApB,EAAKkB,MAAM/C,KACX,MAAO,GAGX,IAAImoB,EACA,gBAAC,WAAD,KACI,gBAAC/hB,EAAA,EAAD,cAAiB,EAAKrD,MAAM/C,KAAKI,IACjC,gBAACgG,EAAA,EAAD,8BAAiC,EAAKrD,MAAM/C,KAAK4K,gBAEjD,2BACA,gBAACxE,EAAA,EAAD,cAAiBiP,GAAa,EAAKtS,MAAM/C,KAAK0K,WAAWN,OACxD,EAAKrH,MAAM/C,KAAK0K,WAAWJ,mBACxB,gBAAClE,EAAA,EAAD,8BAC2BkC,KAAKC,MAAM,EAAKxF,MAAM/C,KAAK0K,WAAWL,aAAe,GADhF,UAGA,GAEH,EAAKtH,MAAM/C,KAAK0K,WAAWF,yBACxB,gBAACpE,EAAA,EAAD,6BAC+D,IAArC,EAAKrD,MAAM4G,UAAUrG,KAAKL,OAAe,YAAc,EAAKF,MAAM4G,UAAUrG,MAEtG,IAMRsgB,EACA,EAAK7gB,MAAM/C,KAAK0K,WAAWF,yBACvB,gBAACtE,EAAA,EAAD,CAAUhD,UAAU,sBAChB,gBAAC2D,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKC,GAAG,KACHohB,GAEL,gBAACrhB,EAAA,EAAD,CAAKC,GAAG,UAzDAlF,IAApB,EAAKkB,MAAM/C,KACJ,GAGN,EAAK+C,MAAM/C,KAAK0K,WAAWF,yBAI5B,EAAKzH,MAAMykB,sBAEP,uBAAKtkB,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAKvB,gBAAC,GAAD,CACI2H,SAAU,EAAK9V,MAAM4G,UAAUC,QAZ5B,MAyDH,gBAAC1D,EAAA,EAAD,KACKiiB,GAGb,OACI,gBAACliB,EAAA,EAAD,KACK2d,IAKPwE,EAAiB,WACnB,QAAwBvmB,IAApB,EAAKkB,MAAM/C,KACX,MAAO,GAGX,IAAIqoB,EAAU,EAAKtlB,MAAMT,cAAc8J,QAAQ,SAACC,EAAOhL,GAAR,OAC3CgL,EAAQhL,EAAEuK,SAASH,eAAeW,QAAQ,SAACkc,EAAQlK,GAAT,OACtCkK,GAAgC,IAArBlK,EAAG1S,cAAuB,EAAI,KAC1C,KACJ,GAEC6c,EAAY,EAAKxlB,MAAMT,cAAc8J,QAAQ,SAACC,EAAOhL,GAAR,OAC7CgL,EAAQhL,EAAEuK,SAASH,eAAeW,QAAQ,SAACkc,EAAQlK,GAAT,OACtCkK,GAAgC,IAArBlK,EAAG1S,cAAuB,EAAI,KAC1C,KACJ,GAECW,EAAQgc,EAAUE,EAClBC,EAAoB,IAAVnc,EAAc,EAAIqI,GAAO2T,EAAUhc,EAAS,KAE1D,OACI,gBAACpG,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KAzGY,SAACmiB,EAAiBE,GACtC,IAAMpc,EAAO,CACT,CAAE7I,KAAM,UAAWsN,MAAOyX,GAC1B,CAAE/kB,KAAM,YAAasN,MAAO2X,IAGhC,OAAO,gBAAC,GAAD,CAAoBpc,KAAMA,IAoGpBsc,CAAgBJ,EAASE,GAC1B,gBAACniB,EAAA,EAAD,4BAA8B,8BAASiiB,EAAT,IAAmBhc,EAAnB,KAA4Bmc,EAA5B,UAiG9C,OACI,gBAACrlB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,KACI,0BAAK/D,KAAKC,MAAM/C,KAAKsD,OAEzB,gBAACuD,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC0O,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUW,KAAK,KAAK3O,UAAU,OAChD,gBAACQ,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,MAAMW,GAAI,aAAef,KAAKC,MAAM/C,KAAKI,GAAK,SACxE,gBAAC,KAAD,CAAiByZ,KAAM+L,KAAO1iB,UAAU,SAD5C,gBAKR,gBAAC2D,EAAA,EAAD,CAAK3D,UAAU,aArCKrB,IAApB,EAAKkB,MAAM/C,KACJ,GAGP,EAAK+C,MAAM/C,KAAK0K,WAAWD,eAEvB,gBAAC,WAAD,KACI,gBAAC3D,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QACjBsb,KAEL,gBAAC1X,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aACjBklB,MAOT,gBAAC,WAAD,KACK5J,MAqBT,gBAAC3X,EAAA,EAAD,CAAK3D,UAAU,QApDf,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,sBAA0B,EAAKtD,MAAM2lB,oBAArC,cACA,gBAACtiB,EAAA,EAAD,KAzDY,WACxB,QAAwBvE,IAApB,EAAKkB,MAAM/C,KACX,MAAO,GAEX,GAAI,EAAK+C,MAAM4lB,mBACX,OACI,uBAAKzlB,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,IAX8B,EAW1B+D,EAAQ,GAXkB,eAaV,EAAKlS,MAAMT,eAbD,IAa9B,2BAA8C,CAAC,IAApCsO,EAAmC,QACtCgJ,EAAc,iBAA+F,IAA5EhJ,EAAMhF,SAASH,eAAetJ,QAAO,SAAAd,GAAC,OAAwB,IAApBA,EAAEqK,iBAAqBzI,OAAe,IAAM,KAE3HgS,EAAMvS,KACF,0BACI,0BAAKkO,EAAMxQ,IACX,0BAAK,IAAI8D,KAAK0M,EAAMjF,YAAYid,mBAAmB,UAClD,EAAK7lB,MAAM/C,KAAK0K,WAAWD,eACxB,0BACI,gBAAC,KAAD,CAAiBoP,KAAMC,KAAU5W,UAAW0W,EAAc,WACtD,GAEZ,0BACI,gBAAClW,EAAA,EAAD,CAASC,IAAKC,IAAMV,UAAU,gBAAgBW,GAAI,aAAe,EAAKd,MAAM/C,KAAKI,GAAK,YAAcwQ,EAAMxQ,IACtG,gBAAC,KAAD,CAAiByZ,KAAM8L,KAAOziB,UAAU,YA3B9B,8BAiC9B,OACI,yBAAOA,UAAU,kBACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,MACA,sBAAIA,MAAM,OAAV,iBACC,EAAK3O,MAAM/C,KAAK0K,WAAWD,eACxB,sBAAIiH,MAAM,OAAV,oBAAwC,GAE5C,sBAAIA,MAAM,OAAV,aAGR,6BACKuD,IAYI4T,OAmDb,gBAAChiB,EAAA,EAAD,KACI,gBAAC,GAAD,CACIwZ,cAAevd,KAAKC,MAAM2lB,oBAC1Bta,SAAUtL,KAAKC,MAAMqL,SACrBD,WAAYrL,KAAKC,MAAMoL,WACvBsS,gBAAiB3d,KAAKC,MAAM0d,gBAC5BE,wBAAyB7d,KAAKC,MAAM4d,wBACpCG,oBAAqBhe,KAAKC,MAAM+d,4B,GAlP3Bhd,iBCLvBglB,G,kDACF,WAAY/lB,GAAyB,IAAD,sBAEhC,IAAM3C,EAAKgU,IADX,cAAMrR,IACsBA,MAAMukB,MAAMC,OAAjB,GAA+B,GAFtB,OAIhC,EAAK5lB,MAAQ,CACTvB,GAAIA,EACJuJ,UAAW,CACPvJ,IAAK,EACLkD,KAAM,GACNsG,MAAO,GACPC,UAAW,GACXC,YAAa,EACbC,sBAAuB,GAE3Bme,eAAe,EACfS,oBAAoB,EACpBnB,uBAAuB,EACvBkB,oBAAqB,EACrBta,SAAU,GACVD,WAAY,GAGhB,EAAKsZ,WAAW,EAAK1kB,MAAO3C,GAC5B,EAAK2oB,oBAAoB,EAAKhmB,MAAO3C,EAAI,EAAKuB,MAAMwM,YAvBpB,E,uDA0BzBpL,EAAwB3C,GAAa,IAAD,OAC3C6kB,GACKG,YAAYhlB,GACZkS,MAAK,SAACjR,GACH0B,EAAMimB,YAAYjpB,WAAWsB,GAE7B,EAAKoD,SAAS,CACVyjB,eAAe,IAGnBlV,GACKK,iBAAiBhS,EAAEqJ,WAAWC,sBAC9B2H,MAAK,SAAA3I,GACF,EAAKlF,SAAS,CACV+iB,uBAAuB,EACvB7d,UAAWA,Y,0CAMf5G,EAAwB3C,EAAY+N,GAAqB,IAAD,OACxEpL,EAAMkmB,mBAAmBtoB,yBAEzBuoB,GACKtB,iBAAiBxnB,EAAI+N,EAAYrL,KAAKnB,MAAMyM,UAC5CkE,MAAK,SAAAhQ,GACEiJ,MAAMgH,QAAQjQ,IACdA,EAAckQ,SAAQ,SAACnR,GAAD,OAClB0B,EAAMkmB,mBAAmBzoB,kBAAkBa,MAInD,EAAKoD,SAAS,CACVkkB,oBAAoB,EACpBxa,WAAYA,OAIxB+a,GACKvB,mBAAmBvnB,GACnBkS,MAAK,SAAA1B,GACF,EAAKnM,SAAS,CACVikB,oBAAqB9X,S,+BAKpB,IAAD,OAwBN5Q,EAAO8C,KAAKC,MAAMX,MAAMH,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO,EAAKuB,MAAMvB,MACtDkC,EAAgBQ,KAAKC,MAAMT,cAEjC,OACI,gBAAC,GAAD,CACItC,KAAMA,EACNsC,cAAeA,EACfomB,oBAAqB5lB,KAAKnB,MAAM+mB,oBAChC/e,UAAW7G,KAAKnB,MAAMgI,UAEtByE,SAAUtL,KAAKnB,MAAMyM,SACrBD,WAAYrL,KAAKnB,MAAMwM,WAEvB+Z,cAAeplB,KAAKnB,MAAMumB,cAC1BS,mBAAoB7lB,KAAKnB,MAAMgnB,mBAC/BnB,sBAAuB1kB,KAAKnB,MAAM6lB,sBAElC/G,gBAxCgB,SAACtS,GACrB,EAAK4a,oBACD,EAAKhmB,MACL,EAAKpB,MAAMvB,GAAG8M,WACdiB,IAqCAwS,wBAlCwB,WAC5B,EAAKoI,oBACD,EAAKhmB,MACL,EAAKpB,MAAMvB,GAAG8M,WACd5E,KAAKkU,IAAI,EAAG,EAAK7a,MAAMwM,WAAa,KA+BpC2S,oBA5BoB,WACxB,EAAKiI,oBACD,EAAKhmB,MACL,EAAKpB,MAAMvB,GAAG8M,WACd5E,KAAKoX,IACDpX,KAAK8X,KAAK,EAAKze,MAAM+mB,oBAAsB,EAAK/mB,MAAMyM,UACtD,EAAKzM,MAAMwM,WAAa,W,GAhGnBrK,iBC9BVglB,GDwKApW,aAdS,SAAC/Q,GACrB,MAAO,CACHS,MAAOT,EAAM3B,KAAKoC,MAClBE,cAAeX,EAAMlB,YAAY6B,kBAId,SAACqQ,GACxB,MAAO,CACHqW,YAAapW,YAAmBsT,EAA0BvT,GAC1DsW,mBAAoBrW,YAAmBuW,EAAiCxW,MAIjED,CAGboW,I,IE3KaM,G,uKCUP,IAFA,IAAIjI,EAAc,GAET1X,EAAY,EAAGA,EAAInB,KAAKkU,IAAI1Z,KAAKC,MAAM4c,UAAU1c,OAAQH,KAAKC,MAAM4G,UAAU1G,QAASwG,IAC5F0X,EAAYze,KAAK,CACb0W,KAAM3P,EACNkW,UAAWlW,EAAI3G,KAAKC,MAAM4c,UAAU1c,OAASH,KAAKC,MAAM4c,UAAUlW,GAAK,GAAK,KAC5EE,UAAWF,EAAI3G,KAAKC,MAAM4G,UAAU1G,OAASH,KAAKC,MAAM4G,UAAUF,GAAK,GAAK,OAIpF,OACI,gBAAC,KAAD,CAAqBkP,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAMgV,EACNrI,OAAQ,CACJC,MAAO,GACPrT,MAAO,IAGX,gBAAC,KAAD,CACIsT,QAAQ,OACRC,OAAQ,IACZ,gBAAC,KAAD,MAEA,gBAAC,KAAD,CAAMD,QAAQ,YAAY/Y,KAAK,WAAWsZ,KAAK,IAC/C,gBAAC,KAAD,CAAMP,QAAQ,YAAY/Y,KAAK,WAAWsZ,KAAK,EAAOD,OAAO,kB,GA3BjDxV,iBC+LjBulB,I,8KA9KM,IAAD,OACN7K,EAAiB,WACnB,OACI,gBAACvY,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,uBAA0B,IAAIlC,KAAK,EAAKnB,MAAMtC,YAAYkL,YAAYid,mBAAmB,UACzF,gBAACxiB,EAAA,EAAD,mBAAsB,EAAKrD,MAAM/C,KAAKI,IAEtC,2BACA,gBAACgG,EAAA,EAAD,sBAAyB,EAAKrD,MAAMtC,YAAYmL,SAASR,aACzD,gBAAChF,EAAA,EAAD,cAAiB,EAAKrD,MAAMtC,YAAYmL,SAASN,YAAc,GAE/D,2BACA,gBAAClF,EAAA,EAAD,cAAiBiP,GAAa,EAAKtS,MAAMtC,YAAYiK,WAAWN,OAC/D,EAAKrH,MAAMtC,YAAYiK,WAAWJ,mBAC/B,gBAAClE,EAAA,EAAD,8BAC2BkC,KAAKC,MAAM,EAAKxF,MAAMtC,YAAYiK,WAAWL,aAAe,GADvF,UAGA,GAEH,EAAKtH,MAAMtC,YAAYiK,WAAWF,yBAC/B,gBAACpE,EAAA,EAAD,6BAC0B,EAAKrD,MAAMtC,YAAYiK,WAAWQ,mBAAmB5H,MAE/E,MAgBd8kB,EAAiB,WACnB,IAAI3c,EAAiB,EAAK1I,MAAMtC,YAAYmL,SAASH,eAEjD4c,EAAU5c,EAAetJ,QAAO,SAAAd,GAAC,OAAwB,IAApBA,EAAEqK,iBAAqBzI,OAC5DslB,EAAY9c,EAAexI,OAASolB,EAEpChc,EAAQgc,EAAUE,EAClBC,EAAoB,IAAVnc,EAAc,EAAIqI,GAAO2T,EAAUhc,EAAS,KAE1D,OACI,gBAACpG,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KApBY,SAACmiB,EAAiBE,GACtC,IAAMpc,EAAO,CACT,CAAE7I,KAAM,UAAWsN,MAAOyX,GAC1B,CAAE/kB,KAAM,YAAasN,MAAO2X,IAGhC,OAAO,gBAAC,GAAD,CAAoBpc,KAAMA,IAepBsc,CAAgBJ,EAASE,GAC1B,gBAACniB,EAAA,EAAD,4BAA8B,8BAASiiB,EAAT,IAAmBhc,EAAnB,KAA4Bmc,EAA5B,UA+F9C,OACI,gBAACrlB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,0BAAKJ,KAAKC,MAAM/C,KAAKsD,OAEzB,gBAACuD,EAAA,EAAD,CAAK3D,UAAU,QA1Bf,EAAKH,MAAM/C,KAAK0K,WAAWD,eAEvB,gBAAC,WAAD,KACI,gBAAC3D,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QACjBsb,KAEL,gBAAC1X,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aACjBklB,MAOT,gBAAC,WAAD,KACK5J,MAcT,gBAAC3X,EAAA,EAAD,CAAK3D,UAAU,QA9EG,WACtB,IAAIuI,EAAiB,EAAK1I,MAAMtC,YAAYmL,SAASH,eACjD6d,EAAgB,EAAKvmB,MAAMtC,YAAYiK,WAAWF,yBAClD+e,EAAiBD,EACjB,EAAKvmB,MAAMtC,YAAYiK,WAAWQ,mBAAmBtB,MAAQ,GAE7D4f,EAAuB/d,EAAehJ,KAAI,SAAApB,GAC1C,IAAIuY,EAAc,iBAAuC,IAApBvY,EAAEqK,cAAsB,IAAM,KAEnE,OACI,gBAAC5E,EAAA,EAAD,KACI,gBAACb,EAAA,EAAD,CAAM/C,UAAU,WACZ,gBAACgD,EAAA,EAAD,KAEQ,EAAKnD,MAAM/C,KAAK0K,WAAWD,eACvB,gBAACrE,EAAA,EAAD,yBACqB,gBAAC,KAAD,CAAiByT,KAAMC,KAAU5W,UAAW0W,EAAc,UAC3E,0BAAQ1W,UAAU,QC1GvD,SAAgC9C,GACnC,IAAIwQ,EAbJ,CACI6Y,EAAG,UACHnU,EAAG,sBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,eACHC,EAAG,aACHC,EAAG,cAM0BvV,GAEjC,MAAuB,qBAAXwQ,EACD,YAGAA,EDmGuD8Y,CAAuBroB,EAAEqK,iBACzC,GAGlB4d,EACI,gBAAC,GAAD,CACI3J,UAAWte,EAAEuI,MACbD,UAAW4f,IAEf,gBAAC,GAAD,CACI1Q,SAAUxX,EAAEuI,cAS5C,OACI,gBAAC3D,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,4BACA,gBAACQ,EAAA,EAAD,CAAKE,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAClBkiB,KAsCRG,IAEL,gBAAC9iB,EAAA,EAAD,KApGsB,WAC1B,IAAIgS,E5C3ET,SAA2B/O,EAAaF,GAG3C,IAFA,IAAIiP,EAAW,GAENpP,EAAI,EAAGA,EAAIK,EAAY7G,OAAQwG,IACpCoP,EAASnW,KAAK,CACV0W,KAAM3P,EACNK,YAAaA,EAAYL,GAAK,EAC9BG,MAAOA,EAAMH,GAAK,KAI1B,OAAOoP,E4CgEgB+Q,CAAkB,EAAK7mB,MAAMtC,YAAYmL,SAAS9B,YAAa,EAAK/G,MAAMtC,YAAYmL,SAAShC,OAE9G,OACI,gBAAC3D,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,wBACA,gBAACD,EAAA,EAAD,CAAUlD,UAAU,OAChB,gBAAC,GAAD,CACI2V,SAAUA,EACVgC,mBAAoBhC,EAAS5V,OAC7B6X,SAAUxS,KAAKC,MAAMsQ,EAAS5V,OAAS,QA0FlD4mB,IAEL,gBAAChjB,EAAA,EAAD,KACI,gBAAC+K,GAAA,EAAD,CAAQV,MAAM,UAAUW,KAAK,KAAK3O,UAAU,OACxC,gBAACQ,EAAA,EAAD,CACIR,UAAU,iBACV0f,KAAM,aAAe9f,KAAKC,MAAM/C,KAAKI,GAAK,WAF9C,iB,GArKY0D,kBEE9BgmB,G,kDACF,WAAY/mB,GAAgC,IAAD,sBAEvC,IAAMmH,EAASkK,IADf,cAAMrR,IAC0BA,MAAMukB,MAAMC,OAAjB,OAAmC,GACxDwC,EAAgB3V,GAAY,EAAKrR,MAAMukB,MAAMC,OAAjB,UAAsC,GAHjC,OAKvC,EAAK5lB,MAAQ,CACTuI,OAAQA,EACR6f,cAAeA,EACf/Y,WAAW,GAGf,EAAKyW,WAAW,EAAK1kB,MAAOmH,GAC5B,EAAK6e,oBAAoB,EAAKhmB,MAAOgnB,GAZE,E,uDAehChnB,EAA+B3C,GACtC6kB,GACKG,YAAYhlB,GACZkS,MAAK,SAAAjR,GAAC,OACH0B,EAAMimB,YAAYjpB,WAAWsB,Q,0CAIrB0B,EAA+B3C,GAAa,IAAD,OAC3D2C,EAAMkmB,mBAAmBtoB,yBAEzBuoB,GACKrB,mBAAmBznB,GACnBkS,MAAK,SAAAjR,GACF0B,EAAMkmB,mBAAmBzoB,kBAAkBa,GAE3C,EAAKoD,SAAS,CACVuM,WAAW,S,+BAKV,IAAD,OACNhR,EAAO8C,KAAKC,MAAMX,MAAMH,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO,EAAKuB,MAAMuI,UACtDzJ,EAAcqC,KAAKC,MAAMT,cAAcL,MAAK,SAAAZ,GAAC,OAAIA,EAAEjB,KAAO,EAAKuB,MAAMooB,iBAE3E,OAAIjnB,KAAKnB,MAAMqP,UAEP,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,kBAKdrP,IAAT7B,QAAsC6B,IAAhBpB,EACf,mBAIP,gBAAC,GAAD,CACIT,KAAMA,EACNS,YAAaA,Q,GAzDGqD,iBCxBjBgmB,GDqGApX,aAdS,SAAC/Q,GACrB,MAAO,CACHS,MAAOT,EAAM3B,KAAKoC,MAClBE,cAAeX,EAAMlB,YAAY6B,kBAId,SAACqQ,GACxB,MAAO,CACHqW,YAAapW,YAAmBsT,EAA0BvT,GAC1DsW,mBAAoBrW,YAAmBuW,EAAiCxW,MAIjED,CAGboX,IEHaE,G,kDA1EX,WAAYjnB,GAA0B,IAAD,8BACjC,cAAMA,IACDpB,MAAQ,CACTsoB,WAAY,IAHiB,E,qDAOpB,IAAD,OAkCZ,OACI,gBAAC,WAAD,KACI,gBAACpjB,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAACqiB,GAAA,EAAD,KACI,gBAACC,GAAA,EAAD,CAAiBC,UAAU,WAA3B,UACA,gBAAClU,GAAA,EAAD,CAAOC,SAAU,SAACgF,GAAD,OAAO,EAAKzT,MAAM2iB,wBAAwBlP,EAAE7F,OAAOC,YAG5E,gBAAC/J,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACG,EAAA,EAAD,uBAA2BvD,KAAKC,MAAMV,YAAtC,cACA,gBAAC+D,EAAA,EAAD,KA7CQ,WACxB,GAAI,EAAKrD,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,IAAIC,EACA,EAAKpO,MAAMX,MAAMK,KAAI,SAAApB,GAAC,OAClB,sBAAI6B,UAAU,UAAU8B,QAAS,kBAAM,EAAKjC,MAAMmnB,gBAAgB7oB,KAC9D,0BAAKA,EAAEjB,IACP,0BAAKiB,EAAEiC,MACP,0BAAK+R,GAAahU,EAAEqJ,WAAWN,WAI3C,OACI,yBAAOlH,UAAU,kBACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,UAGR,6BACKP,IAmBQ0U,OAKjB,gBAAChf,EAAA,EAAD,KACI,gBAAC,GAAD,CACIwZ,cAAevd,KAAKC,MAAMV,YAC1B+L,SAAUtL,KAAKC,MAAMqL,SACrBD,WAAYrL,KAAKC,MAAMoL,WACvBsS,gBAAiB3d,KAAKC,MAAM0d,gBAC5BE,wBAAyB7d,KAAKC,MAAM4d,wBACpCG,oBAAqBhe,KAAKC,MAAM+d,4B,GAnEzBhd,iBC+DhBqmB,G,uKA5EM,IAAD,OA4DZ,OACI,gBAAC,WAAD,KACI,gBAACtjB,EAAA,EAAD,KACI,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KAhEqB,WACrC,GAAI,EAAKrD,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,IAAI3O,EAAqB,EAAKQ,MAAMR,mBAC/BJ,QAAO,SAAAtB,GAAE,OACNA,EAAG2B,SAASod,MAAK,SAAAxO,GAAC,OACdA,EAAE/D,MAAMuS,MAAK,SAAApS,GAAC,OACVA,EAAEpD,OAAS,EAAKrH,MAAMqnB,kBAStC,GAAc,IAJF7nB,EAAmB6J,QAAQ,SAACC,EAAOhL,GAAR,OACnCgL,EAAQhL,EAAEmB,SAASS,SACpB,GAGC,MAAO,yBAGX,IAAIkO,EACA5O,EACKE,KAAI,SAAA5B,GAAE,OACHA,EAAG2B,SAASC,KAAI,SAAA2O,GAAC,OACbA,EAAE/D,MACGlL,QAAO,SAAAqL,GAAC,OACLA,EAAEpD,OAAS,EAAKrH,MAAMqnB,YAEzB3nB,KAAI,SAAA+K,GAAC,OACF,sBAAItK,UAAU,UAAU8B,QAAS,kBAAM,EAAKjC,MAAM8N,mBAAmBhQ,EAAGT,GAAIgR,EAAG5D,EAAEpN,MAC7E,0BAAKgR,EAAE9N,KAAP,IAAc8N,EAAEhE,MAAhB,KACA,0BAAKI,EAAEpN,GAAK,GACZ,0BAAKiV,GAAa7H,EAAEpD,iBAMhD,OACI,yBAAOlH,UAAU,kBACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,gBACA,sBAAIA,MAAM,OAAV,QACA,sBAAIA,MAAM,OAAV,UAGR,6BACKP,IAYQQ,Y,GAnEF7N,iBCZhBumB,G,uKCWP,IAFA,IAAIlJ,EAAc,GAET1X,EAAY,EAAGA,EAAInB,KAAKkU,IAAI1Z,KAAKC,MAAM4c,UAAU1c,OAAQH,KAAKC,MAAM4G,UAAU1G,QAASwG,IAC5F0X,EAAYze,KAAK,CACb0W,KAAM3P,EACNkW,UAAWlW,EAAI3G,KAAKC,MAAM4c,UAAU1c,OAASH,KAAKC,MAAM4c,UAAUlW,GAAK,KACvEE,UAAWF,EAAI3G,KAAKC,MAAM4G,UAAU1G,OAASH,KAAKC,MAAM4G,UAAUF,GAAK,OAI/E,OACI,gBAAC,KAAD,CAAqBkP,MAAM,OAAOC,OAAQ,KACtC,gBAAC,KAAD,CACIzM,KAAMgV,EACNrI,OAAQ,CACJC,MAAO,GACPrT,MAAO,IAGX,gBAAC,KAAD,CAAe4T,OAAO,YAEtB,gBAAC,KAAD,CACIN,QAAQ,OACRC,OAAQ,GACR8D,MAAO,WACPC,cAAe,SAAC5D,GAAD,OAAUjR,GAAYG,KAAKC,MAAM6Q,EAAO,MACvD0B,SAAUxS,KAAKC,MAAM4Y,EAAYle,OAAS,KAC9C,gBAAC,KAAD,MAEA,gBAAC,KAAD,CAAM+V,QAAQ,YAAY/Y,KAAK,WAAWsZ,KAAK,IAC/C,gBAAC,KAAD,CAAMP,QAAQ,YAAY/Y,KAAK,WAAWsZ,KAAK,EAAOD,OAAO,kB,GAhCrDxV,iBCoJbwmB,G,uKA/HM,IAAD,OACNC,EAAa,WACf,OACI,gBAACtkB,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,mBAAsB,EAAKrD,MAAMynB,aAAalnB,MAC9C,gBAAC8C,EAAA,EAAD,mBAAsB,EAAKrD,MAAMynB,aAAapqB,IAC9C,2BACA,gBAACgG,EAAA,EAAD,iBAAoB,EAAKrD,MAAM4b,gBAAgBrb,KAA/C,KAAuD,EAAKP,MAAM4b,gBAAgBvR,MAAlF,KACA,gBAAChH,EAAA,EAAD,cAAiB,EAAKrD,MAAM6b,aAAe,GAC3C,2BACA,gBAACxY,EAAA,EAAD,cAAiBiP,GAAa,EAAKtS,MAAMynB,aAAa9f,WAAWN,OAChE,EAAKrH,MAAMynB,aAAa9f,WAAWJ,mBAChC,gBAAClE,EAAA,EAAD,8BAC2B,EAAKrD,MAAMynB,aAAa9f,WAAWL,aAAe,EAD7E,UAGA,GAEH,EAAKtH,MAAMynB,aAAa9f,WAAWF,yBAChC,gBAACpE,EAAA,EAAD,6BAC+D,IAArC,EAAKrD,MAAM4G,UAAUrG,KAAKL,OAAe,YAAc,EAAKF,MAAM4G,UAAUrG,MAEtG,MAiGpB,OACIR,KAAKC,MAAMynB,aAAa9f,WAAWF,yBA9B/B,gBAAC,WAAD,KACI,gBAAC3D,EAAA,EAAD,CAAK3D,UAAU,QANhB,gBAAC,GAAD,CAAgByW,SAAU,EAAK5W,MAAMsX,oBASpC,gBAACxT,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC4D,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QAtB9B,gBAAC+C,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAAC,GAAD,CACIyZ,UAAW,EAAK5c,MAAM8V,SAASpW,KAAI,SAAApB,GAAC,OAAIA,EAAEuI,SAC1CD,UAAW,EAAK5G,MAAM4G,UAAUC,MAAMnH,KAAI,SAAApB,GAAC,OAAIA,EAAI,WAqBvD,gBAACyF,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aACjBqnB,OAQb,gBAAC,WAAD,KACI,gBAAC1jB,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC4D,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,QAhFZ,WACtB,IAAIyW,EAAW,EAAK5W,MAAM8V,SAAS,EAAK9V,MAAM8V,SAAS5V,OAAS,GAC5D2W,EAAc,gBAAkBH,GAChCE,EAAS3N,WACT2N,EAAS1N,cACT0N,EAASzN,YACTyN,EAAS5N,eAEb,OACI,gBAAC9F,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACW,EAAA,EAAD,CAAK3D,UAAU,QACX,gBAAC4D,EAAA,EAAD,CAAKC,GAAG,QAAR,eACiB,IACb,wBAAM7D,UAAU,cAAhB,IAA+BoF,KAAKC,MAAMoR,EAAS7P,aAAnD,WAEJ,gBAAChD,EAAA,EAAD,cACW,IACP,wBAAM5D,UAAU,eAAeoF,KAAKC,MAAMoR,EAAS/P,OAAnD,OAEJ,gBAAC9C,EAAA,EAAD,CAAK5D,UAAU,cACX,gBAAC,KAAD,CAAiB2W,KAAMC,KAAU5W,UAAW0W,IAC5C,0BAAQ1W,UAAU,QAAQsW,GACtBG,EAAS3N,WACT2N,EAAS1N,cACT0N,EAASzN,YACTyN,EAAS5N,kBAIrB,gBAAClF,EAAA,EAAD,KACI,gBAAC,GAAD,CACIgS,SAAU,EAAK9V,MAAM8V,SACrBgC,mBAAoB,EAAK9X,MAAM8X,mBAC/BC,SAAU,EAAK/X,MAAM+X,cA+CxB2P,IAEL,gBAAC3jB,EAAA,EAAD,CAAKC,GAAG,IAAI7D,UAAU,aACjBqnB,W,GAlHEzmB,iBCkCzB4mB,G,kDACF,WAAY3nB,GAA0B,IAAD,sBACjC,cAAMA,GAEN,IAAI8V,EAAWsC,GAPC,KAIiB,OAKjC,EAAKxZ,MAAQ,CACT6oB,aAAc,CACVpqB,GAAI,EACJkD,KAAM,GACNoH,WAAY,CACRN,KAAM,EACNC,aAAc,EACdC,oBAAoB,EACpBK,sBAAuB,EACvBH,0BAA0B,EAC1BC,gBAAgB,GAEpBG,eAAgB,GAEpBsU,4BAA6B,GAC7BP,gBAAiB,CACbve,GAAI,GACJkD,KAAM,GACN/B,SAAU,GACV4L,SAAU,GACVC,MAAO,GACPJ,WAAW,EACXK,MAAO,IAEXuR,cAAe,EACfjV,UAAW,CACPvJ,IAAK,EACLkD,KAAM,GACNsG,MAAO,GACPC,UAAW,GACXC,YAAa,EACbC,sBAAuB,GAG3B+E,SAAU,EACV+J,SAAUA,EACVgC,mBAAoB,EACpBuE,kBAAkB,EAClBC,cAAc,EACdhF,iBAAkB,CACdvQ,YAAa,EACbF,MAAO,EACPoC,WAAY,EACZD,eAAe,EACfE,eAAe,EACfC,aAAa,EACb7C,wBAAyB,GAG7BqV,YAAa,EACbiM,qBAAqB,EACrB5E,OAAQ,EAER1jB,YAAa,EACb8L,WAAY,EACZC,SAAU,GACVjM,OAAQ,GAER6P,mBAAmB,EACnB4Y,gBAAgB,GAGpB,EAAK1Y,eAAe,EAAKnP,OACzB,EAAKijB,YAAY,EAAKjjB,MAAO,EAAKpB,MAAMQ,OAAQ,EAAKR,MAAMwM,YAE3DoR,aAAY,WACJ,EAAK5d,MAAMmN,SAAW,GACtB,EAAKnN,MAAMyd,mBAEX,EAAK3a,SAAS,CACV2a,kBAAkB,IAGtBtL,GACKK,gBAAgB,EAAKxS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMmN,SAClGwD,MAAK,SAAC2I,GACH,GAAI1P,MAAMgH,QAAQ0I,GAAS,CACvB,IAAIpC,EAAW,EAAKlX,MAAMkX,SACtBgC,EAAqB,EAAKlZ,MAAMkZ,mBAChCwE,EAAe,EAAK1d,MAAM0d,aAC1BhF,EAAmB,EAAK1Y,MAAM0Y,iBAElCY,EAAOzI,SAAQ,SAAAnR,GACP,EAAKM,MAAM6oB,aAAa9f,WAAWF,0BAE/BnJ,EAAE6K,cAAgBmT,IAClBxG,EAAW,GACXwG,GAAe,IAIdhe,EAAE6K,aAAemT,IAClBA,GAAe,GAIfhe,EAAE6K,aACFmP,GAAmBxC,EAAUxX,GAAI,IAIrCga,GAAmBxC,EAAUxX,EA9GzC,KAiHQgZ,EAAmBhZ,EACnBwZ,OAGJ,EAAKpW,SAAS,CACVoU,SAAUA,EACVuG,kBAAkB,EAClBvE,mBAAoBA,EACpBwE,aAAcA,EACdhF,iBAAkBA,WAzHR,KAGD,E,2DA8HtBtX,GAA0B,IAAD,OACpCA,EAAMqP,eAAerR,8BACrB+B,KAAK2B,SAAS,CACVuN,mBAAmB,IAGvBK,GACKxC,cACAyC,MAAK,SAAAzF,GACEtB,MAAMgH,QAAQ1F,IACdA,EAAI2F,SAAQ,SAAC3R,GACTkC,EAAMqP,eAAexR,wBAAwBC,GAE7CA,EAAG2B,SAASgQ,SAAQ,SAACpB,GAAD,OAChBrO,EAAMqP,eAAepR,cAAcoQ,EAAGvQ,EAAGT,UAKrD,EAAKqE,SAAS,CACVuN,mBAAmB,S,kCAKvBjP,EAAyBZ,EAAgBgM,GAAqB,IAAD,OACrEpL,EAAMimB,YAAY3oB,iBAElByC,KAAK2B,SAAS,CACVmmB,gBAAgB,EAChBzc,WAAYA,EACZhM,OAAQA,IAGZ8iB,GACKE,SAAShjB,EAAQgM,EAAYrL,KAAKnB,MAAMyM,UACxCkE,MAAK,SAAAlQ,GACEmJ,MAAMgH,QAAQnQ,IACdA,EAAMoQ,SAAQ,SAACnR,GAAD,OACV0B,EAAMimB,YAAYjpB,WAAWsB,MAIrC,EAAKoD,SAAS,CACVmmB,gBAAgB,OAI5B3F,GACKC,WAAW/iB,GACXmQ,MAAK,SAAA1B,GACF,EAAKnM,SAAS,CACVpC,YAAauO,S,+BAKZ,IAAD,OA0CN8P,EAAW,WACb,EAAKjc,SAAS,CACVia,YAAa,EAAK/c,MAAM+c,YAAc,KAIxCmC,EAAO,WACT,GAA+B,IAA3B,EAAKlf,MAAM+c,YACX,EAAKja,SAAS,CACVia,YAAa,SAGhB,GAA+B,IAA3B,EAAK/c,MAAM+c,YAAmB,CACnC,IAAI7F,EAAW,EAAKlX,MAAM6oB,aAAa9f,WAAWF,yBAC9C,GAAK2Q,GAnPD,KAqPR,EAAK1W,SAAS,CACVoU,SAAUA,EACVgC,mBAAoB,IAGxB/G,GACKC,WAAW,EAAKpS,MAAM6oB,aAAapqB,GAAI,EAAKuB,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACzHtM,MAAK,kBACF,EAAK7N,SAAS,CACVia,YAAa,OAIzB5K,GACKG,kBAAkB,EAAKtS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cACpGtM,MAAK,SAAC1B,GACH,EAAKnM,SAAS,CACVqK,QAAS8B,OAIrBoC,GACKK,iBAAiB,EAAK1R,MAAM6oB,aAAa9f,WAAWC,sBACpD2H,MAAK,SAAA1B,GACF,EAAKnM,SAAS,CACVkF,UAAWiH,YAKvB,EAAKnM,SAAS,CACVkmB,qBAAqB,KAoC3BE,EAA8B,WAChC,EAAKpmB,SAAS,CACVkmB,qBAAqB,KAqC7B,OACI,gBAACxnB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,2CAGwB,IAA3BJ,KAAKnB,MAAM+c,YACR,gBAAC,GAAD,CACI1N,UAAWlO,KAAKnB,MAAMipB,eACtBxoB,MAAOU,KAAKC,MAAMX,MAClBC,YAAaS,KAAKnB,MAAMU,YACxB+L,SAAUtL,KAAKnB,MAAMyM,SACrBD,WAAYrL,KAAKnB,MAAMwM,WAEvBsS,gBA/CQ,SAACtS,GACrB,EAAK6X,YACD,EAAKjjB,MACL,EAAKpB,MAAMQ,OACXgM,IA4CQwS,wBAzCgB,WAC5B,EAAKqF,YACD,EAAKjjB,MACL,EAAKpB,MAAMQ,OACXmG,KAAKkU,IAAI,EAAG,EAAK7a,MAAMwM,WAAa,KAsC5B2S,oBAnCY,WACxB,EAAKkF,YACD,EAAKjjB,MACL,EAAKpB,MAAMQ,OACXmG,KAAKoX,IACDpX,KAAK8X,KAAK,EAAKze,MAAMU,YAAc,EAAKV,MAAMyM,UAC9C,EAAKzM,MAAMwM,WAAa,KA8BpB+b,gBAvFQ,SAAClqB,GACrB,EAAKyE,SAAS,CACV+lB,aAAcxqB,EACd0e,YAAa,KAqFLgH,wBA5BgB,SAACvjB,GACzB,EAAKR,MAAMokB,MAAQ,GACnBhG,OAAOC,aAAa,EAAKre,MAAMokB,OAEnC,EAAKthB,SAAS,CACV0J,WAAY,EACZ4X,MAAOjd,WAAW,EAAKkd,YAjYjB,IAiY6C,EAAKjjB,MAAOZ,EAAQ,QAuB9D,GAGmB,IAA3BW,KAAKnB,MAAM+c,YACR,gBAAC,GAAD,CACI1N,UAAWlO,KAAKnB,MAAMqQ,kBACtBzP,mBAAoBO,KAAKC,MAAMR,mBAC/B6nB,SAAUtnB,KAAKnB,MAAM6oB,aAAa9f,WAAWN,KAC7CyG,mBA1FW,SAAC7C,EAA6B/M,EAA+BwM,GACpF,EAAKhJ,SAAS,CACVya,4BAA6BlR,EAC7B2Q,gBAAiB1d,EACjB2d,aAAcnR,OAuFL,GAGmB,IAA3B3K,KAAKnB,MAAM+c,YACR,gBAAC,GAAD,CACI8L,aAAc1nB,KAAKnB,MAAM6oB,aACzB7L,gBAAiB7b,KAAKnB,MAAMgd,gBAC5BC,aAAc9b,KAAKnB,MAAMid,aACzBjV,UAAW7G,KAAKnB,MAAMgI,UAEtBmF,QAAShM,KAAKnB,MAAMmN,QACpB+J,SAAU/V,KAAKnB,MAAMkX,SACrBwB,iBAAkBvX,KAAKnB,MAAM0Y,iBAC7BQ,mBAAoB/X,KAAKnB,MAAMkZ,mBAC/BC,SAAUgQ,KACT,GAGT,gBAACjkB,EAAA,EAAD,KAjNkB,WACtB,GAA+B,IAA3B,EAAKlF,MAAM+c,YACX,OACI,gBAAC9M,GAAA,EAAD,CACI4Q,SAAO,EACPtR,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS,kBAAM0b,MALnB,YA+MCqK,GApMS,WAClB,IAAIC,EAAO,GACPC,GAAU,EAWd,OAT+B,IAA3B,EAAKtpB,MAAM+c,aACXsM,EAAO,aACPC,EAA4C,KAAlC,EAAKtpB,MAAMgd,gBAAgBve,IAEL,IAA3B,EAAKuB,MAAM+c,cAChBsM,EAAO,YACPC,GAAU,GAGTA,EAKD,gBAACrZ,GAAA,EAAD,CACIV,MAAM,UACNW,KAAK,KACL3O,UAAU,MACV8B,QAAS,kBAAM6b,MACjBmK,GATK,GAuLFE,IAGL,gBAACpI,GAAA,EAAD,CAAOve,OAAQzB,KAAKnB,MAAMgpB,oBAAqBnmB,OAAQ,kBAAMqmB,MACzD,gBAAC9H,GAAA,EAAD,CAAave,OAAQ,kBAAMqmB,MAA3B,eACA,gBAAC7H,GAAA,EAAD,yCACA,gBAACC,GAAA,EAAD,KACI,gBAACrR,GAAA,EAAD,CAAQ4Q,SAAO,EAACtR,MAAM,UAAUlM,QAAS,kBA9GpB,WACjC8O,GACKE,UAAU,EAAKrS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI,EAAKuB,MAAMid,cAEjG,IAAI9P,EAAU,EAAKnN,MAAMmN,QAEzB,EAAKrK,SAAS,CACVqK,SAAU,EACV4P,YAAa,EACbiM,qBAAqB,IAGzB7W,GACKI,iBAAiB,EAAKvS,MAAMud,4BAA6B,EAAKvd,MAAMgd,gBAAgBve,GAAI0O,GAiGlCqc,KAA/C,WAAgG,IAChG,gBAACvZ,GAAA,EAAD,CAAQV,MAAM,UAAUlM,QAAS,kBAAM6lB,MAAvC,iB,GApZE/mB,iBC7DX4mB,GDueAhY,aAdS,SAAC/Q,GACrB,MAAO,CACHY,mBAAoBZ,EAAMV,QAAQsB,mBAClCH,MAAOT,EAAM3B,KAAKoC,UAIC,SAACuQ,GACxB,MAAO,CACHP,eAAgBQ,YAAmBC,EAA6BF,GAChEqW,YAAapW,YAAmBsT,EAA0BvT,MAInDD,CAGbgY,IEzXaU,G,uKApGM,IAAD,OAuFZ,OACI,gBAACjoB,EAAA,EAAD,KACI,gBAAC0D,EAAA,EAAD,CAAK3D,UAAU,QACX,+CAEJ,gBAAC2D,EAAA,EAAD,KAfA,gBAACZ,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,KA9EyB,WACrC,GAAI,EAAKrD,MAAMiO,UACX,OACI,uBAAK9N,UAAU,eACX,gBAAC+N,GAAA,EAAD,CAASC,MAAM,aAI3B,IAAIgC,EAAQ,EAAKnQ,MAAMR,mBAAmBU,OAO1C,GANc,IAAViQ,IACAA,EAAQ,EAAKnQ,MAAMR,mBAAmB6J,QAAQ,SAACC,EAAOhL,GAAR,OAC1CgL,EAAQhL,EAAEmB,SAASS,SACpB,IAGO,IAAViQ,EACA,MAAO,iDAGX,IAAI/B,EACA,EAAKpO,MAAMR,mBACNE,KAAI,SAAA5B,GACD,IAAIoU,EAAQ,GAiCZ,OAhCAA,EAAMvS,KACF,sBAAIQ,UAAU,WACV,sBAAIA,UAAU,aAAY,8BAASrC,EAAGyC,OACtC,2BACA,0BACI,gBAACsO,GAAA,EAAD,CACI4Q,SAAO,EACPtR,MAAQrQ,EAAGmM,UAAY,UAAY,YACnC6E,KAAK,KACL3O,UAAU,YACV8B,QAAS,kBAAM,EAAKjC,MAAMsoB,+BAA+BxqB,EAAGT,IAAKS,EAAGmM,aAEnEnM,EAAGmM,UAAY,UAAY,eAK5CiI,EAAMvS,KACF7B,EAAG2B,SAASC,KAAI,SAAA2O,GAAC,OACb,sBAAIlO,UAAU,WACV,sBAAIA,UAAU,kBAAoC,IAAlBkO,EAAE9N,KAAKL,OAAe,YAAcmO,EAAE9N,MACtE,0BAAK8N,EAAEhE,OACP,0BACI,wBAAMlK,UAAYrC,EAAGmM,WAAaoE,EAAEpE,UAAa,kBAAoB,IACjEnM,EAAGmM,UACEoE,EAAEpE,UAAY,cAAgB,eAC/B,YAMjBiI,KAGnB,OACI,yBAAO/R,UAAU,2CACb,6BACI,0BACI,sBAAIwO,MAAM,OAAV,gCACA,sBAAIA,MAAM,OAAV,iBACA,sBAAIA,MAAM,OAAV,eAGR,6BACKP,IAWIQ,Y,GAjFK7N,iBCC5BwnB,G,kDACF,WAAYvoB,GAA8B,IAAD,8BACrC,cAAMA,IACDpB,MAAQ,CACTqP,WAAW,GAGf,EAAKkB,eAAe,EAAKnP,OANY,E,2DAS1BA,GAA8B,IAAD,OACxCA,EAAMhC,8BACN+B,KAAK2B,SAAS,CACVuM,WAAW,IAGfqB,GACKxC,cACAyC,MAAK,SAAAzF,GACEtB,MAAMgH,QAAQ1F,IACdA,EAAI2F,SAAQ,SAAC3R,GACTkC,EAAMnC,wBAAwBC,GAE9BA,EAAG2B,SAASgQ,SAAQ,SAACpB,GAAD,OAChBrO,EAAM/B,cAAcoQ,EAAGvQ,EAAGT,UAKtC,EAAKqE,SAAS,CACVuM,WAAW,S,+BAKV,IAAD,OASZ,OACI,gBAAC,GAAD,CACIzO,mBAAoBO,KAAKC,MAAMR,mBAC/ByO,UAAWlO,KAAKnB,MAAMqP,UACtBqa,+BAZ+B,SAACrd,EAA6BkB,GACjEmD,GACKtC,oBAAoB/B,EAAqBkB,GACzCoD,MAAK,SAAAjR,GACF,EAAK6Q,eAAe,EAAKnP,iB,GAxCfe,iBCCf,IACb,CAAEP,KAAM,IAAKD,KAAM,OAAQioB,UAAWnkB,IACtC,CAAE7D,KAAM,eAAgBD,KAAM,cAAeioB,UAAWxjB,IACxD,CAAExE,KAAM,8BAA+BD,KAAM,kBAAmBioB,UAAWxZ,IAC3E,CAAExO,KAAM,aAAcD,KAAM,YAAaioB,UAAWxY,IACpD,CAAExP,KAAM,0BAA2BD,KAAM,uBAAwBioB,UAAWvM,IAC5E,CAAEzb,KAAM,gCAAiCD,KAAM,uBAAwBioB,UAAWrI,IAClF,CAAE3f,KAAM,oCAAqCD,KAAM,MAAOioB,UAAW3G,IACrE,CAAErhB,KAAM,OAAQD,KAAM,MAAOioB,UAAWxG,IACxC,CAAExhB,KAAM,YAAaD,KAAM,QAASioB,UAAWzF,IAC/C,CAAEviB,KAAM,gBAAiBD,KAAM,MAAOioB,UAAWrE,IACjD,CAAE3jB,KAAM,uBAAwBD,KAAM,UAAWioB,UAAWzC,IAC5D,CAAEvlB,KAAM,qBAAsBD,KAAM,OAAQioB,UAAWlE,IACvD,CAAE9jB,KAAM,uCAAwCD,KAAM,UAAWioB,UAAWzB,IAC5E,CAAEvmB,KAAM,mBAAoBD,KAAM,eAAgBioB,UAAWb,IAC7D,CAAEnnB,KAAM,uBAAwBD,KAAM,mBAAoBioB,UD4C7C7Y,aANS,SAAC/Q,GACrB,MAAO,CACHY,mBAAoBZ,EAAMV,QAAQsB,sBAMtCsQ,EAFWH,CAGb4Y,MEtEa,I,OAAA,kBACX,gBAACE,EAAD,KACI,gBAAC,IAAD,KACKC,GAAOhpB,KAAI,WAA4BY,GAA5B,IAAGE,EAAH,EAAGA,KAAYgoB,GAAf,EAASjoB,KAAT,EAAeioB,WAAf,OACR,gBAAC,IAAD,CACIG,OAAK,EACLnoB,KAAMA,EACNF,IAAKA,EACLsoB,OAAQ,SAAA5oB,GACJ,IAAMC,EAASyoB,GACVtpB,QAAO,gBAAGoB,EAAH,EAAGA,KAAH,OAAcR,EAAMukB,MAAM/jB,KAAKqoB,SAASroB,MAC/Cd,KAAI,gBAAGc,EAAH,EAAGA,KAASsoB,EAAZ,4CACDtoB,KAAMijB,OAAOsF,KAAK/oB,EAAMukB,MAAMC,QAAQtkB,OAChCujB,OAAOsF,KAAK/oB,EAAMukB,MAAMC,QAAQnb,QAC9B,SAAC7I,EAAMwoB,GAAP,OACIxoB,EAAKyoB,QAAL,WAAiBD,GAAShpB,EAAMukB,MAAMC,OAAOwE,MACjDxoB,GAEFA,GACHsoB,MAGX,OACI,gBAAC,WAAD,KACI,gBAAC,EAAD,CAAa7oB,OAAQA,IACrB,uBAAK5C,GAAG,gBACJ,gBAAC,IAAD,CAAOsrB,OAAK,EAACnoB,KAAMA,EAAMF,IAAKA,EAAK4oB,UAAWV,gBCxB5EW,GAAcC,QACa,cAA7BpM,OAAOqM,SAASC,UAEa,UAA7BtM,OAAOqM,SAASC,UAEhBtM,OAAOqM,SAASC,SAAS/E,MACrB,2DA8BR,SAASgF,GAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTja,MAAK,SAAAqa,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBlrB,QACb6qB,UAAUC,cAAcO,WAKxBhkB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/BgkB,OAAM,SAAAxd,GACHzG,QAAQyG,MAAM,4CAA6CA,MC3DvE,IAAMyd,GAAUnL,SAASoL,qBAAqB,QAAQ,GAAGC,aAAa,QAChEvI,GAAUwI,YAAqB,CAAEC,SAAUJ,KAG3CK,GCVS,SAAwB1I,EAAkB2I,GACrD,IAAMC,EAAa,CACfC,IACAC,YAAiB9I,IAGf+I,EAAcC,YAAgB,eAC7BpsB,EAD4B,CAE/BqsB,OAAQC,YAAclJ,MAGpBmJ,EAAY,GACZC,EAAoC,qBAAXlO,OAAyB,KAAOA,OAK/D,OAJIkO,GAAmBA,EAAgBC,8BACnCF,EAAUtrB,KAAKurB,EAAgBC,gCAG5BC,YACHP,EACAJ,EACAY,IAAO,WAAP,GAAQC,IAAe,WAAf,EAAmBZ,IAA3B,OAA2CO,KDVrCM,CAAezJ,IAE7B0J,SACI,gBAAC,IAAD,CAAUhB,MAAOA,IACb,gBAAC,IAAD,CAAiB1I,QAASA,IACtB,gBAAC2J,GAAD,QAGRzM,SAAS0M,eAAe,SDJb,WACX,GAA6C,kBAAmBjC,UAAW,CAIvE,GADkB,IAAIjJ,IADVrb,gBACmB6X,OAAOqM,SAASlf,YACjCwhB,SAAW3O,OAAOqM,SAASsC,OAIrC,OAGJ3O,OAAOmC,iBAAiB,QAAQ,WAC5B,IAAMqK,EAAK,UAAMrkB,gBAAN,sBAEPgkB,GAwChB,SAAiCK,GAE7BoC,MAAMpC,GACDja,MAAK,SAAAsc,GAEF,IAAMC,EAAcD,EAASjf,QAAQmf,IAAI,gBACjB,MAApBF,EAASG,QAAmBF,IAAsD,IAAvCA,EAAYlT,QAAQ,cAE/D6Q,UAAUC,cAAcuC,MAAM1c,MAAK,SAAAqa,GAC/BA,EAAasC,aAAa3c,MAAK,WAC3ByN,OAAOqM,SAAS8C,eAKxB5C,GAAgBC,MAGvBU,OAAM,WACHjkB,QAAQC,IAAI,oEAzDRkmB,CAAwB5C,GAGxBD,GAAgBC,OCdhC6C,K","file":"static/js/main.d92fc3b6.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\n\r\nexport interface TaskConfig {\r\n    tool: number,\r\n    selectedTemp: number,\r\n    changeSelectedTemp: boolean,\r\n    solderingReferenceId: number,\r\n    changeSolderingReference: boolean,\r\n    qualityControl: boolean\r\n}\r\n\r\nexport interface Task {\r\n    id: number,\r\n    name: string,\r\n    workConfig: TaskConfig,\r\n    timesPerformed: number\r\n}\r\n\r\nexport interface TaskState {\r\n    tasks: Task[],\r\n    nTotalTasks: number\r\n}\r\n\r\nexport interface CreateTaskAction { type: 'CREATE_TASK', result: Task }\r\nexport interface DeleteTaskAction { type: 'DELETE_TASK', result: number }\r\nexport interface DeleteAllTasksAction { type: 'DELETE_ALL_TASKS' }\r\n\r\nexport interface SetTotalTasksAction { type: 'SET_TOTAL_TASKS', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskAction\r\n    | DeleteTaskAction\r\n    | DeleteAllTasksAction\r\n    | SetTotalTasksAction;\r\n\r\nexport const actionCreators = {\r\n    createTask: (task: Task) => ({ type: 'CREATE_TASK', result: task } as CreateTaskAction),\r\n    deleteTask: (id: number) => ({ type: 'DELETE_TASK', result: id } as DeleteTaskAction),\r\n    deleteAllTasks: () => ({ type: 'DELETE_ALL_TASKS' } as DeleteAllTasksAction),\r\n    setTotalTasks: (number: number) => ({ type: 'SET_TOTAL_TASKS', result: number } as SetTotalTasksAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskState> = (\r\n    state: TaskState | undefined,\r\n    incomingAction: Action\r\n): TaskState => {\r\n    if (state === undefined) {\r\n        return {\r\n            tasks: [],\r\n            nTotalTasks: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK':\r\n            if (state.tasks.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASKS':\r\n            return {\r\n                ...state,\r\n                tasks: []\r\n            };\r\n\r\n        case 'SET_TOTAL_TASKS':\r\n            return {\r\n                ...state,\r\n                nTotalTasks: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Reference {\r\n    id: number,\r\n    name: string,\r\n    power: number[],\r\n    cartridge: string,\r\n    temperature: number,\r\n    durationTenthsSeconds: number\r\n}\r\n\r\nexport interface TaskConfig {\r\n    tool: number,\r\n    selectedTemp: number,\r\n    changeSelectedTemp: boolean,\r\n    solderingReference: Reference,\r\n    changeSolderingReference: boolean\r\n}\r\n\r\nexport interface WorkSolderings {\r\n    power: number[],\r\n    solderingType: number\r\n}\r\n\r\nexport interface TaskData {\r\n    stationId: string,\r\n    stationName: string,\r\n    stationPort: number,\r\n    temperature: number[],\r\n    power: number[],\r\n    workSolderings: WorkSolderings[]\r\n}\r\n\r\nexport interface TaskHistory {\r\n    id: number,\r\n    finishDate: Date,\r\n    workConfig: TaskConfig\r\n    workData: TaskData\r\n}\r\n\r\nexport interface TaskHistoryState {\r\n    taskHistories: TaskHistory[]\r\n}\r\n\r\nexport interface CreateTaskHistoryAction { type: 'CREATE_TASK_HISTORY', result: TaskHistory }\r\nexport interface DeleteTaskHistoryAction { type: 'DELETE_TASK_HISTORY', result: number }\r\nexport interface DeleteAllTaskHistoriesAction { type: 'DELETE_ALL_TASK_HISTORIES' }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskHistoryAction\r\n    | DeleteTaskHistoryAction\r\n    | DeleteAllTaskHistoriesAction;\r\n\r\nexport const actionCreators = {\r\n    createTaskHistory: (taskHistory: TaskHistory) => ({ type: 'CREATE_TASK_HISTORY', result: taskHistory } as CreateTaskHistoryAction),\r\n    deleteTaskHistory: (id: number) => ({ type: 'DELETE_TASK_HISTORY', result: id } as DeleteTaskHistoryAction),\r\n    deleteAllTaskHistories: () => ({ type: 'DELETE_ALL_TASK_HISTORIES' } as DeleteAllTaskHistoriesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskHistoryState> = (\r\n    state: TaskHistoryState | undefined,\r\n    incomingAction: Action\r\n): TaskHistoryState => {\r\n    if (state === undefined) {\r\n        return { taskHistories: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK_HISTORY':\r\n            if (state.taskHistories.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK_HISTORY':\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASK_HISTORIES':\r\n            return {\r\n                ...state,\r\n                taskHistories: []\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Port {\r\n    id: number,\r\n    tool: number\r\n}\r\n\r\nexport interface Station {\r\n    id: string,\r\n    name: string,\r\n    software: string,\r\n    hardware: string,\r\n    model: string,\r\n    isQSTMode: boolean,\r\n    ports: Port[]\r\n}\r\n\r\nexport interface StationController {\r\n    id: string,\r\n    name: string,\r\n    isQSTMode: boolean,\r\n    stations: Station[]\r\n}\r\n\r\nexport interface StationState {\r\n    stationControllers: StationController[]\r\n}\r\n\r\nexport interface CreateStationControllerAction { type: 'CREATE_STATION_CONTROLLER', sc: StationController }\r\nexport interface DeleteStationControllerAction { type: 'DELETE_STATION_CONTROLLER', id: string }\r\nexport interface DeleteAllStationControllersAction { type: 'DELETE_ALL_STATION_CONTROLLERS' }\r\nexport interface CreateStationAction { type: 'CREATE_STATION', station: Station, scId: string }\r\nexport interface DeleteStationAction { type: 'DELETE_STATION', id: string }\r\n\r\nexport type KnownAction =\r\n    | CreateStationControllerAction\r\n    | DeleteStationControllerAction\r\n    | DeleteAllStationControllersAction\r\n    | CreateStationAction\r\n    | DeleteStationAction;\r\n\r\nexport const actionCreators = {\r\n    createStationController: (sc: StationController) => ({ type: 'CREATE_STATION_CONTROLLER', sc: sc } as CreateStationControllerAction),\r\n    deleteStationController: (id: string) => ({ type: 'DELETE_STATION_CONTROLLER', id: id } as DeleteStationControllerAction),\r\n    deleteAllStationControllers: () => ({ type: 'DELETE_ALL_STATION_CONTROLLERS' } as DeleteAllStationControllersAction),\r\n    createStation: (station: Station, scId: string) => ({ type: 'CREATE_STATION', station: station, scId: scId } as CreateStationAction),\r\n    deleteStation: (id: string) => ({ type: 'DELETE_STATION', id: id } as DeleteStationAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<StationState> = (\r\n    state: StationState | undefined,\r\n    incomingAction: Action\r\n): StationState => {\r\n    if (state === undefined) {\r\n        return { stationControllers: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_STATION_CONTROLLER':\r\n            if (state.stationControllers.find(x => x.id === action.sc.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.concat(action.sc)\r\n            };\r\n\r\n        case 'DELETE_STATION_CONTROLLER':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers\r\n                    .filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_STATION_CONTROLLERS':\r\n            return {\r\n                ...state,\r\n                stationControllers: []\r\n            };\r\n\r\n        case 'CREATE_STATION':\r\n            let sc = state.stationControllers.find(x => x.id === action.scId);\r\n            if (sc === undefined) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            if (sc.stations.find(x => x.id === action.station.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.map(x => {\r\n                    if (x.id === action.scId) {\r\n                        x.stations.push(action.station);\r\n                    }\r\n                    return x;\r\n                })\r\n            };\r\n\r\n        case 'DELETE_STATION':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.filter(sc => {\r\n                    return sc.stations.filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n                })\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface StationUpdate {\r\n    model: string,\r\n    hardware: string,\r\n    software: string,\r\n    language: string\r\n}\r\n\r\nexport interface StationUpdateState {\r\n    stationsUpdate: StationUpdate[]\r\n}\r\n\r\nexport interface CreateStationUpdateAction { type: 'CREATE_STATION_UPDATE', x: StationUpdate }\r\nexport interface DeleteStationUpdateAction { type: 'DELETE_STATION_UPDATE', software: string }\r\nexport interface DeleteAllStationUpdatesAction { type: 'DELETE_ALL_STATION_UPDATES' }\r\n\r\nexport type KnownAction =\r\n    | CreateStationUpdateAction\r\n    | DeleteStationUpdateAction\r\n    | DeleteAllStationUpdatesAction;\r\n\r\nexport const actionCreators = {\r\n    createStationUpdate: (x: StationUpdate) => ({ type: 'CREATE_STATION_UPDATE', x: x } as CreateStationUpdateAction),\r\n    deleteStationUpdate: (software: string) => ({ type: 'DELETE_STATION_UPDATE', software: software } as DeleteStationUpdateAction),\r\n    deleteAllStationUpdates: () => ({ type: 'DELETE_ALL_STATION_UPDATES' } as DeleteAllStationUpdatesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<StationUpdateState> = (\r\n    state: StationUpdateState | undefined,\r\n    incomingAction: Action\r\n): StationUpdateState => {\r\n    if (state === undefined) {\r\n        return { stationsUpdate: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_STATION_UPDATE':\r\n            if (state.stationsUpdate.find(x => x.software === action.x.software)\r\n            ) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationsUpdate: state.stationsUpdate.concat(action.x)\r\n            };\r\n\r\n        case 'DELETE_STATION_UPDATE':\r\n            return {\r\n                ...state,\r\n                stationsUpdate: state.stationsUpdate\r\n                    .filter(x => {\r\n                        if (x.software === action.software) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_STATION_UPDATES':\r\n            return {\r\n                ...state,\r\n                stationsUpdate: []\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as Assistant from './Assistant';\r\nimport * as Task from './Task';\r\nimport * as TaskHistory from './TaskHistory';\r\nimport * as Station from './Station';\r\nimport * as StationUpdate from './StationUpdate';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    assistant: Assistant.AssistantState;\r\n    task: Task.TaskState;\r\n    taskHistory: TaskHistory.TaskHistoryState;\r\n    station: Station.StationState;\r\n    stationUpdate: StationUpdate.StationUpdateState;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    assistant: Assistant.reducer,\r\n    task: Task.reducer,\r\n    taskHistory: TaskHistory.reducer,\r\n    station: Station.reducer,\r\n    stationUpdate: StationUpdate.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Reference {\r\n    id: number,\r\n    name: string,\r\n    power: number[],\r\n    cartridge: string,\r\n    temperature: number,\r\n    durationTenthsSeconds: number\r\n}\r\n\r\nexport interface AssistantState {\r\n    references: Reference[],\r\n    nTotalReferences: number\r\n}\r\n\r\nexport interface CreateReferenceAction { type: 'CREATE_REFERENCE', result: Reference }\r\nexport interface DeleteReferenceAction { type: 'DELETE_REFERENCE', result: number }\r\nexport interface DeleteAllReferencesAction { type: 'DELETE_ALL_REFERENCES' }\r\n\r\nexport interface SetTotalReferencesAction { type: 'SET_TOTAL_REFERENCES', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateReferenceAction\r\n    | DeleteReferenceAction\r\n    | DeleteAllReferencesAction\r\n    | SetTotalReferencesAction;\r\n\r\nexport const actionCreators = {\r\n    createReference: (reference: Reference) => ({ type: 'CREATE_REFERENCE', result: reference } as CreateReferenceAction),\r\n    deleteReference: (id: number) => ({ type: 'DELETE_REFERENCE', result: id } as DeleteReferenceAction),\r\n    deleteAllReferences: () => ({ type: 'DELETE_ALL_REFERENCES' } as DeleteAllReferencesAction),\r\n    setTotalReferences: (number: number) => ({ type: 'SET_TOTAL_REFERENCES', result: number } as SetTotalReferencesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<AssistantState> = (\r\n    state: AssistantState | undefined,\r\n    incomingAction: Action\r\n): AssistantState => {\r\n    if (state === undefined) {\r\n        return {\r\n            references: [],\r\n            nTotalReferences: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_REFERENCE':\r\n            if (state.references.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                references: state.references.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_REFERENCE':\r\n            return {\r\n                ...state,\r\n                references: state.references\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_REFERENCES':\r\n            return {\r\n                ...state,\r\n                references: []\r\n            };\r\n\r\n        case 'SET_TOTAL_REFERENCES':\r\n            return {\r\n                ...state,\r\n                nTotalReferences: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import Breadcrumbs from './Breadcrumbs';\r\n\r\nexport default Breadcrumbs;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Container } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\ninterface ICrumb {\r\n    name: string,\r\n    path: string\r\n}\r\n\r\ntype BreadcrumbsProps = {\r\n    crumbs: ICrumb[]\r\n}\r\n\r\nclass Breadcrumbs extends React.PureComponent<BreadcrumbsProps> {\r\n    public render() {\r\n        if (this.props.crumbs.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div id=\"breadcrumb-wrap\" className=\"box-shadow\">\r\n                <Container>\r\n                    <Breadcrumb>\r\n                        {/* Link back to any previous steps of the breadcrumb. */}\r\n                        {this.props.crumbs.map(({ name, path }, key) =>\r\n                            key + 1 === this.props.crumbs.length ? (\r\n                                <BreadcrumbItem active>{name}</BreadcrumbItem>\r\n                            ) : (\r\n                                    <BreadcrumbItem>\r\n                                        <NavLink tag={Link} className=\"p-0 d-inline\" to={path}>{name}</NavLink>\r\n                                    </BreadcrumbItem>\r\n                                )\r\n                        )}\r\n                    </Breadcrumb>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport pkg from '../../../../package.json';\r\n\r\nclass Footer extends React.PureComponent {\r\n    public render() {\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n\r\n        return (\r\n            <footer className=\"border-top box-shadow\">\r\n                <Container className=\"clearfix pt-2 pb-2\">\r\n                    <div className=\"float-left\">\r\n                        <strong>Copyright</strong> JBC, Soldering S.L. © {year}\r\n                    </div>\r\n                    <div className=\"float-right\">\r\n                        <strong>Suite</strong> - version {pkg.version}\r\n                    </div>\r\n                </Container>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import NavMenu from './NavMenu';\r\n\r\nexport default NavMenu;\r\n","import * as React from 'react';\r\nimport { Collapse, Container } from 'reactstrap';\r\nimport { Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarToggler } from 'reactstrap';\r\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">\r\n                            <img src=\"img/logo.png\" alt=\"JBC\" className=\"mr-2\" />Suite\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"flex-grow\" navbar>\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Processes\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/optimization\">\r\n                                                Process optimization\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/solderingreference\">\r\n                                                Solderings reference\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        QST\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/qst/task\">\r\n                                                Tasks\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/qst/workprocess\">\r\n                                                Work process\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/qst/stationsmanager\">\r\n                                                Stations manager\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Maintenance\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/maintenance/stationsupdate\">\r\n                                                Stations update\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport Footer from './content-components/Footer';\r\nimport NavMenu from './content-components/NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        {props.children}\r\n        <Footer/>\r\n    </React.Fragment>\r\n);\r\n","import CardLinkAppView from './CardLinkAppView'\r\n\r\nexport default CardLinkAppView;","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardText, CardBody, CardTitle, CardImg } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport './Card.css'\r\n\r\ntype CardProps = {\r\n    to: string,\r\n    imgPath: string,\r\n    cardText: string,\r\n    cardTitle: string,\r\n    alt: string\r\n};\r\n\r\nconst CardLinkAppView = ({ to, imgPath, cardText, cardTitle, alt }: CardProps) => {\r\n    return (\r\n        <NavLink className=\"card-link-app\" tag={Link} to={to}>\r\n            <Card className=\"box-shadow-v2\">\r\n                <CardBody>\r\n                    <CardImg src={imgPath} alt={alt} />\r\n                    <CardText className=\"pt-4\">{cardText}</CardText>\r\n                    <CardTitle>{cardTitle}</CardTitle>\r\n                </CardBody>\r\n            </Card>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default CardLinkAppView;","import ProcessOptimizationCardView from './ProcessOptimizationCardView';\r\n\r\nexport default ProcessOptimizationCardView;\r\n","import React from 'react'\r\nimport CardLinkApp from '../../CardLinkApp';\r\n\r\nconst ProcessOptimizationCardView = () => {\r\n    return (\r\n        <CardLinkApp \r\n            to=\"/processes/optimization\"\r\n            imgPath=\"img/iconImg/processOptimization.png\"\r\n            cardText=\"Optimize your processes by choosing the best combination of working temperature and the ideal cartridge.\"\r\n            cardTitle=\"Process optimization\"\r\n            alt=\"Process Optimization\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProcessOptimizationCardView;\r\n\r\n","import React from 'react'\r\nimport CardLinkApp from '../../CardLinkApp';\r\n\r\n\r\nconst SolderingReferenceCardView = () => {\r\n    return (\r\n        <CardLinkApp \r\n            to=\"/processes/solderingreference\"\r\n            imgPath=\"img/iconImg/solderingAssistant.png\"\r\n            cardText=\"Pre-stored soldering joint and compare in real-time with all the new soldering processes.\"\r\n            cardTitle=\"Solderings reference\"\r\n            alt=\"Solderings Reference\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default SolderingReferenceCardView;\r\n\r\n","import SolderingReferenceCardView from './SolderingReferenceCardView';\r\n\r\nexport default SolderingReferenceCardView;","import TasksCardView from './TasksCardView'\r\n\r\nexport default TasksCardView","import React from 'react'\r\nimport CardLinkApp from '../../CardLinkApp';\r\n\r\nconst TasksCardView = () => {\r\n    return (\r\n        <CardLinkApp \r\n            to=\"/qst/task\"\r\n            imgPath=\"img/iconImg/tasksTraceability.png\"\r\n            cardText=\"Access the list of registered jobs and create new tasks.\"\r\n            cardTitle=\"Tasks\"\r\n            alt=\"Tasks QST\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default TasksCardView;\r\n\r\n","import WordProcessCardView from './WorkProcessCardView';\r\n\r\nexport default WordProcessCardView;","import React from 'react'\r\nimport CardLinkApp from '../../CardLinkApp';\r\n\r\nconst WorkProcessCardView = () => {\r\n    return (\r\n        <CardLinkApp \r\n            to=\"/qst/workprocess\"\r\n            imgPath=\"img/iconImg/workProcess.png\"\r\n            cardText=\"Register your work in the QST system.\"\r\n            cardTitle=\"Work process\"\r\n            alt=\"Work Process\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default WorkProcessCardView;\r\n\r\n","import StationUpdateCard from './StationsUpdateCardView';\r\n\r\nexport default StationUpdateCard;","import React from 'react'\r\nimport CardLinkApp from '../../CardLinkApp';\r\n\r\nconst StationsUpdateCardView = () => {\r\n    return (\r\n        <CardLinkApp \r\n            to=\"/maintenance/stationsupdate\"\r\n            imgPath=\"img/iconImg/updateStations.png\"\r\n            cardText=\"Update stations for better performance and better user experience.\"\r\n            cardTitle=\"Stations update\"\r\n            alt=\"Stations update\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default StationsUpdateCardView;\r\n\r\n","import CardLinkSectionView from './CardLinkSectionView'\r\n\r\nexport default CardLinkSectionView;","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody, CardTitle, CardImg } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport './Card.css'\r\n\r\ntype CardProps = {\r\n    to: string,\r\n    imgPath: string,\r\n    cardTitle: string,\r\n    alt: string\r\n};\r\n\r\nconst CardLinkSectionView = ({ to, imgPath, cardTitle, alt }: CardProps) => {\r\n    return (\r\n        <NavLink className=\"card-link-section\" tag={Link} to={to}>\r\n            <Card className=\"box-shadow-v2\">\r\n                <CardBody>\r\n                    <Row>\r\n                        <Col xs=\"2\">\r\n                            <CardImg src={imgPath} alt={alt} />\r\n                        </Col>\r\n                        <Col xs=\"10\">\r\n                            <CardTitle>{cardTitle}</CardTitle>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default CardLinkSectionView;","import QSTCardView from './QSTCardView';\r\n\r\nexport default QSTCardView;","import React from 'react'\r\nimport CardLinkSectionView from '../../CardLinkSection';\r\n\r\nconst QSTCardView = () => {\r\n    return (\r\n        <CardLinkSectionView\r\n            to=\"/qst\"\r\n            imgPath=\"img/iconImg/traceability.png\"\r\n            cardTitle=\"QST\"\r\n            alt=\"QST\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default QSTCardView;","import ProcessesCardView from './ProcessesCardView';\r\n\r\nexport default ProcessesCardView;","import React from 'react'\r\nimport CardLinkSectionView from '../../CardLinkSection';\r\n\r\nconst ProcessesCardView = () => {\r\n    return (\r\n        <CardLinkSectionView\r\n            to=\"/processes\"\r\n            imgPath=\"img/iconImg/processes.png\"\r\n            cardTitle=\"Processes\"\r\n            alt=\"Processes\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProcessesCardView;","import MaintenanceCardView from './MaintenanceCardView';\r\n\r\nexport default MaintenanceCardView;","import React from 'react'\r\nimport CardLinkSectionView from '../../CardLinkSection';\r\n\r\nconst MaintenanceCardView = () => {\r\n    return (\r\n        <CardLinkSectionView\r\n            to=\"/maintenance\"\r\n            imgPath=\"img/iconImg/manteinance.png\"\r\n            cardTitle=\"Maintenance\"\r\n            alt=\"Maintenance\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default MaintenanceCardView;","import Home from './Home';\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Col, Row } from 'reactstrap';\r\nimport ProcessOptimizationCard from '../../content-parts/CardLinkApp/ProcessOptimizationCard';\r\nimport SolderingReferenceCard from '../../content-parts/CardLinkApp/SolderingReferenceCard';\r\nimport TasksCard from '../../content-parts/CardLinkApp/TasksCard'\r\nimport WorkProcessCard from '../../content-parts/CardLinkApp/WorkProcessCard';\r\nimport StationsUpdateCard from '../../content-parts/CardLinkApp/StationsUpdateCard';\r\nimport QSTCardSection from '../../content-parts/CardLinkSection/QSTCard'\r\nimport ProcessesCardSection from '../../content-parts/CardLinkSection/ProcessesCard'\r\nimport MaintenanceCard from '../../content-parts/CardLinkSection/MaintenanceCard'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"bg-dark-v2 pt-4 pb-4 mb-4\">\r\n                <Container>\r\n                    <Row className=\"mb-1\">\r\n                        <h2 className=\"text-white text-center w-100\">Sections</h2>\r\n                    </Row>\r\n                    <Row xs={1} sm={2} md={3} className=\"mb-5\">\r\n                        <Col>\r\n                            <ProcessesCardSection />\r\n                        </Col>\r\n                        <Col>\r\n                            <QSTCardSection />\r\n                        </Col>\r\n                        <Col>\r\n                            <MaintenanceCard />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <div>\r\n                <Container>\r\n                    <Row className=\"mb-1\">\r\n                        <h2 className=\"text-center w-100\">Featured applications</h2>\r\n                    </Row>\r\n                    <Row className=\"content-center\" xs={1} sm={2} md={3}>\r\n                        <Col>\r\n                            <ProcessOptimizationCard />\r\n                        </Col>\r\n                        <Col>\r\n                            <SolderingReferenceCard />\r\n                        </Col>\r\n                        <Col>\r\n                            <TasksCard />\r\n                        </Col>\r\n                        <Col>\r\n                            <WorkProcessCard/>\r\n                        </Col>\r\n                        <Col>\r\n                            <StationsUpdateCard />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","import Maintenance from './Maintenance';\r\n\r\nexport default Maintenance;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Col, Row } from 'reactstrap';\r\nimport StationsUpdateCard from '../../../content-parts/CardLinkApp/StationsUpdateCard';\r\n\r\nconst Maintenance = () => {\r\n        return (\r\n            <Container>\r\n                <Row className=\"content-center\" xs={1} sm={2} md={3}>\r\n                    <Col>\r\n                        <StationsUpdateCard/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n};\r\n\r\nexport default Maintenance;\r\n","const Configuration = {\r\n    FakeMode: (process.env.REACT_APP_FAKE_MODE === 'true')\r\n}\r\n\r\nexport default Configuration\r\n","export function TimeToString(sec_num, format) {\r\n\r\n    var showHours = false;\r\n    var padHours = false;\r\n    var showMinutes = false;\r\n    var padMinutes = false;\r\n    var showSeconds = false;\r\n    var padSeconds = false;\r\n\r\n    if (format.indexOf(\"hh\") >= 0) { showHours = true; padHours = true; }\r\n    else if (format.indexOf(\"h\") >= 0) { showHours = true; padHours = false; }\r\n\r\n    if (format.indexOf(\"mm\") >= 0) { showMinutes = true; padMinutes = true; }\r\n    else if (format.indexOf(\"m\") >= 0) { showMinutes = true; padMinutes = false; }\r\n\r\n    if (format.indexOf(\"ss\") >= 0) { showSeconds = true; padSeconds = true; }\r\n    else if (format.indexOf(\"s\") >= 0) { showSeconds = true; padSeconds = false; }\r\n\r\n    var hours = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n\r\n    if (showHours) {\r\n        if (hours < 10 && padHours) { hours = \"0\" + hours; }\r\n        result += hours;\r\n    }\r\n    if (showMinutes) {\r\n        if (minutes < 10 && padMinutes) { minutes = \"0\" + minutes; }\r\n        if (result !== \"\") { result += \":\"; }\r\n        result += minutes;\r\n    }\r\n    if (showSeconds) {\r\n        if (seconds < 10 && padSeconds) { seconds = \"0\" + seconds; }\r\n        if (result !== \"\") { result += \":\"; }\r\n        result += seconds;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function SecToString(sec_num) {\r\n    if (sec_num < 0) {\r\n        return \"\";\r\n    }\r\n\r\n    var hours = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n\r\n    if (hours !== 0) {\r\n        result += hours;\r\n        result += \":\";\r\n    }\r\n\r\n    if (minutes < 10) { minutes = \"0\" + minutes; }\r\n    result += minutes;\r\n    result += \":\";\r\n\r\n    if (seconds < 10) { seconds = \"0\" + seconds; }\r\n    result += seconds;\r\n\r\n    return result;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as AssistantStore from '../store/Assistant';\r\nimport * as StationStore from '../store/Station';\r\nimport * as StationUpdateStore from '../store/StationUpdate';\r\nimport * as TaskStore from '../store/Task';\r\nimport { sleep } from '../utils/timeUtils';\r\n\r\nclass FakeService {\r\n    static components = [\r\n        \"surface\", \"mount\", \"resistor\", \"led\",\r\n        \"R1\", \"R2\", \"R10\", \"R20\", \"PCB\",\r\n        \"C1\", \"C2\", \"C10\", \"C20\",\r\n        \"diode\", \"transistor\", \"capacitor\", \"magnetic\",\r\n        \"switches\", \"terminals\", \"thru-hole\"]\r\n\r\n    static stationsName = [\"Roberto\", \"Marta\", \"Luke\", \"Sara\"]\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult() {\r\n        console.log(\"FAKE SERVICE: getSolderingResult\");\r\n        return {\r\n            energy: Math.floor(Math.random() * 10) + 40,\r\n            similarity: Math.floor(Math.random() * 500) + 500,\r\n            tenthsOfSecondSoldering: Math.floor(Math.random() * 10) + 30\r\n        };\r\n    }\r\n\r\n    static async countReferences() {\r\n        console.log(\"FAKE SERVICE: countReferences\");\r\n        return 60;\r\n    }\r\n\r\n    static async getReferences() {\r\n        console.log(\"FAKE SERVICE: getReferences\");\r\n        await sleep(1000);\r\n        return this._getReferences(15);\r\n    }\r\n\r\n    static async getReferenceById() {\r\n        console.log(\"FAKE SERVICE: getReferenceById\");\r\n        await sleep(1000);\r\n        return (await this._getReferences(1))[0];\r\n    }\r\n\r\n    static async _getReferences(nReferences: number) {\r\n        let references = [] as AssistantStore.Reference[];\r\n\r\n        for (var id = 1; id <= nReferences; id++) {\r\n            let referenceName = \"\";\r\n            for (var i = 0; i < Math.floor(Math.random() * 4); i++) {\r\n                referenceName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let reference = {\r\n                id: id,\r\n                name: referenceName,\r\n                power: [109, 136, 162, 181, 205, 216, 208, 205, 216, 208, 205, 216, 208,\r\n                    199, 182, 165, 151, 141, 136, 132, 131, 131, 134, 131, 134, 131],\r\n                cartridge: 'C245004',\r\n                temperature: 350 * 9,\r\n                durationTenthsSeconds: 64\r\n            };\r\n\r\n            references.push(reference);\r\n        }\r\n\r\n        return references;\r\n    }\r\n\r\n    static async deleteReference() {\r\n        console.log(\"FAKE SERVICE: deleteReference\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async uploadReference() {\r\n        console.log(\"FAKE SERVICE: uploadReference\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async downloadReference() {\r\n        console.log(\"FAKE SERVICE: downloadReference\");\r\n        return '{\"_Type\":\"REFERENCE\",\"_V\":1,\"_\":{\"NumData\":[{\"P\":84,\"T\":3170},{\"P\":84,\"T\":3169}]}}';\r\n    }\r\n\r\n    static async generateReferenceSoldering() {\r\n        console.log(\"FAKE SERVICE: generateReferenceSoldering\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks() {\r\n        console.log(\"FAKE SERVICE: countTasks\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTasks() {\r\n        console.log(\"FAKE SERVICE: getTasks\");\r\n        await sleep(1000);\r\n        return this._getTasks(25);\r\n    }\r\n\r\n    static async getTaskById() {\r\n        console.log(\"FAKE SERVICE: getTaskById\");\r\n        await sleep(1000);\r\n        return (await this._getTasks(1))[0];\r\n    }\r\n\r\n    static async _getTasks(nTasks: number) {\r\n        let tasks = [] as TaskStore.Task[];\r\n\r\n        for (var taskId = 1; taskId <= nTasks; taskId++) {\r\n\r\n            let taskName = \"\";\r\n            for (var i = 0; i < 4; i++) {\r\n                taskName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let changeSelectedTemp = Math.round(Math.random() * 1) === 1 ? true : false;\r\n            let changeSolderingReference = Math.round(Math.random() * 1) === 1 ? true : false;\r\n            let qualityControl = Math.round(Math.random() * 1) === 1 ? true : false;\r\n\r\n            let task = {\r\n                id: taskId,\r\n                name: taskName,\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selectedTemp: selectedTemp,\r\n                    changeSelectedTemp: changeSelectedTemp,\r\n                    solderingReferenceId: 1,\r\n                    changeSolderingReference: changeSolderingReference,\r\n                    qualityControl: qualityControl\r\n                },\r\n                timesPerformed: Math.floor(Math.random() * 3)\r\n            };\r\n\r\n            tasks.push(task);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async createTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: createTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async updateTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: updateTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async deleteTask(id: number) {\r\n        console.log(\"FAKE SERVICE: deleteTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: countTaskHistories\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: getTaskHistories\");\r\n        await sleep(2000);\r\n        return this._getTaskHistories(25)\r\n    }\r\n\r\n    static async getTaskHistoryById() {\r\n        console.log(\"FAKE SERVICE: getTaskHistoryById\");\r\n        await sleep(1000);\r\n        return (await this._getTaskHistories(1))[0];\r\n    }\r\n\r\n    static async _getTaskHistories(nTasks: number) {\r\n        let taskHistories = []\r\n\r\n        for (var historyId = 1; historyId <= nTasks; historyId++) {\r\n            let length = Math.floor(Math.random() * 500) + 30;\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let change_selected_temp = Math.round(Math.random() * 1) === 1 ? true : false;\r\n            let change_soldering_ref = Math.round(Math.random() * 1) === 1 ? true : false;\r\n\r\n            let taskHistory = {\r\n                id: historyId + 1000,\r\n                finishDate: Date.now(),\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selectedTemp: selectedTemp,\r\n                    changeSelectedTemp: change_selected_temp,\r\n                    solderingReference: (await this._getReferences(1))[0],\r\n                    changeSolderingReference: change_soldering_ref\r\n                },\r\n                workData: {\r\n                    stationId: \"U1H23UI12HN3IBN\",\r\n                    stationName: this.stationsName[Math.floor(Math.random() * this.stationsName.length)] + \"'s DDE\",\r\n                    stationPort: 1,\r\n                    temperature: Array.from({ length: length }, () => ((Math.floor(Math.random() * 100)) + 300) * 9),\r\n                    power: Array.from({ length: length }, () => Math.floor(Math.random() * 200)),\r\n                    workSolderings: [\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: 0\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n\r\n            taskHistories.push(taskHistory);\r\n        }\r\n\r\n        return taskHistories;\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace() {\r\n        console.log(\"FAKE SERVICE: startTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async stopTrace() {\r\n        console.log(\"FAKE SERVICE: stopTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async startRealTimeData() {\r\n        console.log(\"FAKE SERVICE: startRealTimeData\");\r\n        await sleep(1000);\r\n        return 1;\r\n    }\r\n\r\n    static async stopRealTimeData() {\r\n        console.log(\"FAKE SERVICE: stopRealTimeData\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async getRealTimeData() {\r\n        console.log(\"FAKE SERVICE: getRealTimeData\");\r\n\r\n        var d = new Date();\r\n        var seconds = d.getSeconds() % 10;\r\n\r\n        var isPortEnabled = seconds > 0;\r\n\r\n        var toolStatus = 0;\r\n        if (seconds === 1) toolStatus = 8;\r\n        if (seconds === 2) toolStatus = 4;\r\n        if (seconds === 3) toolStatus = 2;\r\n        if (seconds === 4) toolStatus = 1;\r\n\r\n        var isCalibrating =\r\n            (seconds >= 5) &&\r\n            (seconds <= 6);\r\n\r\n        var isSoldering =\r\n            (seconds >= 8) &&\r\n            (seconds <= 9);\r\n\r\n        return [{\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        },\r\n        {\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        }]\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByCartridge\");\r\n        await sleep(2000);\r\n\r\n        let data = [];\r\n        for (var i = 0; i < 35; i++) {\r\n            data.push({\r\n                temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n                power: (Math.floor(Math.random() * 100) + 100) * 10\r\n            })\r\n        }\r\n\r\n        return {\r\n            data: data,\r\n            energy: data.reduce(((total, x) => total + x.power), 0),\r\n            time: data.length,\r\n            cartridge: \"C245029\",\r\n            selectedTemp: 350 * 9\r\n        }\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByTemperature\");\r\n        await sleep(2000);\r\n\r\n        let points = [{\r\n            temperature: 250 * 9,\r\n            tipLife: 3,\r\n            rateSoldMin: 3\r\n        }, {\r\n            temperature: 300 * 9,\r\n            tipLife: 1.75,\r\n            rateSoldMin: 5\r\n        }, {\r\n            temperature: 350 * 9,\r\n            tipLife: 1,\r\n            rateSoldMin: 8\r\n        }, {\r\n            temperature: 400 * 9,\r\n            tipLife: 0.5,\r\n            rateSoldMin: 11\r\n        }];\r\n\r\n        let recommended = {\r\n            temperature: 350 * 9,\r\n            tipLife: 1,\r\n            rateSoldMin: 8\r\n        };\r\n\r\n        let performance = {\r\n            temperature: 400 * 9,\r\n            tipLife: 0.5,\r\n            rateSoldMin: 11\r\n        };\r\n\r\n        let durability = {\r\n            temperature: 300 * 9,\r\n            tipLife: 1.75,\r\n            rateSoldMin: 5\r\n        };\r\n\r\n        return {\r\n            points: points,\r\n            recommended: recommended,\r\n            performance: performance,\r\n            durability: durability\r\n        }\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        console.log(\"FAKE SERVICE: getStations\");\r\n        await sleep(1000);\r\n        let scs = [] as StationStore.StationController[]\r\n\r\n        for (var iSc = 1; iSc <= 2; iSc++) {\r\n            let scId = \"sc\" + iSc\r\n            let sc =\r\n                {\r\n                    id: scId,\r\n                    url: \"192.168.1.1\",\r\n                    name: \"Lab-\" + iSc,\r\n                    isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                    stations: []\r\n                } as StationStore.StationController;\r\n\r\n            for (var iSt = 1; iSt <= 3; iSt++) {\r\n                let stationId = scId + \"_\" + iSt;\r\n                let station =\r\n                    {\r\n                        id: stationId,\r\n                        name: this.stationsName[Math.floor(Math.random() * this.stationsName.length)] + \"'s DDE \" + iSt,\r\n                        software: (8886000 + iSt).toString(),\r\n                        hardware: Math.round(Math.random() * 1) === 1 ? \"5550001\" : \"5550002\",\r\n                        model: \"DDE\",\r\n                        isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                        ports: []\r\n                    } as StationStore.Station;\r\n\r\n                let nPorts = Math.pow(2, Math.floor(Math.random() * 3));\r\n                for (var p = 0; p < nPorts; p++) {\r\n                    let port =\r\n                        {\r\n                            id: p,\r\n                            tool: Math.floor(Math.random() * 8) + 1\r\n                        } as StationStore.Port;\r\n                    station.ports.push(port);\r\n                }\r\n\r\n                sc.stations.push(station);\r\n            }\r\n\r\n            scs.push(sc);\r\n        }\r\n\r\n        return scs;\r\n    }\r\n\r\n    static async setSelectedTemperature() {\r\n        console.log(\"FAKE SERVICE: setSelectedTemperature\");\r\n    }\r\n\r\n    static async setTraceabilityMode() {\r\n        console.log(\"FAKE SERVICE: setTraceabilityMode\");\r\n    }\r\n\r\n    // stations update\r\n\r\n    static async getStationsUpdateInfo() {\r\n        console.log(\"FAKE SERVICE: getStationsUpdateInfo\");\r\n        await sleep(1000);\r\n        \r\n        let updates = [];\r\n        let update =\r\n        {\r\n            model: \"DDE\",\r\n            software: \"8886001\",\r\n            hardware: \"5550001\",\r\n            language: \"English\"\r\n        };\r\n        updates.push(update);\r\n\r\n        update =\r\n        {\r\n            model: \"DDE\",\r\n            software: \"8886002\",\r\n            hardware: \"5550002\",\r\n            language: \"English\"\r\n        };\r\n        updates.push(update);\r\n\r\n        update =\r\n        {\r\n            model: \"DDE\",\r\n            software: \"8886003\",\r\n            hardware: \"5550002\",\r\n            language: \"Chinese\"\r\n        };\r\n        updates.push(update);\r\n\r\n        return updates;\r\n    }\r\n\r\n    static async updateStations() {\r\n        console.log(\"FAKE SERVICE: updateStations\");\r\n    }\r\n}\r\n\r\nexport default FakeService;\r\n","import axios from 'axios';\r\nconst proxy = process.env.REACT_APP_PROXY;\r\n\r\n\r\nconst ENDPOINT_ASSISTANT =            '/api/assistant'\r\nconst ENDPOINT_PROCESS_OPTIMIZATION = '/api/processoptimization'\r\nconst ENDPOINT_REAL_TIME =            '/api/realtimedata';\r\nconst ENDPOINT_STATIONS =             '/api/station';\r\nconst ENDPOINT_STATIONS_UPDATE =      '/api/stationupdate';\r\nconst ENDPOINT_TRACE =                '/api/trace';\r\nconst ENDPOINT_WORK =                 '/api/work';\r\nconst ENDPOINT_WORK_HISTORY =         '/api/workhistory';\r\n\r\nclass RestService {\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult(stationControllerId, stationId, port) {\r\n        return await this.doGetRequest(\r\n            ENDPOINT_ASSISTANT +\r\n            \"/solderingresult\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&stationport=\" + port);\r\n    }\r\n\r\n    static async countReferences() {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/count\");\r\n    }\r\n\r\n    static async getReferences(pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"?pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getReferenceById(id) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/\" + id);\r\n    }\r\n\r\n    static async deleteReference(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_ASSISTANT + \"/\" + id);\r\n    }\r\n\r\n    static async uploadReference(file) {\r\n        return await this.doFormDataPostRequest(ENDPOINT_ASSISTANT + \"/uploadreference\", file);\r\n    }\r\n\r\n    static async downloadReference(id) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/downloadreference?id=\" + id);\r\n    }\r\n\r\n    static async generateReferenceSoldering(stationControllerId, stationId, port, name, cartridge) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_ASSISTANT +\r\n            \"/generatereferencesoldering\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&stationport=\" + port +\r\n            \"&name=\" + name +\r\n            \"&cartridge=\" + cartridge);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks(filter) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/count?filter=\" + filter);\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"?filter=\" + filter + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    static async createTask(task) {\r\n        return await this.doPostRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        return await this.doPutRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/count?workid=\" + taskId);\r\n    }\r\n\r\n    static async getTaskHistories(taskId, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"?workid=\" + taskId + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/\" + id);\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace(taskId, stationControllerId, stationId, port) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_TRACE +\r\n            \"/start\" +\r\n            \"?workid=\" + taskId +\r\n            \"&stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopTrace(stationControllerId, stationId, port) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_TRACE +\r\n            \"/stop\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&stationport=\" + port);\r\n    }\r\n\r\n    // real time data\r\n\r\n    static async startRealTimeData(stationControllerId, stationId, port) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_REAL_TIME +\r\n            \"/start\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopRealTimeData(stationControllerId, stationId, queueId) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_REAL_TIME +\r\n            \"/stop\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&queueid=\" + queueId);\r\n    }\r\n\r\n    static async getRealTimeData(stationControllerId, stationId, queueId) {\r\n        return await this.doGetRequest(\r\n            ENDPOINT_REAL_TIME +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&queueid=\" + queueId);\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/cartridge\", solderings);\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/temperature\", solderings);\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        return await this.doGetRequest(ENDPOINT_STATIONS);\r\n    }\r\n\r\n    static async setSelectedTemperature(stationControllerId, stationId, port, temperature) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_STATIONS +\r\n            \"/setselectedtemperature\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&stationid=\" + stationId +\r\n            \"&stationport=\" + port +\r\n            \"&temperature=\" + temperature);\r\n    }\r\n\r\n    static async setTraceabilityMode(stationControllerId, newState) {\r\n        return await this.doPostRequest(\r\n            ENDPOINT_STATIONS +\r\n            \"/settraceabilitymode\" +\r\n            \"?stationcontrollerid=\" + stationControllerId +\r\n            \"&qststate=\" + newState);\r\n    }\r\n\r\n    // stations update\r\n\r\n    static async getStationsUpdateInfo() {\r\n        return await this.doGetRequest(ENDPOINT_STATIONS_UPDATE);\r\n    }\r\n\r\n    static async updateStations(stationsToUpdate) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS_UPDATE, stationsToUpdate);\r\n    }\r\n\r\n    // api requests\r\n\r\n    static async doGetRequest(resource) {\r\n        try {\r\n            const success = await axios({\r\n                method: 'get',\r\n                url: resource,\r\n                baseURL: proxy\r\n            });\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPostRequest(resource, data) {\r\n        try {\r\n            const success = await axios({\r\n                method: 'post',\r\n                url: resource,\r\n                baseURL: proxy,\r\n                data: data\r\n            });\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doFormDataPostRequest(resource, data) {\r\n        try {\r\n            const success = await axios({\r\n                method: 'post',\r\n                url: resource,\r\n                baseURL: proxy,\r\n                data: data,\r\n                config: {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            });\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPutRequest(resource, data) {\r\n        try {\r\n            await axios({\r\n                method: 'put',\r\n                url: resource,\r\n                baseURL: proxy,\r\n                data: data\r\n            });\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n\r\n    static async doDeleteRequest(resource) {\r\n        try {\r\n            await axios({\r\n                method: 'delete',\r\n                url: resource,\r\n                baseURL: proxy\r\n            });\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RestService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass StationsService {\r\n    static async getStations() {\r\n        let stations;\r\n\r\n        if (Configuration.FakeMode) {\r\n            stations = FakeService.getStations();\r\n        }\r\n        else {\r\n            stations = await RestService.getStations();\r\n        }\r\n\r\n        return stations;\r\n    }\r\n\r\n    static async setSelectedTemperature(stationControllerId, stationId, port, temperature) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setSelectedTemperature();\r\n        }\r\n        else {\r\n            await RestService.setSelectedTemperature(stationControllerId, stationId, port, temperature);\r\n        }\r\n    }\r\n\r\n    static async setTraceabilityMode(stationControllerId, newState) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setTraceabilityMode();\r\n        }\r\n        else {\r\n            await RestService.setTraceabilityMode(stationControllerId, newState);\r\n        }\r\n    }\r\n}\r\n\r\nexport default StationsService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass StationsUpdateService {\r\n    static async getStationsUpdateInfo() {\r\n        let stations;\r\n\r\n        if (Configuration.FakeMode) {\r\n            stations = FakeService.getStationsUpdateInfo();\r\n        }\r\n        else {\r\n            stations = await RestService.getStationsUpdateInfo();\r\n        }\r\n\r\n        return stations;\r\n    }\r\n\r\n    static async updateStations(stationsToUpdate) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.updateStations();\r\n        }\r\n        else {\r\n            await RestService.updateStations(stationsToUpdate);\r\n        }\r\n    }\r\n}\r\n\r\nexport default StationsUpdateService;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Button, Input, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport * as StationUpdateStore from '../../../../store/StationUpdate';\r\nimport { IUpdateStation } from './data/IUpdateStation';\r\n\r\ntype StationsUpdateProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    stationsUpdate: StationUpdateStore.StationUpdate[],\r\n    isLoading: boolean,\r\n    handleUpdateClick: (stationsToUpdate: IUpdateStation[]) => void,\r\n}\r\n\r\ninterface IUpdateStationLanguage {\r\n    stationId: string,\r\n    language: string\r\n}\r\n\r\ninterface IState {\r\n    stationsToUpdate: IUpdateStation[],\r\n    showUpdateButton: boolean,\r\n    selectedLanguages: IUpdateStationLanguage[]\r\n}\r\n\r\nclass StationsUpdateView extends React.PureComponent<StationsUpdateProps, IState> {\r\n    constructor(props: StationsUpdateProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stationsToUpdate: [],\r\n            showUpdateButton: false,\r\n            selectedLanguages: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            let count = this.props.stationControllers.reduce(((total, x) =>\r\n                total + x.stations.length\r\n            ), 0);\r\n\r\n            if (count === 0) {\r\n                return \"No stations connected.\";\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => {\r\n                            let softwareAvailable;\r\n                            let updateAvailable = false;\r\n                            let updates = this.props.stationsUpdate\r\n                                .filter(x =>\r\n                                    x.model === s.model &&\r\n                                    (x.hardware === \"\" || x.hardware === s.hardware)\r\n                                );\r\n\r\n                            if (updates.length === 0) {\r\n                                softwareAvailable = \"No update available\";\r\n                            }\r\n                            else if (updates.length === 1) {\r\n                                let update = updates[0];\r\n\r\n                                if (update.software === s.software) {\r\n                                    softwareAvailable = \"Updated\";\r\n                                }\r\n                                else {\r\n                                    softwareAvailable = update.software;\r\n                                    updateAvailable = true;\r\n                                }\r\n                            }\r\n                            else if (updates.length > 1) {\r\n                                softwareAvailable =\r\n                                    <Input type=\"select\" onChange={handleSelectedLanguage}>\r\n                                        {updates.map(x => \r\n                                            <option\r\n                                                value={JSON.stringify({stationId: s.id, language: x.language})}\r\n                                            >\r\n                                                {x.software} ({x.language})\r\n                                            </option>\r\n                                        )}\r\n                                    </Input>\r\n                                updateAvailable = true;\r\n                            }\r\n                            \r\n                            return (\r\n                                <tr className={(updateAvailable ? \"font-weight-bold\" : \"\") + \" pointer\"}>\r\n                                    <td>{\r\n                                        updateAvailable ?\r\n                                            <Input\r\n                                                type=\"checkbox\"\r\n                                                onChange={() => handleStationClick(sc.id, s.id)}\r\n                                            /> : \"\"\r\n                                    }</td>\r\n                                    <td>{s.name} [{s.model}]</td>\r\n                                    <td>{s.software}</td>\r\n                                    <td>{softwareAvailable}</td>\r\n                                </tr>);\r\n                        })\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\"></th>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Program version</th>\r\n                            <th scope=\"col\">Available program version</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        };\r\n\r\n        const getListOptionsStationControllersCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getButton = () => {\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    disabled={!this.state.showUpdateButton}\r\n                    onClick={handleUpdateClick}\r\n                >Update</Button>)\r\n        }\r\n\r\n        const handleSelectedLanguage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            let selectedLanguage = JSON.parse(event.target.value) as IUpdateStationLanguage;\r\n\r\n            let selectedLanguages = this.state.selectedLanguages;\r\n            selectedLanguages = selectedLanguages.filter(x => x.stationId !== selectedLanguage.stationId);\r\n            selectedLanguages.push(selectedLanguage);\r\n\r\n            this.setState({\r\n                selectedLanguages: selectedLanguages\r\n            });\r\n        }\r\n\r\n        const handleStationClick = (stationControllerId: string, stationId: string) => {\r\n            let stationsToUpdate = this.state.stationsToUpdate;\r\n            let exists = stationsToUpdate.find(x => x.stationId === stationId) !== undefined;\r\n\r\n            if (exists) {\r\n                stationsToUpdate = stationsToUpdate.filter(x => x.stationId !== stationId);\r\n            }\r\n            else {\r\n                stationsToUpdate.push({\r\n                    stationControllerId: stationControllerId,\r\n                    stationId: stationId,\r\n                    language: \"English\"\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                stationsToUpdate: stationsToUpdate,\r\n                showUpdateButton: stationsToUpdate.length > 0\r\n            });\r\n        }\r\n\r\n        const handleUpdateClick = () => {\r\n            let stations = this.state.stationsToUpdate.map(x => {\r\n                let selectedLanguage = this.state.selectedLanguages.find(lang => x.stationId === lang.stationId);\r\n                let language = selectedLanguage === undefined ? \"English\" : selectedLanguage.language;\r\n\r\n                x.language = language;\r\n                return x;\r\n            });\r\n\r\n            this.props.handleUpdateClick(stations);\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <h1>Updates available</h1>\r\n                </Row>\r\n                <Row>\r\n                    {getListOptionsStationControllersCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getButton()}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsUpdateView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport * as StationUpdateStore from '../../../../store/StationUpdate';\r\nimport StationService from '../../../../services/station.service';\r\nimport StationsUpdateService from '../../../../services/stationsUpdate.service';\r\nimport { IUpdateStation } from './data/IUpdateStation';\r\nimport StationsUpdateView from './StationsUpdateView';\r\n\r\ntype StationsUpdateProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    stationsUpdate: StationUpdateStore.StationUpdate[],\r\n    stationActions: typeof StationStore.actionCreators,\r\n    stationUpdateActions: typeof StationUpdateStore.actionCreators\r\n} & StationStore.StationState\r\n  & StationUpdateStore.StationUpdateState\r\n  & typeof StationStore.actionCreators\r\n  & typeof StationUpdateStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoadingStations: boolean,\r\n    isLoadingUpdates: boolean\r\n}\r\n\r\nclass StationsUpdate extends React.PureComponent<StationsUpdateProps, IState> {\r\n    constructor(props: StationsUpdateProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoadingStations: true,\r\n            isLoadingUpdates: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n        this.searchStationsUpdates(this.props);\r\n    }\r\n\r\n    searchStations(props: StationsUpdateProps) {\r\n        props.stationActions.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoadingStations: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                if (Array.isArray(scs)) {\r\n                    scs.forEach((sc: StationStore.StationController) => {\r\n                        props.stationActions.createStationController(sc);\r\n\r\n                        sc.stations.forEach((s: StationStore.Station) =>\r\n                            props.stationActions.createStation(s, sc.id)\r\n                        )\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    isLoadingStations: false\r\n                })\r\n            });\r\n    }\r\n\r\n    searchStationsUpdates(props: StationsUpdateProps) {\r\n        props.stationUpdateActions.deleteAllStationUpdates();\r\n\r\n        this.setState({\r\n            isLoadingUpdates: true\r\n        })\r\n\r\n        StationsUpdateService\r\n            .getStationsUpdateInfo()\r\n            .then(updates => {\r\n                if (Array.isArray(updates)) {\r\n                    updates.forEach((x: StationUpdateStore.StationUpdate) =>\r\n                        props.stationUpdateActions.createStationUpdate(x)\r\n                    )\r\n                }\r\n\r\n                this.setState({\r\n                    isLoadingUpdates: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleUpdateClick = (stationsToUpdate: IUpdateStation[]) => {\r\n            StationsUpdateService.updateStations(stationsToUpdate);\r\n        }\r\n\r\n        return (\r\n            <StationsUpdateView\r\n                stationControllers={this.props.stationControllers}\r\n                stationsUpdate={this.props.stationsUpdate}\r\n                isLoading={this.state.isLoadingStations && this.state.isLoadingUpdates}\r\n                handleUpdateClick={handleUpdateClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers,\r\n        stationsUpdate: state.stationUpdate.stationsUpdate\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        stationActions: bindActionCreators(StationStore.actionCreators, dispatch),\r\n        stationUpdateActions: bindActionCreators(StationUpdateStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(StationsUpdate);\r\n","import StationsUpdate from './StationsUpdate';\r\n\r\nexport default StationsUpdate;\r\n","import Processes from './Processes';\r\n\r\nexport default Processes;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Col, Row } from 'reactstrap';\r\nimport ProcessOptimizationCard from '../../../content-parts/CardLinkApp/ProcessOptimizationCard';\r\nimport SolderingReferenceCardView from '../../../content-parts/CardLinkApp/SolderingReferenceCard/SolderingReferenceCardView';\r\n\r\nconst Processes = () => {\r\n    return(\r\n        <Container>\r\n            <Row className=\"content-center\" xs={1} sm={2} md={3}>\r\n                <Col>\r\n                    <ProcessOptimizationCard/>\r\n                </Col>\r\n                <Col>\r\n                    <SolderingReferenceCardView/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default Processes;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass AssistantService {\r\n    static async getSolderingResult(stationControllerId, stationId, port) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.getSolderingResult();\r\n        }\r\n        else {\r\n            result = await RestService.getSolderingResult(stationControllerId, stationId, port);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async countReferences() {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countReferences();\r\n        }\r\n        else {\r\n            count = await RestService.countReferences();\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getReferences(pageNumber, pageSize) {\r\n        let references;\r\n\r\n        if (Configuration.FakeMode) {\r\n            references = FakeService.getReferences();\r\n        }\r\n        else {\r\n            references = await RestService.getReferences(pageNumber, pageSize);\r\n        }\r\n\r\n        return references;\r\n    }\r\n\r\n    static async getReferenceById(id) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.getReferenceById();\r\n        }\r\n        else {\r\n            result = await RestService.getReferenceById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async deleteReference(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteReference();\r\n        }\r\n        else {\r\n            await RestService.deleteReference(id);\r\n        }\r\n    }\r\n\r\n    static async uploadReference(file) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.uploadReference();\r\n        }\r\n        else {\r\n            await RestService.uploadReference(file);\r\n        }\r\n    }\r\n\r\n    static async downloadReference(id) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.downloadReference();\r\n        }\r\n        else {\r\n            result = await RestService.downloadReference(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async generateReferenceSoldering(stationControllerId, stationId, port, name, cartridge) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.generateReferenceSoldering();\r\n        }\r\n        else {\r\n            await RestService.generateReferenceSoldering(stationControllerId, stationId, port, name, cartridge);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AssistantService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass ProcessOptimizationService {\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByCartridge();\r\n        }\r\n        else {\r\n            betterSoldering = await RestService.getBetterOptimizationByCartridge(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByTemperature();\r\n        }\r\n        else {\r\n            betterSoldering = await RestService.getBetterOptimizationByTemperature(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n}\r\n\r\nexport default ProcessOptimizationService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass WorkService {\r\n    static async startTrace(taskId, stationControllerId, stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.startTrace();\r\n        }\r\n        else {\r\n            await RestService.startTrace(taskId, stationControllerId, stationId, port);\r\n        }\r\n    }\r\n\r\n    static async stopTrace(stationControllerId, stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopTrace();\r\n        }\r\n        else {\r\n            await RestService.stopTrace(stationControllerId, stationId, port);\r\n        }\r\n    }\r\n\r\n    static async startRealTimeData(stationControllerId, stationId, port) {\r\n        let queueId;\r\n\r\n        if (Configuration.FakeMode) {\r\n            queueId = FakeService.startRealTimeData();\r\n        }\r\n        else {\r\n            queueId = await RestService.startRealTimeData(stationControllerId, stationId, port);\r\n        }\r\n\r\n        return queueId;\r\n    }\r\n\r\n    static async stopRealTimeData(stationControllerId, stationId, queueId) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopRealTimeData();\r\n        }\r\n        else {\r\n            await RestService.stopRealTimeData(stationControllerId, stationId, queueId);\r\n        }\r\n    }\r\n\r\n    static async getRealTimeData(stationControllerId, stationId, queueId) {\r\n        let data;\r\n\r\n        if (Configuration.FakeMode) {\r\n            data = FakeService.getRealTimeData();\r\n        }\r\n        else {\r\n            data = await RestService.getRealTimeData(stationControllerId, stationId, queueId);\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\nexport default WorkService;\r\n","export function TryParseInt(str, defaultValue) {\r\n    var retValue = defaultValue;\r\n    if (str !== null) {\r\n        if (str.length > 0) {\r\n            if (!isNaN(str)) {\r\n                retValue = parseInt(str);\r\n            }\r\n        }\r\n    }\r\n    return retValue;\r\n}\r\n\r\nexport function Round(num, decimals = 2) {\r\n    var f = 1;\r\n    for (var i = 0; i < decimals; i++) {\r\n        f *= 10;\r\n    }\r\n\r\n    return Math.round((num + Number.EPSILON) * f) / f;\r\n}\r\n","import MultiStepNav from './MultiStepNav';\r\n\r\nexport default MultiStepNav;\r\n","import * as React from 'react';\r\nimport './MultiStepNav.scss';\r\n\r\ntype MultiStepNavProps = {\r\n    labels: string[],\r\n    current: number\r\n}\r\n\r\nclass MultiStepNav extends React.PureComponent<MultiStepNavProps> {\r\n    public render() {\r\n        let items = this.props.labels.map((x, index) =>\r\n            <li className={index === this.props.current ? \"active\" : \"\"}>\r\n                <span>{x}</span>\r\n            </li>\r\n        )\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ul className=\"multi-step-nav\">{items}</ul>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default MultiStepNav;\r\n","export function GetTools() {\r\n    var tools =\r\n    {\r\n        1: \"T210\",\r\n        2: \"T245\",\r\n        3: \"PA\",\r\n        4: \"HT\",\r\n        5: \"DS\",\r\n        6: \"DR\",\r\n        7: \"NT105\",\r\n        8: \"NP105\",\r\n        9: \"T470\",\r\n\r\n        31: \"JT\",\r\n        32: \"TE\",\r\n        33: \"PHS\",\r\n        34: \"PHB\"\r\n    }\r\n    return tools;\r\n}\r\n\r\nexport function ToolToString(id) {\r\n    let tool = GetTools()[id];\r\n\r\n    if (typeof (tool) === \"undefined\") {\r\n        return \"No tool\";\r\n    }\r\n    else {\r\n        return tool;\r\n    }\r\n}\r\n\r\nexport function ToolImagePath(id) {\r\n    if (typeof (GetTools()[id]) === \"undefined\") {\r\n        return \"\";\r\n    }\r\n    else {\r\n        return \"img/tools/\" + GetTools()[id].toLowerCase() + \".png\";\r\n    }\r\n}\r\n","import StationsPortList from './StationsPortList';\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => void\r\n}\r\n\r\nclass StationsPortList extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            let count = this.props.stationControllers.reduce(((total, x) =>\r\n                total + x.stations.length\r\n            ), 0);\r\n\r\n            if (count === 0) {\r\n                return \"No stations connected.\";\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                                .map(p => (\r\n                                    <tr className=\"pointer\" onClick={() => this.props.handleStationClick(sc.id, s, p.id, p.tool)}>\r\n                                        <td>{s.name} [{s.model}]</td>\r\n                                        <td>{p.id + 1}</td>\r\n                                        <td>{ToolToString(p.tool)}</td>\r\n                                    </tr>\r\n                                ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            getListOptionsStationControllers()\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport StationsPortList from '../../../content-parts/StationsPortList';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoadingStations: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_Station extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoadingStations}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={this.props.handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const getStationsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {getStationsCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_Station;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Input } from 'reactstrap';\r\n\r\ntype ProcessOptimizationProps = {\r\n    selectedTemperature: number,\r\n    handleSelecTempChange: (temperature: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_Temp extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            <strong>Selected temperature:</strong>\r\n                            <Input\r\n                                type=\"select\"\r\n                                defaultValue={this.props.selectedTemperature / 9}\r\n                                onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                            >\r\n                                <option>425</option>\r\n                                <option>400</option>\r\n                                <option>375</option>\r\n                                <option>350</option>\r\n                                <option>325</option>\r\n                                <option>300</option>\r\n                            </Input>\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_Temp;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Input } from 'reactstrap';\r\n\r\ntype ProcessOptimizationProps = {\r\n    selectedOffsetTime: number,\r\n    handleOffsetTimeChange: (value: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_ProcessParameters extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            <strong>PCB preparation time (seconds):</strong>\r\n                            <Input\r\n                                defaultValue={this.props.selectedOffsetTime}\r\n                                onChange={(e) => this.props.handleOffsetTimeChange(e.target.value)} />\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_ProcessParameters;\r\n","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C470\",\r\n\"Default\":\"009\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"026\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"035\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"037\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"038\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"040\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"042\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"043\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"044\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"045\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"046\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"047\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"048\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"049\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"050\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"051\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"055\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"057\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"058\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"059\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"063\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"065\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"066\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"564\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP42\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C245\",\r\n\"Default\":\"029\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"2\",\r\n\"RT\":\"1022\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"3\",\r\n\"RT\":\"30\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"1\",\r\n\"RT\":\"1474\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"1\",\r\n\"RT\":\"1711\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"2\",\r\n\"RT\":\"408\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"1\",\r\n\"RT\":\"2602\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"2\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"053\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"054\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"3\",\r\n\"RT\":\"100\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"2\",\r\n\"RT\":\"765\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"3\",\r\n\"RT\":\"638\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"069\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"102\",\r\n\"G\":\"3\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"3\",\r\n\"RT\":\"118\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"1\",\r\n\"RT\":\"42\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"3\",\r\n\"RT\":\"195\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"3\",\r\n\"RT\":\"151\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"119\",\r\n\"G\":\"3\",\r\n\"RT\":\"2258\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"121\",\r\n\"G\":\"1\",\r\n\"RT\":\"166\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"122\",\r\n\"G\":\"2\",\r\n\"RT\":\"268\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"123\",\r\n\"G\":\"3\",\r\n\"RT\":\"143\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"3\",\r\n\"RT\":\"42\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"1\",\r\n\"RT\":\"1219\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"136\",\r\n\"G\":\"1\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"138\",\r\n\"G\":\"1\",\r\n\"RT\":\"36\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"150\",\r\n\"G\":\"3\",\r\n\"RT\":\"29\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"201\",\r\n\"G\":\"2\",\r\n\"RT\":\"1013\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"215\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"220\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"224\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"226\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"227\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"228\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"234\",\r\n\"G\":\"2\",\r\n\"RT\":\"463\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"247\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"248\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"250\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"256\",\r\n\"G\":\"3\",\r\n\"RT\":\"101\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"259\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"260\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"261\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"268\",\r\n\"G\":\"3\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"301\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"303\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"304\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"305\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"306\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"311\",\r\n\"G\":\"2\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"312\",\r\n\"G\":\"2\",\r\n\"RT\":\"244\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"313\",\r\n\"G\":\"2\",\r\n\"RT\":\"114\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"315\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"344\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"351\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"352\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"254\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"273\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"3\",\r\n\"RT\":\"139\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"627\",\r\n\"G\":\"3\",\r\n\"RT\":\"239\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"628\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"651\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"654\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"667\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"669\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"673\",\r\n\"G\":\"2\",\r\n\"RT\":\"168\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"708\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"710\",\r\n\"G\":\"2\",\r\n\"RT\":\"922\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"729\",\r\n\"G\":\"3\",\r\n\"RT\":\"213\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"730\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"731\",\r\n\"G\":\"2\",\r\n\"RT\":\"1233\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"732\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"741\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"742\",\r\n\"G\":\"2\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"747\",\r\n\"G\":\"1\",\r\n\"RT\":\"2530\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"748\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"749\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"751\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"752\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"754\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"755\",\r\n\"G\":\"3\",\r\n\"RT\":\"72\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"756\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"757\",\r\n\"G\":\"3\",\r\n\"RT\":\"253\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"758\",\r\n\"G\":\"3\",\r\n\"RT\":\"196\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"759\",\r\n\"G\":\"2\",\r\n\"RT\":\"162\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"760\",\r\n\"G\":\"4\",\r\n\"RT\":\"39\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"761\",\r\n\"G\":\"3\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"762\",\r\n\"G\":\"4\",\r\n\"RT\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"763\",\r\n\"G\":\"3\",\r\n\"RT\":\"48\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"764\",\r\n\"G\":\"1\",\r\n\"RT\":\"2977\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"765\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"766\",\r\n\"G\":\"3\",\r\n\"RT\":\"55\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"768\",\r\n\"G\":\"3\",\r\n\"RT\":\"174\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"770\",\r\n\"G\":\"3\",\r\n\"RT\":\"56\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"771\",\r\n\"G\":\"1\",\r\n\"RT\":\"8830\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"772\",\r\n\"G\":\"1\",\r\n\"RT\":\"1483\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"773\",\r\n\"G\":\"2\",\r\n\"RT\":\"465\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"774\",\r\n\"G\":\"2\",\r\n\"RT\":\"302\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"775\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"776\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"784\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"785\",\r\n\"G\":\"2\",\r\n\"RT\":\"70\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"786\",\r\n\"G\":\"0\",\r\n\"RT\":\"728\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"789\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"790\",\r\n\"G\":\"0\",\r\n\"RT\":\"149\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"792\",\r\n\"G\":\"0\",\r\n\"RT\":\"96\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"793\",\r\n\"G\":\"0\",\r\n\"RT\":\"162\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"795\",\r\n\"G\":\"0\",\r\n\"RT\":\"776\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"796\",\r\n\"G\":\"0\",\r\n\"RT\":\"81\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"797\",\r\n\"G\":\"0\",\r\n\"RT\":\"191\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"803\",\r\n\"G\":\"2\",\r\n\"RT\":\"573\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"804\",\r\n\"G\":\"2\",\r\n\"RT\":\"579\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"806\",\r\n\"G\":\"2\",\r\n\"RT\":\"472\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"807\",\r\n\"G\":\"3\",\r\n\"RT\":\"223\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"808\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"811\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"812\",\r\n\"G\":\"3\",\r\n\"RT\":\"105\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"844\",\r\n\"G\":\"3\",\r\n\"RT\":\"158\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"845\",\r\n\"G\":\"3\",\r\n\"RT\":\"312\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"846\",\r\n\"G\":\"3\",\r\n\"RT\":\"220\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"862\",\r\n\"G\":\"2\",\r\n\"RT\":\"469\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"863\",\r\n\"G\":\"3\",\r\n\"RT\":\"2117\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"866\",\r\n\"G\":\"4\",\r\n\"RT\":\"46\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"903\",\r\n\"G\":\"2\",\r\n\"RT\":\"552\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"904\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"905\",\r\n\"G\":\"3\",\r\n\"RT\":\"585\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"906\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"907\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"908\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"911\",\r\n\"G\":\"3\",\r\n\"RT\":\"173\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"912\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"913\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"914\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"929\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"930\",\r\n\"G\":\"1\",\r\n\"RT\":\"1395\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"931\",\r\n\"G\":\"3\",\r\n\"RT\":\"152\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"933\",\r\n\"G\":\"4\",\r\n\"RT\":\"262\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"935\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"937\",\r\n\"G\":\"2\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"938\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"939\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"943\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"944\",\r\n\"G\":\"3\",\r\n\"RT\":\"188\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"945\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"946\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"949\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"951\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"955\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"957\",\r\n\"G\":\"1\",\r\n\"RT\":\"1157\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"962\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"963\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"965\",\r\n\"G\":\"3\",\r\n\"RT\":\"620\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"966\",\r\n\"G\":\"4\",\r\n\"RT\":\"14\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"617\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C210\",\r\n\"Default\":\"003\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"421\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"380\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"2\",\r\n\"RT\":\"929\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"2\",\r\n\"RT\":\"374\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"2\",\r\n\"RT\":\"349\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"195\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"299\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"1332\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"1137\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"2\",\r\n\"RT\":\"273\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"2\",\r\n\"RT\":\"1656\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"2\",\r\n\"RT\":\"780\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"2\",\r\n\"RT\":\"2494\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"2\",\r\n\"RT\":\"161\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"2\",\r\n\"RT\":\"1368\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"1\",\r\n\"RT\":\"2861\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"2\",\r\n\"RT\":\"745\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"2\",\r\n\"RT\":\"80\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"1\",\r\n\"RT\":\"1222\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"024\",\r\n\"G\":\"2\",\r\n\"RT\":\"451\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"2\",\r\n\"RT\":\"115\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"355\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"536\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"287\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"259\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"210\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"891\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"692\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C120\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"680\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"938\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"517\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"247\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"207\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"1381\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"86\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"959\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"902\",\r\n\"G\":\"1\",\r\n\"RT\":\"2266\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C420\",\r\n\"Default\":\"281\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"271\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"272\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"273\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"274\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"275\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"276\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"277\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"278\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"279\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"280\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"281\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"282\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"283\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"285\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"286\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"287\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"288\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C360\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C560\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C250\",\r\n\"Default\":\"401\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"401\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"402\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"404\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"408\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"409\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"410\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"411\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"412\",\r\n\"G\":\"3\",\r\n\"RT\":\"50\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"413\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"414\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"415\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"418\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"420\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"424\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","import T470data from './cartridgeData/T470';\r\nimport T245data from './cartridgeData/T245';\r\nimport T210data from './cartridgeData/T210';\r\nimport PA120data from './cartridgeData/PA120';\r\nimport NT105data from './cartridgeData/NT105';\r\nimport NP105data from './cartridgeData/NP105';\r\nimport HT420data from './cartridgeData/HT420';\r\nimport DS360data from './cartridgeData/DS360';\r\nimport DR560data from './cartridgeData/DR560';\r\nimport AP250data from './cartridgeData/AP250';\r\n\r\ninterface CartridgeList {\r\n    N: string;\r\n    G: string;\r\n    RT: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeGroup {\r\n    G: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeData {\r\n    F: string;\r\n    Default: string;\r\n    Cartridge_list: CartridgeList[];\r\n    Cartridge_group: CartridgeGroup[];\r\n}\r\n\r\ninterface CartridgeRoot {\r\n    _Type: string;\r\n    _V: number;\r\n    _: CartridgeData;\r\n}\r\n\r\nexport interface ICartridge {\r\n    tool: number,\r\n    fullName: string,\r\n    family: string,\r\n    name: string,\r\n    isDefault: boolean,\r\n    img: string\r\n}\r\n\r\nexport function LoadCartridges() {\r\n    let cartridges: ICartridge[] = [];\r\n    cartridges = cartridges.concat(MapCatridges(T470data));\r\n    cartridges = cartridges.concat(MapCatridges(T245data));\r\n    cartridges = cartridges.concat(MapCatridges(T210data));\r\n    cartridges = cartridges.concat(MapCatridges(PA120data));\r\n    cartridges = cartridges.concat(MapCatridges(NT105data));\r\n    cartridges = cartridges.concat(MapCatridges(NP105data));\r\n    cartridges = cartridges.concat(MapCatridges(HT420data));\r\n    cartridges = cartridges.concat(MapCatridges(DS360data));\r\n    cartridges = cartridges.concat(MapCatridges(DR560data));\r\n    cartridges = cartridges.concat(MapCatridges(AP250data));\r\n\r\n    return cartridges;\r\n}\r\n\r\nexport function MapCatridges(cartridgeRoot: CartridgeRoot) {\r\n    let result: ICartridge[] = [];\r\n\r\n    let cartridge = cartridgeRoot._;\r\n    let family = cartridge.F;\r\n    let def = cartridge.Default;\r\n\r\n    cartridge.Cartridge_list.forEach(item => {\r\n        result.push({\r\n            tool: GetToolIdByFamily(family),\r\n            fullName: family + item.N,\r\n            family: family,\r\n            name: item.N,\r\n            isDefault: def === item.N,\r\n            img: CartridgeImagePath(family, item.N)\r\n        });\r\n    })\r\n\r\n    return result;\r\n};\r\n\r\nexport function GetToolIdByFamily(family: string) {\r\n    family = family.toLowerCase();\r\n\r\n    if (family === \"c210\") return 1; // T210\r\n    if (family === \"c245\") return 2; // T245\r\n    if (family === \"c120\") return 3; // PA\r\n    if (family === \"c420\") return 4; // HT\r\n    if (family === \"c360\") return 5; // DS\r\n    if (family === \"c560\") return 6; // DR\r\n    if (family === \"c105\" || family === \"c115\") return 7; // NT105, NP105\r\n    if (family === \"c470\") return 9; // T470\r\n\r\n    return 0;\r\n}\r\n\r\nexport function CartridgeImagePath(family: string, name: string) {\r\n    return \"img/cartidges/\" + family.toLowerCase() + name.toLowerCase() + \"_detail.png\";\r\n}\r\n\r\nexport function CartridgeImagePathByFullName(name: string) {\r\n    let cartridge = LoadCartridges().find(x => x.fullName.toLowerCase() === name.toLowerCase());\r\n\r\n    if (cartridge === undefined) {\r\n        return \"\";\r\n    }\r\n\r\n    return CartridgeImagePath(cartridge.family, cartridge.name);\r\n}\r\n","import Plot2AxisTiny from './Plot2AxisTiny';\r\n\r\nexport default Plot2AxisTiny;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2AxisTiny extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: -61\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2AxisTiny;\r\n","const DESOLDER = 16;\r\nconst EXTRACTOR = 8;\r\nconst HIBERNATION = 4;\r\nconst SLEEP = 2;\r\nconst STAND = 1;\r\nconst NONE = 0;\r\n\r\nexport function GetPortStatus2String(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return \"Port locked\";\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return \"Tool in the extractor\";\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return \"Tool in hibernation\";\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return \"Tool in sleep\";\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return \"Tool in the stand\";\r\n    }\r\n    else if (isCalibrating) {\r\n        return \"Calibrating\";\r\n    }\r\n    else if (isSoldering) {\r\n        return \"Soldering\";\r\n    }\r\n    else {\r\n        return \"Ready\";\r\n    }\r\n}\r\n\r\nexport function GetPortStatus2Lights(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return 3;\r\n    }\r\n    else if (isCalibrating) {\r\n        return 2;\r\n    }\r\n    else if (isSoldering) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n","import PortStatusCard from './PortStatusCard';\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../utils/portUtils';\r\nimport './PortStatusCard.css';\r\n\r\ntype PortStatusCardProps = {\r\n    portData: IRealTimeData\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number,\r\n    toolStatus: number,\r\n    isPortEnabled: boolean,\r\n    isCalibrating: boolean,\r\n    isSoldering: boolean,\r\n    tenthsOfSecondSoldering: number\r\n}\r\n\r\nclass PortStatusCard extends React.PureComponent<PortStatusCardProps> {\r\n    public render() {\r\n        let temperature = this.props.portData === undefined ? 0 : this.props.portData.temperature;\r\n        let power = this.props.portData === undefined ? 0 : this.props.portData.power;\r\n        let toolStatus = this.props.portData === undefined ? 0 : this.props.portData.toolStatus;\r\n        let isPortEnabled = this.props.portData === undefined ? false : this.props.portData.isPortEnabled;\r\n        let isCalibrating = this.props.portData === undefined ? false : this.props.portData.isCalibrating;\r\n        let isSoldering = this.props.portData === undefined ? false : this.props.portData.isSoldering;\r\n\r\n        let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n            toolStatus,\r\n            isCalibrating,\r\n            isSoldering,\r\n            isPortEnabled);\r\n\r\n        return (\r\n            <Card>\r\n                <CardBody>\r\n                    <Row>\r\n                        <Col xs=\"auto\">\r\n                            Temperature:{' '}\r\n                            <span className=\"temp-value\"> {Math.floor(temperature / 9)} ºC</span>\r\n                        </Col>\r\n                        <Col>\r\n                            Power:{' '}\r\n                            <span className=\"power-value\">{Math.floor(power / 10)} %</span>\r\n                        </Col>\r\n                        <Col className=\"text-right\">\r\n                            <FontAwesomeIcon icon={faCircle} className={circleLight} />\r\n                            <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                toolStatus,\r\n                                isCalibrating,\r\n                                isSoldering,\r\n                                isPortEnabled\r\n                            )}</strong>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport { LoadCartridges, ICartridge } from '../../../../utils/cartridgeUtils';\r\nimport Plot2AxisTiny from '../../../content-parts/Plot2AxisTiny';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    selectedTool: number,\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string,\r\n    cartridgeName: string\r\n}\r\n\r\nclass ProcessOptimizationStep_CartridgeTest extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n\r\n        let cartridgeImagePath = \"\";\r\n        let cartridgeName = \"\";\r\n        let cartridges = LoadCartridges();\r\n        let defaultCartridge = cartridges.find(x => x.isDefault && x.tool === this.props.selectedTool);\r\n\r\n        if (defaultCartridge !== undefined) {\r\n            cartridgeImagePath = defaultCartridge.img;\r\n            cartridgeName = defaultCartridge.fullName;\r\n            this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n        }\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeImagePath: cartridgeImagePath,\r\n            cartridgeName: cartridgeName\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col xs=\"8\">\r\n                                <CardText>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"4\" className=\"text-center\">\r\n                                <img src={this.state.cartridgeImagePath} alt={this.state.cartridgeName} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlots = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return (\r\n                    <CardText>\r\n                        Performs at least 2 solderings with different cartridges.\r\n                    </CardText>\r\n                )\r\n            }\r\n\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"card-v2\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs=\"9\" className=\"pr-0\">\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Cartridge: <strong>{x.cartridge}</strong></CardText>\r\n                                    </Col>\r\n                                    <Col xs=\"3\" className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Plot2AxisTiny\r\n                                        plotData={data}\r\n                                        counterTenthSecond={x.data.length}\r\n                                        interval={Math.floor(x.data.length / 2)}\r\n                                    />\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Row xs={1} sm={2} md={5}>\r\n                    {registeredPlots}\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getRegisteredPlots()}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n            let cartridgeName = cartridge === undefined ? \"\" : cartridge.fullName;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath,\r\n                cartridgeName: cartridgeName\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_CartridgeTest;\r\n","export function Average(values) {\r\n    var sum = values.reduce(function (sum, value) {\r\n        return sum + value;\r\n    }, 0);\r\n\r\n    var avg = sum / values.length;\r\n    return avg;\r\n}\r\n\r\nexport function PercentPointFunction(x, mean, std) {\r\n    return mean - std * Math.sqrt(2) * ierfc(2 * x);\r\n}\r\n\r\nexport function ProbabilityDensityFunction(x, mean, variance) {\r\n    var std = Math.sqrt(variance);\r\n    var m = std * Math.sqrt(2 * Math.PI);\r\n    var e = Math.exp(-Math.pow(x - mean, 2) / (2 * variance));\r\n    return e / m;\r\n};\r\n\r\nexport function StandardDeviation(values) {\r\n    var variance = Variance(values);\r\n    var stdDev = Math.sqrt(variance);\r\n    return stdDev;\r\n}\r\n\r\nexport function Variance(values) {\r\n    var avg = Average(values);\r\n\r\n    var squareDiffs = values.map(function (value) {\r\n        var diff = value - avg;\r\n        var sqrDiff = diff * diff;\r\n        return sqrDiff;\r\n    });\r\n\r\n    var avgSquareDiff = Average(squareDiffs);\r\n    return avgSquareDiff;\r\n}\r\n\r\n// Complementary error function\r\nexport function erfc(x) {\r\n    var z = Math.abs(x);\r\n    var t = 1 / (1 + z / 2);\r\n    var r = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 +\r\n        t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 +\r\n            t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 +\r\n                t * (-0.82215223 + t * 0.17087277)))))))))\r\n    return x >= 0 ? r : 2 - r;\r\n};\r\n\r\n// Inverse complementary error function\r\nexport function ierfc(x) {\r\n    if (x >= 2) { return -100; }\r\n    if (x <= 0) { return 100; }\r\n\r\n    var xx = (x < 1) ? x : 2 - x;\r\n    var t = Math.sqrt(-2 * Math.log(xx / 2));\r\n\r\n    var r = -0.70711 * ((2.30753 + t * 0.27061) /\r\n        (1 + t * (0.99229 + t * 0.04481)) - t);\r\n\r\n    for (var j = 0; j < 2; j++) {\r\n        var err = erfc(r) - xx;\r\n        r += err / (1.12837916709551257 * Math.exp(-(r * r)) - r * err);\r\n    }\r\n\r\n    return (x < 1) ? r : -r;\r\n}\r\n","export function GetPlotColors() {\r\n    return [\r\n        { stroke: \"#ffc658\", fill: \"#ffc658\" },\r\n        { stroke: \"#82ca9d\", fill: \"#82ca9d\" },\r\n        { stroke: \"#8884d8\", fill: \"#8884d8\" },\r\n        { stroke: \"#ef476f\", fill: \"#ef476f\" },\r\n        { stroke: \"#c05746\", fill: \"#c05746\" }\r\n    ];\r\n}\r\n\r\nexport function GetPlotSeriesData(temperature, power) {\r\n    let plotData = [];\r\n\r\n    for (var i = 0; i < temperature.length; i++) {\r\n        plotData.push({\r\n            tick: i,\r\n            temperature: temperature[i] / 9,\r\n            power: power[i] / 10\r\n        });\r\n    }\r\n\r\n    return plotData;\r\n}\r\n\r\nexport function EmptyPlotSeriesData(maxPLotPoints) {\r\n    let data = [];\r\n\r\n    for (var i = 0; i < maxPLotPoints; i++) {\r\n        data.push({\r\n            tick: -1,\r\n            temperature: 0,\r\n            power: 0,\r\n            toolStatus: 0,\r\n            isPortEnabled: true,\r\n            isCalibrating: false,\r\n            isSoldering: false,\r\n            tenthsOfSecondSoldering: 0\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function PushPlotSeriesData(data, realTimeData, maxPlotPoints = 100) {\r\n    data.push({\r\n        tick: data.length > 0 ? data[data.length - 1].tick + 1 : 0,\r\n        temperature: realTimeData.temperature / 9,\r\n        power: realTimeData.power / 10,\r\n        toolStatus: realTimeData.toolStatus,\r\n        isPortEnabled: realTimeData.isPortEnabled,\r\n        isCalibrating: realTimeData.isCalibrating,\r\n        isSoldering: realTimeData.isSoldering\r\n    });\r\n\r\n    if (maxPlotPoints > 0 && maxPlotPoints < data.length) {\r\n        data.splice(0, data.length - maxPlotPoints);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, Legend, LineChart, Line } from 'recharts';\r\nimport { RemoveDuplicates } from '../../../../utils/arrayUtils';\r\nimport { Average } from '../../../../utils/mathUtils';\r\nimport { Round } from '../../../../utils/numberUtils';\r\nimport { GetPlotColors } from '../../../../utils/plotUtils';\r\nimport { SecToString } from '../../../../utils/timeUtils';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\n\r\ninterface ICartridge {\r\n    name: string,\r\n    time: number,\r\n    energy: number,\r\n    data: IRealTimeData[]\r\n}\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n    handleCartridgeChange: (value: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_CartridgeResult extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getPlot = (cartridges: ICartridge[]) => {\r\n\r\n            let length = Math.max.apply(Math, cartridges.map(function(x) { return x.data.length; }));\r\n            let data: { [key: string]: number }[] = [];\r\n\r\n            for (var i = 0; i < length; i++) {\r\n                data.push({});\r\n            }\r\n            \r\n            for (var i = 0; i < cartridges.length; i++) {\r\n                let cartridge = cartridges[i];\r\n\r\n                for (var j = 0; j < cartridge.data.length; j++) {\r\n                    let record = data[j];\r\n                    record[cartridge.name] = cartridge.data[j].power;\r\n                    data[j] = record;\r\n                }\r\n            }\r\n\r\n            let colors = GetPlotColors();\r\n            let lines = cartridges.map((x, index) => {\r\n                let color = colors[index % colors.length];\r\n                return <Line dataKey={x.name} yAxisId=\"left\" type=\"monotone\" stroke={color[\"stroke\"]} dot={false} />\r\n            });\r\n\r\n            return (\r\n                <ResponsiveContainer width='100%' aspect={2.5}>\r\n                    <LineChart\r\n                        data={data}\r\n                        margin={{\r\n                            left: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#e6e6e6\" />\r\n                        <Legend />\r\n\r\n                        <XAxis\r\n                            dataKey=\"time\"\r\n                            height={50}\r\n                            label={\"Time (s)\"}\r\n                            tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                            interval={Math.floor(data.length / 5)} />\r\n                        <YAxis\r\n                            yAxisId=\"left\"\r\n                            orientation=\"left\"\r\n                            domain={['auto', 'auto']} />\r\n\r\n                        {lines}\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            );\r\n        }\r\n\r\n        const getPlotCard = (cartridges: ICartridge[]) => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <React.Fragment>\r\n                        <CardText>Best cartridge: <strong>{this.props.fasterSoldering.cartridge}</strong></CardText>\r\n                        {getPlot(cartridges)}\r\n                    </React.Fragment>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getTableCard = (cartridges: ICartridge[]) => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>;\r\n            }\r\n            else {\r\n                let selected = cartridges.find(x => x.name === this.props.fasterSoldering.cartridge)\r\n\r\n                let options =\r\n                    cartridges.map(x => {\r\n                        let delay =\r\n                            selected === undefined ? 0 :\r\n                                Math.round(((x.time / selected.time) - 1) * 100);\r\n\r\n                        return (\r\n                            <tr className={this.props.fasterSoldering.cartridge === x.name ? \"font-weight-bold\" : \"\"}>\r\n                                <td>\r\n                                    <Input\r\n                                        type=\"radio\"\r\n                                        name=\"radio1\"\r\n                                        defaultChecked={this.props.fasterSoldering.cartridge === x.name}\r\n                                        onChange={(e) => this.props.handleCartridgeChange(x.name)}\r\n                                    />\r\n                                </td>\r\n                                <td>{x.name}</td>\r\n                                <td>{x.time / 10}</td>\r\n                                <td>{this.props.fasterSoldering.cartridge === x.name ? \"-\" : delay}</td>\r\n                                <td>{x.energy}</td>\r\n                            </tr>)\r\n                    })\r\n\r\n                cardBody =\r\n                    <table className=\"table table-sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\"></th>\r\n                                <th scope=\"col\">Cartridge</th>\r\n                                <th scope=\"col\">Time average (s)</th>\r\n                                <th scope=\"col\">Delay (%)</th>\r\n                                <th scope=\"col\">Energy (w·s)</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {options}\r\n                        </tbody>\r\n                    </table>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getBestCartridges = () => {\r\n            let cartridges = this.props.detectedSolderings.map(x => x.cartridge);\r\n            cartridges = RemoveDuplicates(cartridges);\r\n\r\n            let cartridgesStatistics: ICartridge[] =\r\n                cartridges.map(cartridge => {\r\n\r\n                    let currentCartridge = this.props.detectedSolderings\r\n                        .filter(x => x.cartridge === cartridge);\r\n\r\n                    let times = currentCartridge\r\n                        .map(x => x.solderingResult.tenthsOfSecondSoldering);\r\n\r\n                    let energies = currentCartridge\r\n                        .map(x => x.solderingResult.energy);\r\n\r\n                    let timeAvg = Math.round(Average(times));\r\n                    let energyAvg = Round(Average(energies), 1);\r\n\r\n                    return {\r\n                        name: cartridge,\r\n                        time: timeAvg,\r\n                        energy: energyAvg,\r\n                        data: currentCartridge[0].data\r\n                    }\r\n                })\r\n\r\n            cartridgesStatistics.sort(function (a:ICartridge, b:ICartridge) {\r\n                return a.time < b.time ? -1 : 1;\r\n            })\r\n            cartridgesStatistics = cartridgesStatistics.slice(0, 5);\r\n\r\n            return cartridgesStatistics;\r\n        }\r\n\r\n        let cartridges = getBestCartridges();\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getPlotCard(cartridges)}\r\n                    </Col>\r\n                    <Col xs=\"6\">\r\n                        {getTableCard(cartridges)}\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_CartridgeResult;\r\n","export function Range(min, max, step = 1) {\r\n    var values = [];\r\n    \r\n    for (let i = min; i <= max; i+=step) {\r\n        values = values.concat(i);\r\n    }\r\n\r\n    return values;\r\n}\r\n\r\nexport function RemoveDuplicates(values) {\r\n    values = values.filter((item, index) => values.indexOf(item) === index);\r\n    return values;\r\n}\r\n","import * as React from 'react';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { CartridgeImagePathByFullName } from '../../../../utils/cartridgeUtils';\r\nimport Plot2AxisTiny from '../../../content-parts/Plot2AxisTiny';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void\r\n}\r\n\r\nclass ProcessOptimizationStep_TempTest extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <Row>\r\n                        <Col xs=\"8\">\r\n                            <CardText>Selected cartridge: {this.props.selectedCartridge}</CardText>\r\n                            <CardText>\r\n                                <strong>Selected temperature:</strong>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    defaultValue={this.props.selectedTemperature / 9}\r\n                                    onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                >\r\n                                    <option>425</option>\r\n                                    <option>400</option>\r\n                                    <option>375</option>\r\n                                    <option>350</option>\r\n                                    <option>325</option>\r\n                                    <option>300</option>\r\n                                </Input>\r\n                            </CardText>\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"text-center\">\r\n                            <img src={CartridgeImagePathByFullName(this.props.selectedCartridge)} alt={this.props.selectedCartridge} />\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlots = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return (\r\n                    <CardText>\r\n                        Performs at least 2 solderings with different temperatures.\r\n                    </CardText>\r\n                )\r\n            }\r\n\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"card-v2\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs=\"9\" className=\"pr-0\">\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Temperature: <strong>{x.selectedTemperature / 9} ºC</strong></CardText>\r\n                                    </Col>\r\n                                    <Col xs=\"3\" className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Plot2AxisTiny\r\n                                        plotData={data}\r\n                                        counterTenthSecond={x.data.length}\r\n                                        interval={Math.floor(x.data.length / 2)}\r\n                                    />\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Row xs={1} sm={2} md={5}>\r\n                    {registeredPlots}\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getRegisteredPlots()}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getConfigurationCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_TempTest;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ResponsiveContainer, LineChart, Line, Legend, XAxis, YAxis, CartesianGrid, ReferenceArea } from 'recharts';\r\nimport { CartridgeImagePathByFullName } from '../../../../utils/cartridgeUtils';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    optimizedSoldering: IOptimizedSoldering,\r\n    selectedCartridge: string\r\n}\r\n\r\nclass ProcessOptimizationStep_Performance extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getPlot = (tempRecommended: number, tempDurability: number, tempPerformance: number) => {\r\n            return (\r\n                <ResponsiveContainer width='100%' aspect={2.5}>\r\n                    <LineChart\r\n                        data={this.props.optimizedSoldering.points}\r\n                        margin={{\r\n                            left: 10,\r\n                            right: 0\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#e6e6e6\" />\r\n                        <Legend />\r\n\r\n                        <XAxis\r\n                            dataKey=\"temperature\"\r\n                            height={50}\r\n                            padding={{ left: 30, right: 30 }}\r\n                            label=\"Temperature\"\r\n                            tickFormatter={(value) => Math.floor(value / 9)}\r\n                            domain={[250 * 9, 400 * 9]}\r\n                            ticks={[250 * 9, 300 * 9, 350 * 9, 400 * 9]}\r\n                            type=\"number\" />\r\n                        <YAxis\r\n                            yAxisId=\"left\"\r\n                            orientation=\"left\"\r\n                            tickFormatter={(value) => (value * 100) + \"%\"}\r\n                            domain={[0, 3]}\r\n                            ticks={[1, 2, 3]}\r\n                            type=\"number\"\r\n                            label={{\r\n                                value: \"Tip Life\",\r\n                                angle: -90,\r\n                                position: \"center\",\r\n                                dx: -30\r\n                            }} />\r\n                        <YAxis\r\n                            yAxisId=\"right\"\r\n                            orientation=\"right\"\r\n                            label={{\r\n                                value: \"Solderings / minute\",\r\n                                angle: 90,\r\n                                position: \"center\",\r\n                                dx: 10\r\n                            }} />\r\n\r\n                        <ReferenceArea\r\n                            yAxisId=\"left\"\r\n                            x1={280 * 9}\r\n                            x2={tempDurability + (tempRecommended - tempDurability) / 2}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ebebff\" />\r\n                        <ReferenceArea\r\n                            yAxisId=\"left\"\r\n                            x1={tempDurability + (tempRecommended - tempDurability) / 2}\r\n                            x2={tempRecommended + (tempPerformance - tempRecommended) / 2}\r\n                            y1={0} y2={3}\r\n                            fill=\"#fff8e1\" />\r\n                        <ReferenceArea\r\n                            yAxisId=\"left\"\r\n                            x1={tempRecommended + (tempPerformance - tempRecommended) / 2}\r\n                            x2={400 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ffebeb\" />\r\n\r\n                        <Line name=\"Tip Life\" dataKey=\"tipLife\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                        <Line name=\"Solderings / minute\" dataKey=\"rateSoldMin\" yAxisId=\"right\" type=\"monotone\" dot={false} />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            );\r\n        }\r\n\r\n        const getOptimizedSolderingPlotCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody = getPlot(\r\n                    this.props.optimizedSoldering.recommended.temperature,\r\n                    this.props.optimizedSoldering.durability.temperature,\r\n                    this.props.optimizedSoldering.performance.temperature)\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody =\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <React.Fragment>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Cartridge: <strong>{this.props.selectedCartridge}</strong></CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={CartridgeImagePathByFullName(this.props.selectedCartridge)} alt={this.props.selectedCartridge} />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <hr />\r\n                        <CardText>\r\n                            <strong>Optimized:</strong>\r\n                        </CardText>\r\n                        <CardText>Tip life: {this.props.optimizedSoldering.recommended.tipLife * 100}%</CardText>\r\n                        <CardText>Solderings / minute: {this.props.optimizedSoldering.recommended.rateSoldMin}</CardText>\r\n                        <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.recommended.temperature / 9)} ºC</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xs=\"8\" className=\"pl-0 pr-0\">\r\n                        {getOptimizedSolderingPlotCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"d-flex flex-column\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep_Performance;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport MultiStepNav from '../../../content-parts/MultiStepNav';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationStep_Station from './ProcessOptimizationStep_Station';\r\nimport ProcessOptimizationStep_Temp from './ProcessOptimizationStep_Temp';\r\nimport ProcessOptimizationStep_ProcessParameters from './ProcessOptimizationStep_ProcessParameters';\r\nimport ProcessOptimizationStep_CartridgeTest from './ProcessOptimizationStep_CartridgeTest';\r\nimport ProcessOptimizationStep_CartridgeResult from './ProcessOptimizationStep_CartridgeResult';\r\nimport ProcessOptimizationStep_TempTest from './ProcessOptimizationStep_TempTest';\r\nimport ProcessOptimizationStep_Performance from './ProcessOptimizationStep_Performance';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleOffsetTimeChange: (temperature: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedOffsetTime: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nclass ProcessOptimizationView extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getButtons = () => {\r\n            let isValid =\r\n                (this.props.currentStep === 1 && this.props.selectedStation.id !== \"\") ||\r\n                (this.props.currentStep === 2 && this.props.selectedTemperature > 0) ||\r\n                (this.props.currentStep === 3) ||\r\n                (this.props.currentStep === 4 && this.props.detectedSolderings.length > 1) ||\r\n                (this.props.currentStep === 5) ||\r\n                (this.props.currentStep === 6 && this.props.detectedSolderings.length > 1) ||\r\n                (this.props.currentStep === 7);\r\n\r\n            let nextButton = !isValid ? \"\" :\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >{this.props.currentStep === 7 ? \"Start again\" : \"Continue\"}</Button>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {nextButton}\r\n                </React.Fragment>)\r\n        }\r\n\r\n        const getSteps = () => {\r\n            if (this.props.currentStep === 1) {\r\n                return (\r\n                    <ProcessOptimizationStep_Station\r\n                        isLoadingStations={this.props.isLoading}\r\n                        stationControllers={this.props.stationControllers}\r\n                        handleStationClick={this.props.handleStationClick}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 2) {\r\n                return (\r\n                    <ProcessOptimizationStep_Temp\r\n                        selectedTemperature={this.props.selectedTemperature}\r\n                        handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 3) {\r\n                return (\r\n                    <ProcessOptimizationStep_ProcessParameters\r\n                        selectedOffsetTime={this.props.selectedOffsetTime}\r\n                        handleOffsetTimeChange={this.props.handleOffsetTimeChange}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 4) {\r\n                return (\r\n                    <ProcessOptimizationStep_CartridgeTest\r\n                        selectedTool={this.props.selectedTool}\r\n                        lastRealTimeData={this.props.lastRealTimeData}\r\n                        counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                        detectedSolderings={this.props.detectedSolderings}\r\n\r\n                        handleCartridgeChange={this.props.handleCartridgeChange}\r\n                        handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 5) {\r\n                return (\r\n                    <ProcessOptimizationStep_CartridgeResult\r\n                        isLoading={this.props.isLoading}\r\n                        detectedSolderings={this.props.detectedSolderings}\r\n                        fasterSoldering={this.props.fasterSoldering}\r\n\r\n                        handleCartridgeChange={this.props.handleCartridgeChange}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 6) {\r\n                return (\r\n                    <ProcessOptimizationStep_TempTest\r\n                        isLoading={this.props.isLoading}\r\n\r\n                        selectedStation={this.props.selectedStation}\r\n                        selectedPort={this.props.selectedPort}\r\n                        selectedTemperature={this.props.selectedTemperature}\r\n                        selectedCartridge={this.props.selectedCartridge}\r\n\r\n                        lastRealTimeData={this.props.lastRealTimeData}\r\n                        counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                        detectedSolderings={this.props.detectedSolderings}\r\n\r\n                        handleSelecTempChange={this.props.handleSelecTempChange}\r\n                        handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    />\r\n                )\r\n            }\r\n\r\n            if (this.props.currentStep === 7) {\r\n                return (\r\n                    <ProcessOptimizationStep_Performance\r\n                        isLoading={this.props.isLoading}\r\n\r\n                        optimizedSoldering={this.props.optimizedSoldering}\r\n                        selectedCartridge={this.props.selectedCartridge}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"content-center mb-3\">\r\n                    <MultiStepNav\r\n                        labels={[\r\n                            \"Station selection\",\r\n                            \"Temperature selection\",\r\n                            \"Process parameters\",\r\n                            \"Cartridge test\",\r\n                            \"Cartridge result\",\r\n                            \"Temperature test\",\r\n                            \"Performance result\"\r\n                        ]}\r\n                        current={this.props.currentStep - 1}\r\n                    />\r\n                </Row>\r\n                {getSteps()}\r\n                <Row>\r\n                    {getButtons()}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport ProcessOptimizationService from '../../../../services/processOptimization.service';\r\nimport StationService from '../../../../services/station.service';\r\nimport WorkService from '../../../../services/work.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationView from './ProcessOptimizationView';\r\n\r\ntype ProcessOptimizationProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStationControllerId: string,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedOffsetTime: number,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSolderings: ISolderingData[],\r\n    detectedSolderingsToRemove: string[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass ProcessOptimization extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStationControllerId: \"\",\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                software: \"\",\r\n                hardware: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: 0,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n            selectedOffsetTime: 5,\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSolderings: [],\r\n            detectedSolderingsToRemove: [],\r\n            fasterSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            },\r\n            optimizedSoldering: {\r\n                points: [],\r\n                recommended: {\r\n                    temperature: 0,\r\n                    tipLife: 0,\r\n                    rateSoldMin: 0\r\n                },\r\n                performance: {\r\n                    temperature: 0,\r\n                    tipLife: 0,\r\n                    rateSoldMin: 0\r\n                },\r\n                durability: {\r\n                    temperature: 0,\r\n                    tipLife: 0,\r\n                    rateSoldMin: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                this.applyDetectedSolderingsToRemove();\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        var registeredData = this.state.registeredData;\r\n                        var lastRealTimeData = this.state.lastRealTimeData;\r\n                        var counterTenthSecond = this.state.counterTenthSecond;\r\n\r\n                        var wasSoldering = this.state.wasSoldering;\r\n                        var detectedSolderings = this.state.detectedSolderings;\r\n\r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !wasSoldering) {\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = registeredData.length - nDataSoldering; i < registeredData.length; i++) {\r\n                                        data.push(registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: this.state.selectedCartridge,\r\n                                        selectedTemperature: this.state.selectedTemperature,\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    detectedSolderings = detectedSolderings.concat(soldering);\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                            let solderingResult = soldering.solderingResult;\r\n\r\n                                            solderingResult.energy = x.energy;\r\n                                            solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n                                            soldering.solderingResult = solderingResult;\r\n                                            soldering.cartridge = this.state.selectedCartridge;\r\n\r\n                                            detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                    let data = soldering.data;\r\n\r\n                                    data.push(x);\r\n                                    soldering.data = data;\r\n\r\n                                    let solderingResult = soldering.solderingResult;\r\n                                    solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                    soldering.solderingResult = solderingResult;\r\n\r\n                                    detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n                                }\r\n\r\n                                registeredData = registeredData.concat(x);\r\n                                registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n                                lastRealTimeData = x;\r\n                                counterTenthSecond++;\r\n\r\n                                wasSoldering = x.isSoldering;\r\n                            })\r\n                        }\r\n\r\n                        this.setState({\r\n                            registeredData: registeredData,\r\n                            lastRealTimeData: lastRealTimeData,\r\n                            counterTenthSecond: counterTenthSecond,\r\n                            readyGetMoreData: true,\r\n\r\n                            wasSoldering: wasSoldering,\r\n                            detectedSolderings: detectedSolderings\r\n                        });\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: ProcessOptimizationProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                if (Array.isArray(scs)) {\r\n                    scs.forEach((sc: StationStore.StationController) => {\r\n                        props.createStationController(sc);\r\n\r\n                        sc.stations.forEach((s: StationStore.Station) =>\r\n                            props.createStation(s, sc.id)\r\n                        )\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    applyDetectedSolderingsToRemove() {\r\n        if (this.state.detectedSolderingsToRemove.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n            return {\r\n                detectedSolderings:\r\n                    state.detectedSolderings\r\n                        .filter(x => !state.detectedSolderingsToRemove\r\n                            .some(r => r === x.date)),\r\n                detectedSolderingsToRemove: []\r\n            };\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStationControllerId: stationControllerId,\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(stationControllerId, station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationControllerId: string, stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationControllerId, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationControllerId: string, stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationControllerId, stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleOffsetTimeChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                selectedOffsetTime: nValue\r\n            });\r\n        }\r\n\r\n        const handleDeleteRealTimeData = (value: string) => {\r\n            this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                return {\r\n                    detectedSolderingsToRemove: state.detectedSolderingsToRemove.concat(value)\r\n                };\r\n            });\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId !== -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n\r\n            if (this.state.currentStep === 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep === 2) {\r\n                this.setState({\r\n                    currentStep: 3\r\n                })\r\n            }\r\n            else if (this.state.currentStep === 3) {\r\n                this.setState({\r\n                    currentStep: 4,\r\n                    counterTenthSecond: 0,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 4) {\r\n                this.setState({\r\n                    currentStep: 5,\r\n                    isLoading: true\r\n                })\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByCartridge(this.state.detectedSolderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            fasterSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 5) {\r\n                this.setState({\r\n                    currentStep: 6,\r\n                    counterTenthSecond: 0,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 6) {\r\n                this.setState({\r\n                    currentStep: 7,\r\n                    isLoading: true\r\n                })\r\n\r\n                let solderings = this.state.detectedSolderings.map(x => {\r\n                    x.solderingResult.tenthsOfSecondSoldering += this.state.selectedOffsetTime * 10\r\n                    return x;\r\n                });\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByTemperature(solderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            optimizedSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 7) {\r\n                this.setState({\r\n                    currentStep: 1,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ProcessOptimizationView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleOffsetTimeChange={handleOffsetTimeChange}\r\n                handleDeleteRealTimeData={handleDeleteRealTimeData}\r\n                handleNextClick={handleNextClick}\r\n\r\n                selectedStation={this.state.selectedStation}\r\n                selectedPort={this.state.selectedPort}\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n                selectedOffsetTime={this.state.selectedOffsetTime}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                counterTenthSecond={this.state.counterTenthSecond}\r\n\r\n                detectedSolderings={this.state.detectedSolderings}\r\n                fasterSoldering={this.state.fasterSoldering}\r\n                optimizedSoldering={this.state.optimizedSoldering}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(ProcessOptimization);\r\n","import ProcessOptimization from './ProcessOptimization';\r\n\r\nexport default ProcessOptimization;\r\n","import PaginationNav from './PaginationNav';\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\n\r\ntype PaginationNavProps = {\r\n    totalElements: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    handlePageClick: (page: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass PaginationNav extends React.PureComponent<PaginationNavProps> {\r\n    public render() {\r\n        const getItems = (pageNumber: number, totalPages: number) => {\r\n            let items = [];\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        first\r\n                        disabled={pageNumber === 1}\r\n                        onClick={() => this.props.handlePageClick(1)} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        previous\r\n                        disabled={pageNumber === 1}\r\n                        onClick={this.props.handlePreviousPageClick} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            items.push(new Array(totalPages).fill(0).map((zero, index) =>\r\n                <PaginationItem active={pageNumber === index + 1}>\r\n                    <PaginationLink onClick={() => this.props.handlePageClick(index + 1)}>\r\n                        {index + 1}\r\n                    </PaginationLink>\r\n                </PaginationItem>\r\n            ));\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        next\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={this.props.handleNextPageClick} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        last\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={() => this.props.handlePageClick(totalPages)} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            return items;\r\n        }\r\n\r\n        let totalPages = Math.ceil(this.props.totalElements / this.props.pageSize);\r\n        let items = getItems(this.props.pageNumber, totalPages);\r\n\r\n        return (\r\n            <Pagination>\r\n                {items}\r\n            </Pagination>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: number[]\r\n}\r\n\r\nclass PlotPowerAxisTiny extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        let plotDataObj = this.props.plotData.map((x) => {\r\n            return { power: x }\r\n        });\r\n\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"power\" yAxisId=\"left\" type=\"monotone\" dot={false} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotPowerAxisTiny;\r\n","import PlotPowerAxisTiny from './PlotPowerAxisTiny';\r\n\r\nexport default PlotPowerAxisTiny;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFile, faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport { faDownload, faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\n\r\ntype SolderingsReferenceProps = {\r\n    references: AssistantStore.Reference[],\r\n    nTotalReferences: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    deleteReference: (id: number) => void,\r\n    uploadReference: (file: FormData) => void,\r\n    downloadReference: (id: number, name: string) => void,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    showDeleteModal: boolean;\r\n    referenceIdToDelete: number;\r\n}\r\n\r\nclass SolderingsReferenceView extends React.PureComponent<SolderingsReferenceProps, IState> {\r\n    constructor(props: SolderingsReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showDeleteModal: false,\r\n            referenceIdToDelete: -1\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListReferences = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            if (this.props.nTotalReferences === 0) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <span>No solderings reference, </span>\r\n                        <NavLink tag={Link} className=\"p-0 d-inline\" to=\"/processes/solderingreference/new\">create new</NavLink>\r\n                        <span> or </span>\r\n                        <NavLink tag={Link} className=\"p-0 d-inline\" onClick={handleUploadClick}>upload one</NavLink>\r\n                        <span>.</span>\r\n                    </React.Fragment>);\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.references) {\r\n                options.push(\r\n                    <tr>\r\n                        <td>{value.id}</td>\r\n                        <td>\r\n                            <PlotPowerAxisTiny\r\n                                plotData={value.power}\r\n                            />\r\n                        </td>\r\n                        <td>{value.name.length === 0 ? \"[No name]\" : value.name}</td>\r\n                        <td>{value.cartridge}</td>\r\n                        <td>{value.temperature / 9}</td>\r\n                        <td>{value.durationTenthsSeconds / 10}</td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"p-0 pr-3 d-inline\" onClick={() => this.props.downloadReference(value.id, value.name)}>\r\n                                <FontAwesomeIcon icon={faDownload} className=\"fa\" />\r\n                            </NavLink>\r\n                            <a href=\"#\" className=\"pr-3\" onClick={(event) => handleDeleteClick(event, value.id)}>\r\n                                <FontAwesomeIcon icon={faTrashAlt} className=\"fa\" />\r\n                            </a>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\" className=\"w-20\">Reference</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Cartridge</th>\r\n                            <th scope=\"col\">Temperature (ºC)</th>\r\n                            <th scope=\"col\">Duration (s)</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        const getListReferencesCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListReferences()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, id: number) => {\r\n            event.preventDefault();\r\n\r\n            this.setState({\r\n                referenceIdToDelete: id,\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteReference(this.state.referenceIdToDelete);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleUploadClick = () => {\r\n            fileSelector.click();\r\n        }\r\n\r\n        const handleUploadChange = (e: Event) => {\r\n            let input = e.target as HTMLInputElement;\r\n\r\n            if (input.files) {\r\n                let file = input.files[0];\r\n                let formData = new FormData();\r\n                formData.append('file', file);\r\n\r\n                this.props.uploadReference(formData);\r\n            }\r\n        }\r\n\r\n        const fileSelector = document.createElement('input');\r\n        fileSelector.setAttribute('type', 'file');\r\n        fileSelector.setAttribute('accept', '.jsr');\r\n        fileSelector.addEventListener('change', handleUploadChange);\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <h1>List of Solderings Reference</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/processes/solderingreference/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={handleUploadClick}\r\n                    >\r\n                        <FontAwesomeIcon icon={faUpload} /> Upload\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getListReferencesCard()}\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalReferences}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete reference</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the reference? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"primary\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"primary\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingsReferenceView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport SolderingsReferenceView from './SolderingsReferenceView';\r\n\r\ntype SolderingsReferenceProps =\r\n    AssistantStore.AssistantState &\r\n    typeof AssistantStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean,\r\n    nTotalReferences: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass SolderingsReference extends React.PureComponent<SolderingsReferenceProps, IState> {\r\n    constructor(props: SolderingsReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            nTotalReferences: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchReferences(this.props, this.state.pageNumber);\r\n    }\r\n\r\n    searchReferences(props: SolderingsReferenceProps, pageNumber: number) {\r\n        props.deleteAllReferences();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber\r\n        })\r\n\r\n        AssistantService\r\n            .getReferences(pageNumber, this.state.pageSize)\r\n            .then(references => {\r\n                if (Array.isArray(references)) {\r\n                    references.forEach((x: AssistantStore.Reference) =>\r\n                        props.createReference(x)\r\n                    )\r\n                }\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        AssistantService\r\n            .countReferences()\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalReferences: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleDeleteReference = (id: number) => {\r\n            AssistantService\r\n                .deleteReference(id)\r\n                .then(() =>\r\n                    this.searchReferences(\r\n                        this.props,\r\n                        this.state.pageNumber)\r\n                );\r\n        }\r\n\r\n        const handleUploadReference = (file: FormData) => {\r\n            AssistantService\r\n                .uploadReference(file)\r\n                .then(() =>\r\n                    this.searchReferences(\r\n                        this.props,\r\n                        this.state.pageNumber)\r\n                );\r\n        }\r\n\r\n        const handleDownloadReference = (id: number, name: string) => {\r\n            if (!name) {\r\n                let date = new Date()\r\n                name = date.toISOString();\r\n            }\r\n\r\n            AssistantService\r\n                .downloadReference(id)\r\n                .then((value) => {\r\n                    let data = JSON.stringify(value);\r\n                    const url = window.URL.createObjectURL(new Blob([data]));\r\n                    let link = document.createElement('a');\r\n                    link.href = url;\r\n                    link.setAttribute('download', name.trim() + '.jsr');\r\n                    document.body.appendChild(link);\r\n\r\n                    link.click();\r\n\r\n                    document.body.removeChild(link);\r\n                });\r\n        }\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchReferences(\r\n                this.props,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchReferences(\r\n                this.props,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchReferences(\r\n                this.props,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalReferences / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        return (\r\n            <SolderingsReferenceView\r\n                references={this.props.references}\r\n                nTotalReferences={this.state.nTotalReferences}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                deleteReference={handleDeleteReference}\r\n                uploadReference={handleUploadReference}\r\n                downloadReference={handleDownloadReference}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        references: state.assistant.references\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    AssistantStore.actionCreators\r\n)(SolderingsReference);\r\n","import SolderingsReference from './SolderingsReference';\r\n\r\nexport default SolderingsReference;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { LoadCartridges, ICartridge } from '../../../../utils/cartridgeUtils';\r\nimport StationsPortList from '../../../content-parts/StationsPortList';\r\n\r\ntype SolderingReferenceProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n\r\n    handleStationClick: (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleNameChange: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string,\r\n    cartridgeName: string\r\n}\r\n\r\nclass SolderingReferenceNewStep1 extends React.PureComponent<SolderingReferenceProps, IState> {\r\n    constructor(props: SolderingReferenceProps) {\r\n        super(props);\r\n\r\n        let cartridgeImagePath = \"\";\r\n        let cartridgeName = \"\";\r\n        let cartridges = LoadCartridges();\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeName: cartridgeName,\r\n            cartridgeImagePath: cartridgeImagePath\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoading}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const getListOptionsStationControllersCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Stations available</CardTitle>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const handleStationClick = (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => {\r\n            this.props.handleStationClick(stationControllerId, station, port, tool);\r\n\r\n            let cartridgeImagePath = \"\";\r\n            let cartridgeName = \"\";\r\n            let defaultCartridge = this.state.cartridges.find(x => x.isDefault && x.tool === tool);\r\n\r\n            if (defaultCartridge !== undefined) {\r\n                cartridgeImagePath = defaultCartridge.img;\r\n                cartridgeName = defaultCartridge.name;\r\n                this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n            }\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath,\r\n                cartridgeName: cartridgeName\r\n            });\r\n        }\r\n\r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n            let cartridgeName = cartridge === undefined ? \"\" : cartridge.name;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath,\r\n                cartridgeName: cartridgeName\r\n            });\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>\r\n                                    <strong>Selected temperature:</strong>\r\n                                    <Input\r\n                                        defaultValue={this.props.selectedTemperature / 9}\r\n                                        onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                    />\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <strong>Selected cartridge:</strong>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <strong>Name:</strong>\r\n                                    <Input\r\n                                        onChange={(e) => this.props.handleNameChange(e.target.value)}\r\n                                    />\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={this.state.cartridgeImagePath} alt={this.state.cartridgeName} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (!this.props.isFormCorrect) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New Soldering Reference</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"8\" className=\"pr-0 pl-0\">\r\n                        {getListOptionsStationControllersCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingReferenceNewStep1;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport { SecToString } from '../../../utils/timeUtils';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2Axis extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -10,\r\n                        right: -10\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={50}\r\n                        label={\"Time (s)\"}\r\n                        tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                        interval={this.props.interval} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={[0, 400]} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        domain={[0, 100]} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2Axis;\r\n","import Plot2Axis from './Plot2Axis';\r\n\r\nexport default Plot2Axis;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardBody, CardText, CardTitle } from 'reactstrap';\r\nimport { LoadCartridges } from '../../../../utils/cartridgeUtils';\r\nimport Plot2Axis from '../../../content-parts/Plot2Axis';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype SolderingReferenceProps = {\r\n    currentStep: number,\r\n    lastRealTimeData: IRealTimeData,\r\n    detectedSoldering: ISolderingData,\r\n\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    handleNextClick: () => void,\r\n    handleSaveReferenceClick: () => void\r\n}\r\n\r\nclass SolderingReferenceNewStep2 extends React.PureComponent<SolderingReferenceProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getLastSolderingCard = () => {\r\n            let data: IRealTimeData[];\r\n            data = this.props.detectedSoldering.data.map(x => {\r\n                return {\r\n                    temperature: x.temperature / 9,\r\n                    power: x.power / 10,\r\n                    toolStatus: x.toolStatus,\r\n                    isPortEnabled: x.isPortEnabled,\r\n                    isCalibrating: x.isCalibrating,\r\n                    isSoldering: x.isSoldering,\r\n                    tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                }\r\n            });\r\n\r\n            let registeredPlot =\r\n                <Plot2Axis\r\n                    plotData={data}\r\n                    counterTenthSecond={data.length}\r\n                    interval={Math.floor(data.length / 5)}\r\n                />;\r\n\r\n            let saveButton =\r\n                this.props.detectedSoldering.solderingResult.tenthsOfSecondSoldering === 0 ?\r\n                    \"\" :\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={this.props.handleSaveReferenceClick}\r\n                    >Save reference</Button>;\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Last soldering</CardTitle>\r\n                        <CardText>Time: <strong>{this.props.detectedSoldering.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                        <CardText>Energy: <strong>{this.props.detectedSoldering.solderingResult.energy} w·s</strong></CardText>\r\n                        <CardText>{registeredPlot}</CardText>\r\n                        <CardText>{saveButton}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            let cartridges = LoadCartridges();\r\n            let cartridge = cartridges.find(x => x.fullName === this.props.selectedCartridge);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Selected temperature: {this.props.selectedTemperature / 9} ºC</CardText>\r\n                                <CardText>Cartridge: {this.props.selectedCartridge}</CardText>\r\n                                <CardText>Name: {this.props.selectedName.length === 0 ? \"[No name]\" : this.props.selectedName}</CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={cartridgeImagePath} alt={this.props.selectedCartridge} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Previous</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New Soldering Reference</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"8\" className=\"pl-0\">\r\n                        {getLastSolderingCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingReferenceNewStep2;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport SolderingReferenceNewStep1 from './SolderingReferenceNewStep1';\r\nimport SolderingReferenceNewStep2 from './SolderingReferenceNewStep2';\r\n\r\ntype SolderingReferenceProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    detectedSoldering: ISolderingData,\r\n\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    handleStationClick: (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleNameChange: (value: string) => void,\r\n    handleNextClick: () => void,\r\n    handleSaveReferenceClick: () => void\r\n}\r\n\r\nclass SolderingReferenceNewView extends React.PureComponent<SolderingReferenceProps> {\r\n    public render() {\r\n        return (\r\n            <Container>\r\n                <SolderingReferenceNewStep1\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n                    isFormCorrect={this.props.isFormCorrect}\r\n\r\n                    stationControllers={this.props.stationControllers}\r\n\r\n                    selectedTool={this.props.selectedTool}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    handleStationClick={this.props.handleStationClick}\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleCartridgeChange={this.props.handleCartridgeChange}\r\n                    handleNameChange={this.props.handleNameChange}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <SolderingReferenceNewStep2\r\n                    currentStep={this.props.currentStep}\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    detectedSoldering={this.props.detectedSoldering}\r\n\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n                    selectedCartridge={this.props.selectedCartridge}\r\n                    selectedName={this.props.selectedName}\r\n\r\n                    handleNextClick={this.props.handleNextClick}\r\n                    handleSaveReferenceClick={this.props.handleSaveReferenceClick}\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingReferenceNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport StationService from '../../../../services/station.service';\r\nimport WorkService from '../../../../services/work.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport SolderingReferenceNewView from './SolderingReferenceNewView';\r\n\r\ntype SolderingReferenceProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n  & RouteComponentProps<{ id: string }>;\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStationControllerId: string,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSoldering: ISolderingData\r\n}\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass SolderingReferenceNew extends React.PureComponent<SolderingReferenceProps, IState> {\r\n    constructor(props: SolderingReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStationControllerId: \"\",\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                software: \"\",\r\n                hardware: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: -1,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n            selectedName: \"\",\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            }\r\n        }\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !this.state.wasSoldering) {\r\n\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(this.state.registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = this.state.registeredData.length - nDataSoldering; i < this.state.registeredData.length; i++) {\r\n                                        data.push(this.state.registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: \"\", //TODO\r\n                                        selectedTemperature: 0, //TODO\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    this.setState((state: IState, props: SolderingReferenceProps) => {\r\n                                        return {\r\n                                            detectedSoldering: soldering,\r\n                                            wasSoldering: true\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && this.state.wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            this.setState((state: IState, props: SolderingReferenceProps) => {\r\n                                                let soldering = state.detectedSoldering;\r\n                                                let solderingResult = soldering.solderingResult;\r\n\r\n                                                solderingResult.energy = x.energy;\r\n                                                solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n\r\n\r\n                                                return {\r\n                                                    detectedSoldering: soldering,\r\n                                                    wasSoldering: false\r\n                                                };\r\n                                            });\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    this.setState((state: IState, props: SolderingReferenceProps) => {\r\n                                        let soldering = state.detectedSoldering;\r\n                                        let data = soldering.data;\r\n\r\n                                        data.push(x);\r\n                                        soldering.data = data;\r\n\r\n                                        let solderingResult = soldering.solderingResult;\r\n                                        solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                        soldering.solderingResult = solderingResult;\r\n\r\n                                        return {\r\n                                            detectedSoldering: soldering\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                this.setState((state: IState, props: SolderingReferenceProps) => {\r\n                                    let registeredData = state.registeredData.concat(x);\r\n                                    registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n\r\n                                    return {\r\n                                        registeredData: registeredData,\r\n                                        lastRealTimeData: x\r\n                                    };\r\n                                });\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            readyGetMoreData: true\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: SolderingReferenceProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                if (Array.isArray(scs)) {\r\n                    scs.forEach((sc: StationStore.StationController) => {\r\n                        props.createStationController(sc);\r\n\r\n                        sc.stations.forEach((s: StationStore.Station) =>\r\n                            props.createStation(s, sc.id)\r\n                        )\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (stationControllerId: string, station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStationControllerId: stationControllerId,\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(stationControllerId, station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationControllerId: string, stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationControllerId, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationControllerId: string, stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationControllerId, stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            this.setState({\r\n                selectedName: value\r\n            });\r\n        }\r\n\r\n        const handleSaveReferenceClick = () => {\r\n            AssistantService\r\n                .generateReferenceSoldering(\r\n                    this.state.selectedStationControllerId,\r\n                    this.state.selectedStation.id,\r\n                    this.state.selectedPort,\r\n                    this.state.selectedName,\r\n                    this.state.selectedCartridge)\r\n                .then(() =>\r\n                    this.props.history.push(\"/processes/solderingreference\")\r\n                );\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId !== -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n\r\n            if (this.state.currentStep === 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep === 2) {\r\n                this.setState({\r\n                    currentStep: 1,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <SolderingReferenceNewView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n                isFormCorrect={this.state.selectedStation.id !== \"\"}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                detectedSoldering={this.state.detectedSoldering}\r\n\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n                selectedName={this.state.selectedName}\r\n\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleNameChange={handleNameChange}\r\n                handleNextClick={handleNextClick}\r\n                handleSaveReferenceClick={handleSaveReferenceClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(SolderingReferenceNew);\r\n","import SolderingReferenceNew from './SolderingReferenceNew';\r\n\r\nexport default SolderingReferenceNew;\r\n","import StationManagerCardView from './StationManagerCardView.tsx';\r\n\r\nexport default StationManagerCardView;","import React from 'react'\r\nimport CardLinkApp from '../../CardLinkApp';\r\n\r\nconst StationManagerCardView = () => {\r\n    return (\r\n        <CardLinkApp \r\n            to=\"/qst/stationsmanager\"\r\n            imgPath=\"img/iconImg/workBench.png\"\r\n            cardText=\"Manage stations controller and connected stations.\"\r\n            cardTitle=\"Stations manager\"\r\n            alt=\"Work Benchs\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default StationManagerCardView;\r\n\r\n","import Traceability from './Traceability';\r\n\r\nexport default Traceability;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Col, Row } from 'reactstrap';\r\nimport TasksCard from '../../../content-parts/CardLinkApp/TasksCard';\r\nimport WorkProcessCard from '../../../content-parts/CardLinkApp/WorkProcessCard';\r\nimport StationManagerCard from '../../../content-parts/CardLinkApp/StationManagerCard';\r\n\r\nconst Traceability = () =>{\r\n        return (\r\n            <Container>\r\n                <Row className=\"content-center\" xs={1} sm={2} md={3}>\r\n                    <Col>\r\n                        <TasksCard/>\r\n                    </Col>\r\n                    <Col>\r\n                        <WorkProcessCard/>\r\n                    </Col>\r\n                    <Col>\r\n                        <StationManagerCard/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n};\r\n\r\nexport default Traceability;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TasksService {\r\n    static async countTasks(filter) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTasks();\r\n        }\r\n        else {\r\n            count = await RestService.countTasks(filter);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTasks();\r\n        }\r\n        else {\r\n            tasks = await RestService.getTasks(filter, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskById();\r\n        }\r\n        else {\r\n            task = await RestService.getTaskById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n\r\n    static async createTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.createTask();\r\n        }\r\n        else {\r\n            await RestService.createTask(task);\r\n        }\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.updateTask();\r\n        }\r\n        else {\r\n            await RestService.updateTask(task);\r\n        }\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteTask();\r\n        }\r\n        else {\r\n            await RestService.deleteTask(id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TasksService;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons'\r\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { faFile } from '@fortawesome/free-regular-svg-icons'\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\n\r\ntype TasksProps = {\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\nclass TasksView extends React.PureComponent<TasksProps> {\r\n\r\n    public render() {\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (this.props.nTotalTasks === 0) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <span>No tasks, </span><NavLink tag={Link} className=\"p-0 d-inline\" to=\"/qst/task/new\">create new</NavLink><span> one.</span>\r\n                    </React.Fragment>);\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.tasks) {\r\n                options.push(\r\n                    <tr>\r\n                        <td>{value.id}</td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.timesPerformed}</td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"p-0 pr-3 d-inline\" to={\"/qst/task/\" + value.id + \"/detail\"}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                            <NavLink tag={Link} className=\"p-0 pr-3 d-inline\" to={\"/qst/task/\" + value.id + \"/edit\"}>\r\n                                <FontAwesomeIcon icon={faPen} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\"># of times performed</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        const getListOptionsTasksCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                        <CardText>\r\n                            {getListOptionsTasks()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <h1>List of Tasks</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/qst/task/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getListOptionsTasksCard()}\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TasksView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TasksView from './TasksView';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype TasksProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    timer: number,\r\n    isLoading: boolean,\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    filter: string\r\n}\r\n\r\nclass Tasks extends React.PureComponent<TasksProps, IState> {\r\n    constructor(props: TasksProps) {\r\n        super(props);\r\n        this.state = {\r\n            timer: -1,\r\n            isLoading: true,\r\n            nTotalTasks: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1,\r\n            filter: \"\"\r\n        };\r\n\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n    }\r\n\r\n    searchTasks(props: TasksProps, filter: string, pageNumber: number) {\r\n        props.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                if (Array.isArray(tasks)) {\r\n                    tasks.forEach((x: TaskStore.Task) =>\r\n                        props.createTask(x)\r\n                    )\r\n                }\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks.bind(this), WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <TasksView\r\n                tasks={this.props.tasks}\r\n                nTotalTasks={this.state.nTotalTasks}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n                handleSearchFieldChange={handleSearchFieldChange}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    TaskStore.actionCreators\r\n)(Tasks);\r\n","import Tasks from './Tasks';\r\n\r\nexport default Tasks;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport { GetTools } from '../../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\n\r\ntype TaskNewProps = {\r\n    isLoading: boolean,\r\n    reference: AssistantStore.Reference,\r\n\r\n    handleRefSolderingChange: (id: number) => void,\r\n    newTask: (task: TaskStore.Task) => void\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n}\r\n\r\nclass TaskNewView extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        let task = {\r\n            id: 0,\r\n            name: \"\",\r\n            workConfig: {\r\n                tool: 1,\r\n                selectedTemp: 350 * 9,\r\n                changeSelectedTemp: false,\r\n                solderingReferenceId: -1,\r\n                changeSolderingReference: false,\r\n                qualityControl: false\r\n            },\r\n            timesPerformed: 0\r\n        }\r\n\r\n        this.state = {\r\n            task: task\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const getReferenceSoldering = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            if (this.props.reference.id <= 0) {\r\n                return \"Soldering reference undefined.\";\r\n            }\r\n\r\n            return (\r\n                <PlotPowerAxisTiny\r\n                    plotData={this.props.reference.power}\r\n                />\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySolderingRefChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        changeSolderingReference: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleSolderingRefChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            this.props.handleRefSolderingChange(nValue);\r\n\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        solderingReferenceId: nValue\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleQualityControlChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        qualityControl: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            this.props.newTask(this.state.task);\r\n        };\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New task</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Name:</Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                onChange={(e) => handleNameChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSolderingReference\"\r\n                                                label=\"Soldering reference code\"\r\n                                                onChange={(e) => handleModifySolderingRefChange(e.target.checked)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                onChange={(e) => handleSolderingRefChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeQualityControl\"\r\n                                                label=\"Visualize quality control\"\r\n                                                onChange={(e) => handleQualityControlChange(e.target.checked)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    {getReferenceSoldering()}\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Create\r\n                    </Button>\r\n\r\n                    <Button color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to=\"/qst/task\">Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TaskNewView from './TaskNewView';\r\n\r\ntype TaskNewProps = {\r\n}\r\n\r\ninterface IState {\r\n    redirect: string,\r\n    isLoading: boolean,\r\n    reference: AssistantStore.Reference\r\n}\r\n\r\nclass TaskNew extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n            isLoading: false,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            }\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const handleRefSolderingChange = (id: number) => {\r\n            this.setState({\r\n                isLoading: true\r\n            })\r\n\r\n            AssistantService\r\n                .getReferenceById(id)\r\n                .then(reference => {\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        reference: reference\r\n                    })\r\n                });\r\n        }\r\n\r\n        const handleNewTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .createTask(task)\r\n                .then(x => {\r\n                    this.setState({\r\n                        redirect: \"/qst/task\"\r\n                    });\r\n                });\r\n        }\r\n\r\n        if (this.state.redirect.length > 0) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n\r\n        return (\r\n            <TaskNewView\r\n                isLoading={this.state.isLoading}\r\n                reference={this.state.reference}\r\n\r\n                handleRefSolderingChange={handleRefSolderingChange}\r\n                newTask={handleNewTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    TaskStore.actionCreators\r\n)(TaskNew);\r\n","import TaskNew from './TaskNew';\r\n\r\nexport default TaskNew;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport { GetTools } from '../../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\n\r\ntype TaskEditProps = {\r\n    task: TaskStore.Task,\r\n    isLoading: boolean,\r\n    reference: AssistantStore.Reference,\r\n\r\n    handleRefSolderingChange: (id: number) => void,\r\n    updateTask: (task: TaskStore.Task) => void,\r\n    deleteTask: (id: number) => void\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n    showDeleteModal: boolean;\r\n}\r\n\r\nclass TaskEditView extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            task: props.task,\r\n            showDeleteModal: false\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const getReferenceSoldering = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            if (this.props.reference.id <= 0) {\r\n                return \"Soldering reference undefined.\";\r\n            }\r\n\r\n            return (\r\n                <PlotPowerAxisTiny\r\n                    plotData={this.props.reference.power}\r\n                />\r\n            )\r\n        }\r\n\r\n        const getDeleteButton = () => {\r\n            if (this.props.task.timesPerformed > 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button outline color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                    <a href=\"#\" className=\"p-0\" onClick={(event) => handleDeleteClick(event)}>\r\n                        <FontAwesomeIcon icon={faTrashAlt} className=\"pr-1\" /> Delete task\r\n                    </a>\r\n                </Button>\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySolderingRefChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        changeSolderingReference: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleSolderingRefChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        solderingReferenceId: nValue\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleQualityControlChange = (value: boolean) => {\r\n            this.setState(prevState => ({\r\n                task: {\r\n                    ...prevState.task,\r\n                    workConfig: {\r\n                        ...prevState.task.workConfig,\r\n                        qualityControl: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            if (this.state.task === undefined) {\r\n                return;\r\n            }\r\n\r\n            this.props.updateTask(this.state.task);\r\n        };\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n            event.preventDefault();\r\n            this.setState({\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteTask(this.state.task.id);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <h1>{this.state.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    {getDeleteButton()}\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Name:</Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                defaultValue={this.state.task.name}\r\n                                                onChange={(e) => handleNameChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                    <hr />\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                defaultChecked={this.state.task.workConfig.changeSelectedTemp}\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                defaultValue={this.state.task.workConfig.selectedTemp / 9}\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeSolderingReference\"\r\n                                                label=\"Soldering reference code\"\r\n                                                defaultChecked={this.state.task.workConfig.changeSolderingReference}\r\n                                                onChange={(e) => handleModifySolderingRefChange(e.target.checked)} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                defaultValue={this.state.task.workConfig.solderingReferenceId}\r\n                                                onChange={(e) => handleSolderingRefChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <hr />\r\n                                    <Row form className=\"mb-2\">\r\n                                        <Col sm={3} className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                id=\"taskChangeQualityControl\"\r\n                                                label=\"Visualize quality control\"\r\n                                                defaultChecked={this.state.task.workConfig.qualityControl}\r\n                                                onChange={(e) => handleQualityControlChange(e.target.checked)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    {getReferenceSoldering()}\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Confirm\r\n                    </Button>\r\n\r\n                    <Button color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/qst/task/\" + this.state.task.id + \"/detail\"}>Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete task</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the task? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"primary\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"primary\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskEditView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport TaskEditView from './TaskEditView';\r\n\r\ntype TaskEditProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{ id: string }>;\r\n\r\ninterface IState {\r\n    id: number,\r\n    isLoading: boolean,\r\n    isLoadingRefSoldering: boolean,\r\n    reference: AssistantStore.Reference\r\n}\r\n\r\nclass TaskEdit extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            isLoading: true,\r\n            isLoadingRefSoldering: true,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            }\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n    }\r\n\r\n    searchTask(props: TaskEditProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then((x: TaskStore.Task) => {\r\n                props.createTask(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n\r\n                if (x.workConfig.changeSolderingReference) {\r\n                    AssistantService\r\n                        .getReferenceById(x.workConfig.solderingReferenceId)\r\n                        .then(reference => {\r\n                            this.setState({\r\n                                isLoadingRefSoldering: false,\r\n                                reference: reference\r\n                            })\r\n                        });\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        isLoadingRefSoldering: false\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleRefSolderingChange = (id: number) => {\r\n            this.setState({\r\n                isLoadingRefSoldering: true\r\n            })\r\n\r\n            AssistantService\r\n                .getReferenceById(id)\r\n                .then(reference => {\r\n                    this.setState({\r\n                        isLoadingRefSoldering: false,\r\n                        reference: reference\r\n                    })\r\n                });\r\n        }\r\n\r\n        const handleUpdateTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .updateTask(task)\r\n                .then(() =>\r\n                    this.props.history.push(\"/qst/task/\" + this.state.id + \"/detail\")\r\n                );\r\n        }\r\n\r\n        const handleDeleteTask = (id: number) => {\r\n            TasksService\r\n                .deleteTask(id)\r\n                .then(() =>\r\n                    this.props.history.push(\"/qst/task\")\r\n                );\r\n        }\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"primary\" />\r\n                </div>);\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id === this.state.id);\r\n\r\n        if (task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        return (\r\n            <TaskEditView\r\n                task={task}\r\n                isLoading={this.state.isLoadingRefSoldering}\r\n                reference={this.state.reference}\r\n\r\n                handleRefSolderingChange={handleRefSolderingChange}\r\n                updateTask={handleUpdateTask}\r\n                deleteTask={handleDeleteTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.task,\r\n    TaskStore.actionCreators\r\n)(TaskEdit);\r\n","import TaskEdit from './TaskEdit';\r\n\r\nexport default TaskEdit;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TaskHistoriessService {\r\n    static async countTaskHistories(taskId) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTaskHistories();\r\n        }\r\n        else {\r\n            count = await RestService.countTaskHistories(taskId);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTaskHistories(id, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTaskHistories(id);\r\n\r\n        }\r\n        else {\r\n            tasks = await RestService.getTaskHistories(id, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskHistoryById(id);\r\n\r\n        }\r\n        else {\r\n            task = await RestService.getTaskHistoryById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n}\r\n\r\nexport default TaskHistoriessService;\r\n","import ResponsivePieChart from './ResponsivePieChart';\r\n\r\nexport default ResponsivePieChart;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    data: object[]\r\n}\r\n\r\nclass ResponsivePieChart extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        const COLORS = ['#00C49F', '#dc3545'];\r\n\r\n        return (\r\n            <ResponsiveContainer>\r\n                <PieChart>\r\n                    <Pie\r\n                        data={this.props.data}\r\n                        dataKey=\"value\"\r\n                    >\r\n                        {\r\n                            this.props.data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n            </ResponsiveContainer>)\r\n    }\r\n};\r\n\r\nexport default ResponsivePieChart;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle, faEye, faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport ResponsivePieChart from '../../../content-parts/ResponsivePieChart';\r\nimport { Round } from '../../../../utils/numberUtils';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\n\r\ntype TaskDetailProps = {\r\n    task: TaskStore.Task | undefined,\r\n    taskHistories: TaskHistoryStore.TaskHistory[],\r\n    nTotalTaskHistories: number,\r\n    reference: AssistantStore.Reference,\r\n\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n    isLoadingRefSoldering: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass TaskDetailView extends React.PureComponent<TaskDetailProps> {\r\n    public render() {\r\n        if (this.props.isLoadingTask) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"primary\" />\r\n                </div>);\r\n        }\r\n\r\n        if (this.props.task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        const getDefectsChart = (correct: number, incorrect: number) => {\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            return <ResponsivePieChart data={data} />\r\n        }\r\n\r\n        const getReferenceSoldering = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            if (!this.props.task.workConfig.changeSolderingReference) {\r\n                return \"\";\r\n            }\r\n\r\n            if (this.props.isLoadingRefSoldering) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            return (\r\n                <PlotPowerAxisTiny\r\n                    plotData={this.props.reference.power}\r\n                />\r\n            )\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            let details =\r\n                <React.Fragment>\r\n                    <CardText>Code: {this.props.task.id}</CardText>\r\n                    <CardText># of times performed: {this.props.task.timesPerformed}</CardText>\r\n\r\n                    <hr />\r\n                    <CardText>Tool: {ToolToString(this.props.task.workConfig.tool)}</CardText>\r\n                    {this.props.task.workConfig.changeSelectedTemp ?\r\n                        <CardText>\r\n                            Selected temperature: {Math.floor(this.props.task.workConfig.selectedTemp / 9)} ºC\r\n                        </CardText> :\r\n                        \"\"\r\n                    }\r\n                    {this.props.task.workConfig.changeSolderingReference ?\r\n                        <CardText>\r\n                            Soldering reference: {this.props.reference.name.length === 0 ? \"[No name]\" : this.props.reference.name}\r\n                        </CardText> :\r\n                        \"\"\r\n                    }\r\n                </React.Fragment>\r\n\r\n\r\n\r\n            let body =\r\n                this.props.task.workConfig.changeSolderingReference ?\r\n                    <CardBody className=\"d-flex flex-column\">\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                {details}\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                {getReferenceSoldering()}\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody> :\r\n                    <CardBody>\r\n                        {details}\r\n                    </CardBody>\r\n\r\n            return (\r\n                <Card>\r\n                    {body}\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getQualityCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            let correct = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType === 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            let incorrect = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType !== 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            let total = correct + incorrect;\r\n            let percent = total === 0 ? 0 : Round((correct / total) * 100);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getDefectsChart(correct, incorrect)}\r\n                        <CardText>Correct solderings: <strong>{correct}/{total} ({percent}%)</strong></CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getListHistoryTasks = () => {\r\n            if (this.props.task === undefined)\r\n                return \"\";\r\n\r\n            if (this.props.isLoadingHistories) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            let items = [];\r\n\r\n            for (const value of this.props.taskHistories) {\r\n                let circleLight = \"circle-light-\" + (value.workData.workSolderings.filter(x => x.solderingType === 1).length === 0 ? \"0\" : \"1\")\r\n\r\n                items.push(\r\n                    <tr>\r\n                        <td>{value.id}</td>\r\n                        <td>{new Date(value.finishDate).toLocaleDateString('es-ES')}</td>\r\n                        {this.props.task.workConfig.qualityControl ?\r\n                            <td>\r\n                                <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"} />\r\n                            </td> : \"\"\r\n                        }\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/qst/task/\" + this.props.task.id + \"/history/\" + value.id}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Id</th>\r\n                            <th scope=\"col\">Finished date</th>\r\n                            {this.props.task.workConfig.qualityControl ?\r\n                                <th scope=\"col\">Detected defects</th> : \"\"\r\n                            }\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n\r\n        const getListHistoryTasksCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Task history ({this.props.nTotalTaskHistories} elements)</CardTitle>\r\n                        <CardText>\r\n                            {getListHistoryTasks()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getLayout = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            if (this.props.task.workConfig.qualityControl) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getDetailsCard()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getQualityCard()}\r\n                        </Col>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <React.Fragment>\r\n                        {getDetailsCard()}\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <h1>{this.props.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Button outline color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink tag={Link} className=\"p-0\" to={\"/qst/task/\" + this.props.task.id + \"/edit\"}>\r\n                            <FontAwesomeIcon icon={faPen} className=\"pr-1\" /> Edit task\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getLayout()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getListHistoryTasksCard()}\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTaskHistories}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskDetailView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport TaskDetailView from './TaskDetailView';\r\n\r\ntype TaskDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n    & TaskHistoryStore.TaskHistoryState\r\n    & RouteComponentProps<{ id: string }>\r\n\r\ninterface IState {\r\n    id: number,\r\n    reference: AssistantStore.Reference,\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n    isLoadingRefSoldering: boolean,\r\n    nTotalTaskHistories: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass TaskDetail extends React.PureComponent<TaskDetailProps, IState> {\r\n    constructor(props: TaskDetailProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            },\r\n            isLoadingTask: true,\r\n            isLoadingHistories: true,\r\n            isLoadingRefSoldering: true,\r\n            nTotalTaskHistories: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n        this.searchTaskHistories(this.props, id, this.state.pageNumber);\r\n    }\r\n\r\n    searchTask(props: TaskDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then((x: TaskStore.Task) => {\r\n                props.taskActions.createTask(x)\r\n\r\n                this.setState({\r\n                    isLoadingTask: false\r\n                })\r\n\r\n                AssistantService\r\n                    .getReferenceById(x.workConfig.solderingReferenceId)\r\n                    .then(reference => {\r\n                        this.setState({\r\n                            isLoadingRefSoldering: false,\r\n                            reference: reference\r\n                        })\r\n                    });\r\n            });\r\n    }\r\n\r\n    searchTaskHistories(props: TaskDetailProps, id: string, pageNumber: number) {\r\n        props.taskHistoryActions.deleteAllTaskHistories();\r\n\r\n        TaskHistoriesService\r\n            .getTaskHistories(id, pageNumber, this.state.pageSize)\r\n            .then(taskHistories => {\r\n                if (Array.isArray(taskHistories)) {\r\n                    taskHistories.forEach((x: TaskHistoryStore.TaskHistory) =>\r\n                        props.taskHistoryActions.createTaskHistory(x)\r\n                    )\r\n                }\r\n\r\n                this.setState({\r\n                    isLoadingHistories: false,\r\n                    pageNumber: pageNumber\r\n                })\r\n            });\r\n\r\n        TaskHistoriesService\r\n            .countTaskHistories(id)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTaskHistories: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTaskHistories / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id === this.state.id);\r\n        const taskHistories = this.props.taskHistories;\r\n\r\n        return (\r\n            <TaskDetailView\r\n                task={task}\r\n                taskHistories={taskHistories}\r\n                nTotalTaskHistories={this.state.nTotalTaskHistories}\r\n                reference={this.state.reference}\r\n\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n\r\n                isLoadingTask={this.state.isLoadingTask}\r\n                isLoadingHistories={this.state.isLoadingHistories}\r\n                isLoadingRefSoldering={this.state.isLoadingRefSoldering}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskDetail);\r\n","import TaskDetail from './TaskDetail';\r\n\r\nexport default TaskDetail;\r\n","import PlotReferenceTiny from './PlotReferenceTiny';\r\n\r\nexport default PlotReferenceTiny;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    soldering: number[],\r\n    reference: number[]\r\n}\r\n\r\nclass PlotReferenceTiny extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        let plotDataObj = [];\r\n\r\n        for (var i: number = 0; i < Math.max(this.props.soldering.length, this.props.reference.length); i++) {\r\n            plotDataObj.push({\r\n                tick: i,\r\n                soldering: i < this.props.soldering.length ? this.props.soldering[i] / 10 : null,\r\n                reference: i < this.props.reference.length ? this.props.reference[i] / 10 : null\r\n            });\r\n        }\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis />\r\n\r\n                    <Line dataKey=\"soldering\" type=\"monotone\" dot={false} />\r\n                    <Line dataKey=\"reference\" type=\"monotone\" dot={false} stroke=\"#bd8531\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotReferenceTiny;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Button, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport { Round } from '../../../../utils/numberUtils';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport { GetPlotSeriesData } from '../../../../utils/plotUtils';\r\nimport { ClassificationToString } from '../../../../utils/solderingClassificationUtils';\r\nimport Plot2Axis from '../../../content-parts/Plot2Axis';\r\nimport PlotPowerAxisTiny from '../../../content-parts/PlotPowerAxisTiny';\r\nimport PlotReferenceTiny from '../../../content-parts/PlotReferenceTiny';\r\nimport ResponsivePieChart from '../../../content-parts/ResponsivePieChart';\r\nimport './TaskHistoryDetail.css';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    task: TaskStore.Task,\r\n    taskHistory: TaskHistoryStore.TaskHistory\r\n}\r\n\r\nclass TaskHistoryDetailView extends React.PureComponent<TaskHistoryDetailProps> {\r\n    public render() {\r\n        const getDetailsCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>Finished date: {new Date(this.props.taskHistory.finishDate).toLocaleDateString('es-ES')}</CardText>\r\n                        <CardText>Task code: {this.props.task.id}</CardText>\r\n\r\n                        <hr />\r\n                        <CardText>Station name: {this.props.taskHistory.workData.stationName}</CardText>\r\n                        <CardText>Port: {this.props.taskHistory.workData.stationPort + 1}</CardText>\r\n\r\n                        <hr />\r\n                        <CardText>Tool: {ToolToString(this.props.taskHistory.workConfig.tool)}</CardText>\r\n                        {this.props.taskHistory.workConfig.changeSelectedTemp ?\r\n                            <CardText>\r\n                                Selected temperature: {Math.floor(this.props.taskHistory.workConfig.selectedTemp / 9)} ºC\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                        {this.props.taskHistory.workConfig.changeSolderingReference ?\r\n                            <CardText>\r\n                                Soldering reference: {this.props.taskHistory.workConfig.solderingReference.name}\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getDefectsChart = (correct: number, incorrect: number) => {\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            return <ResponsivePieChart data={data} />\r\n        }\r\n\r\n        const getQualityCard = () => {\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n\r\n            let correct = workSolderings.filter(x => x.solderingType === 0).length;\r\n            let incorrect = workSolderings.length - correct;\r\n\r\n            let total = correct + incorrect;\r\n            let percent = total === 0 ? 0 : Round((correct / total) * 100);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        {getDefectsChart(correct, incorrect)}\r\n                        <CardText>Correct solderings: <strong>{correct}/{total} ({percent}%)</strong></CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredDataCard = () => {\r\n            let plotData = GetPlotSeriesData(this.props.taskHistory.workData.temperature, this.props.taskHistory.workData.power);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered data</CardTitle>\r\n                        <CardText className=\"p-3\">\r\n                            <Plot2Axis\r\n                                plotData={plotData}\r\n                                counterTenthSecond={plotData.length}\r\n                                interval={Math.floor(plotData.length / 5)}\r\n                            />\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getSolderingsCard = () => {\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n            let showReference = this.props.taskHistory.workConfig.changeSolderingReference;\r\n            let referencePower = showReference ?\r\n                this.props.taskHistory.workConfig.solderingReference.power : [];\r\n\r\n            let registeredSolderings = workSolderings.map(x => {\r\n                let circleLight = \"circle-light-\" + (x.solderingType === 0 ? \"0\" : \"1\")\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"card-v2\">\r\n                            <CardBody>\r\n                                {\r\n                                    this.props.task.workConfig.qualityControl ?\r\n                                        <CardText>\r\n                                            Detected defect: <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"} />\r\n                                            <strong className=\"pl-1\">{ClassificationToString(x.solderingType)}</strong>\r\n                                        </CardText> : \"\"\r\n                                }\r\n                                {\r\n                                    showReference ?\r\n                                        <PlotReferenceTiny\r\n                                            soldering={x.power}\r\n                                            reference={referencePower}\r\n                                        /> :\r\n                                        <PlotPowerAxisTiny\r\n                                            plotData={x.power}\r\n                                        />\r\n                                }\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Detected solderings</CardTitle>\r\n                        <Row xs={1} sm={2} md={4}>\r\n                            {registeredSolderings}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getLayout = () => {\r\n            if (this.props.task.workConfig.qualityControl) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getDetailsCard()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getQualityCard()}\r\n                        </Col>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <React.Fragment>\r\n                        {getDetailsCard()}\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.props.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getLayout()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getSolderingsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredDataCard()}\r\n                </Row>\r\n                <Row>\r\n                    <Button color=\"primary\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            className=\"text-white p-0\"\r\n                            href={\"/qst/task/\" + this.props.task.id + \"/detail\"}>Return</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskHistoryDetailView;\r\n","export function GetClassifications() {\r\n    var values =\r\n    {\r\n        0: \"Correct\",\r\n        1: \"Low thermal contact\",\r\n        2: \"Slow soldering\",\r\n        3: \"Fast soldering\",\r\n        4: \"Oscillations\",\r\n        5: \"Excess tin\",\r\n        6: \"Little tin\"\r\n    }\r\n    return values;\r\n}\r\n\r\nexport function ClassificationToString(id) {\r\n    let value = GetClassifications()[id];\r\n\r\n    if (typeof (value) === \"undefined\") {\r\n        return \"Undefined\";\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../../store/TaskHistory';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../../utils/numberUtils';\r\nimport TaskHistoryDetailView from './TaskHistoryDetailView';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n    & TaskHistoryStore.TaskHistoryState\r\n    & RouteComponentProps<{ taskId: string, historyId: string }>\r\n\r\ninterface IState {\r\n    taskId: number,\r\n    taskHistoryId: number,\r\n    isLoading: boolean\r\n}\r\n\r\nclass TaskHistoryDetail extends React.PureComponent<TaskHistoryDetailProps, IState> {\r\n    constructor(props: TaskHistoryDetailProps) {\r\n        super(props);\r\n        const taskId = TryParseInt(this.props.match.params['taskId'], 0);\r\n        const taskHistoryId = TryParseInt(this.props.match.params['historyId'], 0);\r\n\r\n        this.state = {\r\n            taskId: taskId,\r\n            taskHistoryId: taskHistoryId,\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchTask(this.props, taskId);\r\n        this.searchTaskHistories(this.props, taskHistoryId);\r\n    }\r\n\r\n    searchTask(props: TaskHistoryDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x =>\r\n                props.taskActions.createTask(x)\r\n            );\r\n    }\r\n\r\n    searchTaskHistories(props: TaskHistoryDetailProps, id: string) {\r\n        props.taskHistoryActions.deleteAllTaskHistories();\r\n\r\n        TaskHistoriesService\r\n            .getTaskHistoryById(id)\r\n            .then(x => {\r\n                props.taskHistoryActions.createTaskHistory(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const task = this.props.tasks.find(x => x.id === this.state.taskId);\r\n        const taskHistory = this.props.taskHistories.find(x => x.id === this.state.taskHistoryId);\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"primary\" />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (task === undefined || taskHistory === undefined) {\r\n            return \"No item founded.\";\r\n        }\r\n\r\n        return (\r\n            <TaskHistoryDetailView\r\n                task={task}\r\n                taskHistory={taskHistory}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskHistoryDetail);\r\n","import TaskHistoryDetail from './TaskHistoryDetail';\r\n\r\nexport default TaskHistoryDetail;\r\n","import * as React from 'react';\r\nimport { Input } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport PaginationNav from '../../../content-components/PaginationNav';\r\n\r\ntype WorkProcessProps = {\r\n    isLoading: boolean,\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleTaskClick: (task: TaskStore.Task) => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\ninterface IState {\r\n    taskFilter: string[]\r\n}\r\n\r\nclass WorkProcessStep1 extends React.PureComponent<WorkProcessProps, IState> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n        this.state = {\r\n            taskFilter: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.tasks.map(x => (\r\n                    <tr className=\"pointer\" onClick={() => this.props.handleTaskClick(x)}>\r\n                        <td>{x.id}</td>\r\n                        <td>{x.name}</td>\r\n                        <td>{ToolToString(x.workConfig.tool)}</td>\r\n                    </tr>\r\n                ))\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep1;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\n\r\ntype WorkProcessProps = {\r\n    isLoading: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    taskTool: number,\r\n    handleStationClick: (stationControllerId: string, station: StationStore.Station, port: number) => void\r\n}\r\n\r\nclass WorkProcessStep2 extends React.PureComponent<WorkProcessProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            let stationControllers = this.props.stationControllers\r\n                .filter(sc => (\r\n                    sc.stations.some(s => (\r\n                        s.ports.some(p => (\r\n                            p.tool === this.props.taskTool\r\n                        ))\r\n                    ))\r\n                ));\r\n\r\n            let count = stationControllers.reduce(((total, x) =>\r\n                total + x.stations.length\r\n            ), 0);\r\n\r\n            if (count === 0) {\r\n                return \"No stations connected.\";\r\n            }\r\n\r\n            let options =\r\n                stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                                .filter(p => (\r\n                                    p.tool === this.props.taskTool\r\n                                ))\r\n                                .map(p => (\r\n                                    <tr className=\"pointer\" onClick={() => this.props.handleStationClick(sc.id, s, p.id)}>\r\n                                        <td>{s.name}[{s.model}]</td>\r\n                                        <td>{p.id + 1}</td>\r\n                                        <td>{ToolToString(p.tool)}</td>\r\n                                    </tr>\r\n                                ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardText>\r\n                                {getListOptionsStationControllers()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep2;\r\n","import PlotReference from './PlotReference';\r\n\r\nexport default PlotReference;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport { SecToString } from '../../../utils/timeUtils';\r\n\r\ntype PlotProps = {\r\n    soldering: number[],\r\n    reference: number[]\r\n}\r\n\r\nclass PlotReference extends React.PureComponent<PlotProps> {\r\n    public render() {\r\n        let plotDataObj = [];\r\n\r\n        for (var i: number = 0; i < Math.max(this.props.soldering.length, this.props.reference.length); i++) {\r\n            plotDataObj.push({\r\n                tick: i,\r\n                soldering: i < this.props.soldering.length ? this.props.soldering[i] : null,\r\n                reference: i < this.props.reference.length ? this.props.reference[i] : null\r\n            });\r\n        }\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -10,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={50}\r\n                        label={\"Time (s)\"}\r\n                        tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                        interval={Math.floor(plotDataObj.length / 5)} />\r\n                    <YAxis />\r\n\r\n                    <Line dataKey=\"soldering\" type=\"monotone\" dot={false} />\r\n                    <Line dataKey=\"reference\" type=\"monotone\" dot={false} stroke=\"#bd8531\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotReference;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../../utils/portUtils';\r\nimport { ToolToString } from '../../../../utils/toolUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport Plot2Axis from '../../../content-parts/Plot2Axis';\r\nimport PlotReference from '../../../content-parts/PlotReference';\r\nimport PortStatusCard from '../../../content-parts/PortStatusCard';\r\n\r\ntype WorkProcessProps = {\r\n    selectedTask: TaskStore.Task,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    reference: AssistantStore.Reference,\r\n\r\n    queueId: number,\r\n\r\n    plotData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\nclass WorkProcessStep3 extends React.PureComponent<WorkProcessProps> {\r\n    public render() {\r\n        const getDetails = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>Task name: {this.props.selectedTask.name}</CardText>\r\n                        <CardText>Task code: {this.props.selectedTask.id}</CardText>\r\n                        <hr />\r\n                        <CardText>Station: {this.props.selectedStation.name} [{this.props.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.props.selectedPort + 1}</CardText>\r\n                        <hr />\r\n                        <CardText>Tool: {ToolToString(this.props.selectedTask.workConfig.tool)}</CardText>\r\n                        {this.props.selectedTask.workConfig.changeSelectedTemp ?\r\n                            <CardText>\r\n                                Selected temperature: {this.props.selectedTask.workConfig.selectedTemp / 9} ºC\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                        {this.props.selectedTask.workConfig.changeSolderingReference ?\r\n                            <CardText>\r\n                                Soldering reference: {this.props.reference.name.length === 0 ? \"[No name]\" : this.props.reference.name}\r\n                            </CardText> :\r\n                            \"\"\r\n                        }\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        };\r\n\r\n        const getPlotRecordData = () => {\r\n            let portData = this.props.plotData[this.props.plotData.length - 1];\r\n            let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n                portData.toolStatus,\r\n                portData.isCalibrating,\r\n                portData.isSoldering,\r\n                portData.isPortEnabled);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row className=\"pb-2\">\r\n                            <Col xs=\"auto\">\r\n                                Temperature:{' '}\r\n                                <span className=\"temp-value\"> {Math.floor(portData.temperature)} ºC</span>\r\n                            </Col>\r\n                            <Col>\r\n                                Power:{' '}\r\n                                <span className=\"power-value\">{Math.floor(portData.power)} %</span>\r\n                            </Col>\r\n                            <Col className=\"text-right\">\r\n                                <FontAwesomeIcon icon={faCircle} className={circleLight} />\r\n                                <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                    portData.toolStatus,\r\n                                    portData.isCalibrating,\r\n                                    portData.isSoldering,\r\n                                    portData.isPortEnabled\r\n                                )}</strong>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Plot2Axis\r\n                                plotData={this.props.plotData}\r\n                                counterTenthSecond={this.props.counterTenthSecond}\r\n                                interval={this.props.interval}\r\n                            />\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getPlotReference = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <PlotReference\r\n                            soldering={this.props.plotData.map(x => x.power)}\r\n                            reference={this.props.reference.power.map(x => x / 10)}\r\n                        />\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />\r\n        }\r\n\r\n        const layoutWithReference = () => {\r\n            return (\r\n                <React.Fragment>\r\n                    <Row className=\"mb-3\">\r\n                        {getPortStatus()}\r\n                    </Row>\r\n                    <Row className=\"mb-3\">\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getPlotReference()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getDetails()}\r\n                        </Col>\r\n                    </Row>\r\n                </React.Fragment>)\r\n        }\r\n\r\n        const layoutWithOutReference = () => {\r\n            return (\r\n                <React.Fragment>\r\n                    <Row className=\"mb-3\">\r\n                        <Col xs=\"8\" className=\"pl-0\">\r\n                            {getPlotRecordData()}\r\n                        </Col>\r\n                        <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                            {getDetails()}\r\n                        </Col>\r\n                    </Row>\r\n                </React.Fragment>)\r\n        }\r\n\r\n        return (\r\n            this.props.selectedTask.workConfig.changeSolderingReference ?\r\n                layoutWithReference() :\r\n                layoutWithOutReference()\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep3;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Container } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as AssistantStore from '../../../../store/Assistant';\r\nimport * as TaskStore from '../../../../store/Task';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport AssistantService from '../../../../services/assistant.service';\r\nimport StationService from '../../../../services/station.service';\r\nimport TasksService from '../../../../services/tasks.service';\r\nimport WorkService from '../../../../services/work.service';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { EmptyPlotSeriesData, PushPlotSeriesData } from '../../../../utils/plotUtils';\r\nimport WorkProcessStep1 from './WorkProcessStep1';\r\nimport WorkProcessStep2 from './WorkProcessStep2';\r\nimport WorkProcessStep3 from './WorkProcessStep3';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype WorkProcessProps = {\r\n    stationActions: typeof StationStore.actionCreators,\r\n    taskActions: typeof TaskStore.actionCreators\r\n} & TaskStore.TaskState\r\n  & StationStore.StationState\r\n  & typeof StationStore.actionCreators\r\n  & typeof TaskStore.actionCreators\r\n  & RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    selectedTask: TaskStore.Task,\r\n    selectedStationControllerId: string,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    reference: AssistantStore.Reference,\r\n\r\n    queueId: number,\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n    wasSoldering: boolean,\r\n    lastRealTimeData: IRealTimeData,\r\n\r\n    currentStep: number,\r\n    showFinishTaskModal: boolean,\r\n    timer: number,\r\n\r\n    nTotalTasks: number,\r\n    pageNumber: number,\r\n    pageSize: number,\r\n    filter: string,\r\n\r\n    isLoadingStations: boolean,\r\n    isLoadingTasks: boolean\r\n}\r\n\r\nconst MAX_POINTS_PLOT = 400;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 100;\r\n\r\nclass WorkProcess extends React.PureComponent<WorkProcessProps, IState> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n\r\n        let plotData = EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n        this.state = {\r\n            selectedTask: {\r\n                id: 0,\r\n                name: \"\",\r\n                workConfig: {\r\n                    tool: 0,\r\n                    selectedTemp: 0,\r\n                    changeSelectedTemp: false,\r\n                    solderingReferenceId: -1,\r\n                    changeSolderingReference: false,\r\n                    qualityControl: false\r\n                },\r\n                timesPerformed: 0\r\n            },\r\n            selectedStationControllerId: \"\",\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                software: \"\",\r\n                hardware: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            reference: {\r\n                id: -1,\r\n                name: \"\",\r\n                power: [],\r\n                cartridge: \"\",\r\n                temperature: 0,\r\n                durationTenthsSeconds: 0\r\n            },\r\n\r\n            queueId: -1,\r\n            plotData: plotData,\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n            wasSoldering: false,\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n\r\n            currentStep: 1,\r\n            showFinishTaskModal: false,\r\n            timer: -1,\r\n\r\n            nTotalTasks: 0,\r\n            pageNumber: 1,\r\n            pageSize: 25,\r\n            filter: \"\",\r\n\r\n            isLoadingStations: true,\r\n            isLoadingTasks: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            let plotData = this.state.plotData;\r\n                            let counterTenthSecond = this.state.counterTenthSecond;\r\n                            let wasSoldering = this.state.wasSoldering;\r\n                            let lastRealTimeData = this.state.lastRealTimeData;\r\n\r\n                            values.forEach(x => {\r\n                                if (this.state.selectedTask.workConfig.changeSolderingReference) {\r\n                                    // raise flag\r\n                                    if (x.isSoldering && !wasSoldering) {\r\n                                        plotData = [];\r\n                                        wasSoldering = true;\r\n                                    }\r\n\r\n                                    // down flag\r\n                                    if (!x.isSoldering && wasSoldering) {\r\n                                        wasSoldering = false;\r\n                                    }\r\n\r\n                                    // soldering\r\n                                    if (x.isSoldering) {\r\n                                        PushPlotSeriesData(plotData, x, -1);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    PushPlotSeriesData(plotData, x, MAX_POINTS_PLOT);\r\n                                }\r\n\r\n                                lastRealTimeData = x;\r\n                                counterTenthSecond++;\r\n                            });\r\n\r\n                            this.setState({\r\n                                plotData: plotData,\r\n                                readyGetMoreData: true,\r\n                                counterTenthSecond: counterTenthSecond,\r\n                                wasSoldering: wasSoldering,\r\n                                lastRealTimeData: lastRealTimeData\r\n                            })\r\n                        }\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: WorkProcessProps) {\r\n        props.stationActions.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoadingStations: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                if (Array.isArray(scs)) {\r\n                    scs.forEach((sc: StationStore.StationController) => {\r\n                        props.stationActions.createStationController(sc);\r\n\r\n                        sc.stations.forEach((s: StationStore.Station) =>\r\n                            props.stationActions.createStation(s, sc.id)\r\n                        )\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    isLoadingStations: false\r\n                })\r\n            });\r\n    }\r\n\r\n    searchTasks(props: WorkProcessProps, filter: string, pageNumber: number) {\r\n        props.taskActions.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoadingTasks: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                if (Array.isArray(tasks)) {\r\n                    tasks.forEach((x: TaskStore.Task) =>\r\n                        props.taskActions.createTask(x)\r\n                    )\r\n                }\r\n\r\n                this.setState({\r\n                    isLoadingTasks: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const getPreviousButton = () => {\r\n            if (this.state.currentStep === 2) {\r\n                return (\r\n                    <Button\r\n                        outline\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={() => previous()}\r\n                    >Previous</Button>\r\n                )\r\n            }\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            let text = \"\";\r\n            let isValid = false;\r\n\r\n            if (this.state.currentStep === 2) {\r\n                text = \"Start task\";\r\n                isValid = this.state.selectedStation.id !== \"\";\r\n            }\r\n            else if (this.state.currentStep === 3) {\r\n                text = \"Stop task\";\r\n                isValid = true;\r\n            }\r\n\r\n            if (!isValid) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={() => next()}\r\n                >{text}</Button>\r\n            )\r\n        }\r\n\r\n        const previous = () => {\r\n            this.setState({\r\n                currentStep: this.state.currentStep - 1\r\n            })\r\n        }\r\n\r\n        const next = () => {\r\n            if (this.state.currentStep === 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep === 2) {\r\n                let plotData = this.state.selectedTask.workConfig.changeSolderingReference ?\r\n                    [] : EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n                this.setState({\r\n                    plotData: plotData,\r\n                    counterTenthSecond: 0\r\n                })\r\n\r\n                WorkService\r\n                    .startTrace(this.state.selectedTask.id, this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then(() =>\r\n                        this.setState({\r\n                            currentStep: 3\r\n                        })\r\n                    );\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n\r\n                AssistantService\r\n                    .getReferenceById(this.state.selectedTask.workConfig.solderingReferenceId)\r\n                    .then(value => {\r\n                        this.setState({\r\n                            reference: value\r\n                        })\r\n                    });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    showFinishTaskModal: true\r\n                })\r\n            }\r\n        }\r\n\r\n        const handleTaskClick = (task: TaskStore.Task) => {\r\n            this.setState({\r\n                selectedTask: task,\r\n                currentStep: 2\r\n            })\r\n        }\r\n\r\n        const handleStationClick = (stationControllerId: string, station: StationStore.Station, port: number) => {\r\n            this.setState({\r\n                selectedStationControllerId: stationControllerId,\r\n                selectedStation: station,\r\n                selectedPort: port\r\n            })\r\n        }\r\n\r\n        const handleFinishTaskConfirmClick = () => {\r\n            WorkService\r\n                .stopTrace(this.state.selectedStationControllerId, this.state.selectedStation.id, this.state.selectedPort);\r\n\r\n            var queueId = this.state.queueId;\r\n\r\n            this.setState({\r\n                queueId: -1,\r\n                currentStep: 2,\r\n                showFinishTaskModal: false\r\n            });\r\n\r\n            WorkService\r\n                .stopRealTimeData(this.state.selectedStationControllerId, this.state.selectedStation.id, queueId);\r\n        };\r\n\r\n        const handleFinishTaskCancelClick = () => {\r\n            this.setState({\r\n                showFinishTaskModal: false\r\n            });\r\n        };\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks, WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Work process</h1>\r\n                </Row>\r\n\r\n                {this.state.currentStep === 1 ?\r\n                    <WorkProcessStep1\r\n                        isLoading={this.state.isLoadingTasks}\r\n                        tasks={this.props.tasks}\r\n                        nTotalTasks={this.state.nTotalTasks}\r\n                        pageSize={this.state.pageSize}\r\n                        pageNumber={this.state.pageNumber}\r\n\r\n                        handlePageClick={handlePageClick}\r\n                        handlePreviousPageClick={handlePreviousPageClick}\r\n                        handleNextPageClick={handleNextPageClick}\r\n                        handleTaskClick={handleTaskClick}\r\n                        handleSearchFieldChange={handleSearchFieldChange}\r\n                    /> : \"\"\r\n                }\r\n\r\n                {this.state.currentStep === 2 ?\r\n                    <WorkProcessStep2\r\n                        isLoading={this.state.isLoadingStations}\r\n                        stationControllers={this.props.stationControllers}\r\n                        taskTool={this.state.selectedTask.workConfig.tool}\r\n                        handleStationClick={handleStationClick}\r\n                    /> : \"\"\r\n                }\r\n\r\n                {this.state.currentStep === 3 ?\r\n                    <WorkProcessStep3\r\n                        selectedTask={this.state.selectedTask}\r\n                        selectedStation={this.state.selectedStation}\r\n                        selectedPort={this.state.selectedPort}\r\n                        reference={this.state.reference}\r\n\r\n                        queueId={this.state.queueId}\r\n                        plotData={this.state.plotData}\r\n                        lastRealTimeData={this.state.lastRealTimeData}\r\n                        counterTenthSecond={this.state.counterTenthSecond}\r\n                        interval={MAX_POINTS_PLOT / 5}\r\n                    /> : \"\"\r\n                }\r\n\r\n                <Row>\r\n                    {getPreviousButton()}\r\n                    {getNextButton()}\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showFinishTaskModal} toggle={() => handleFinishTaskCancelClick()}>\r\n                    <ModalHeader toggle={() => handleFinishTaskCancelClick()}>Finish task</ModalHeader>\r\n                    <ModalBody>Are you sure to finish the task?</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"primary\" onClick={() => handleFinishTaskConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"primary\" onClick={() => handleFinishTaskCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers,\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        stationActions: bindActionCreators(StationStore.actionCreators, dispatch),\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WorkProcess);\r\n","import WorkProcess from './WorkProcess';\r\n\r\nexport default WorkProcess;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../../store/Station';\r\n\r\ntype StationsManagerProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    isLoading: boolean,\r\n    handleSetTraceabilityModeClick: (stationControllerId: string, newState: boolean) => void\r\n}\r\n\r\nclass StationsManagerView extends React.PureComponent<StationsManagerProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"primary\" />\r\n                    </div>);\r\n            }\r\n\r\n            let count = this.props.stationControllers.length;\r\n            if (count === 0) {\r\n                count = this.props.stationControllers.reduce(((total, x) =>\r\n                    total + x.stations.length\r\n                ), 0);\r\n            }\r\n\r\n            if (count === 0) {\r\n                return \"No stations controllers / stations  connected.\";\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => {\r\n                        let items = [];\r\n                        items.push(\r\n                            <tr className=\"level-1\">\r\n                                <td className=\"text-left\"><strong>{sc.name}</strong></td>\r\n                                <td></td>\r\n                                <td>\r\n                                    <Button\r\n                                        outline\r\n                                        color={(sc.isQSTMode ? \"primary\" : \"secondary\")}\r\n                                        size=\"sm\"\r\n                                        className=\"pt-0 pb-0\"\r\n                                        onClick={() => this.props.handleSetTraceabilityModeClick(sc.id, !sc.isQSTMode)}\r\n                                    >\r\n                                        {sc.isQSTMode ? \"Enabled\" : \"Disabled\"}\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                        items.push(\r\n                            sc.stations.map(s => (\r\n                                <tr className=\"level-2\">\r\n                                    <td className=\"pl-3 text-left\">{s.name.length === 0 ? \"[No name]\" : s.name}</td>\r\n                                    <td>{s.model}</td>\r\n                                    <td>\r\n                                        <span className={(sc.isQSTMode && s.isQSTMode) ? \"highlight-color\" : \"\"}>{\r\n                                            sc.isQSTMode ?\r\n                                                (s.isQSTMode ? \"QST enabled\" : \"QST disabled\") :\r\n                                                \"--\"\r\n                                        }</span>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        )\r\n                        return items;\r\n                    })\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm station-list\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station Controller / Station</th>\r\n                            <th scope=\"col\">Station model</th>\r\n                            <th scope=\"col\">QST state</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        const getListOptionsStationControllersCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardText>\r\n                            {getListOptionsStationControllers()}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Stations Manager</h1>\r\n                </Row>\r\n                <Row>\r\n                    {getListOptionsStationControllersCard()}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsManagerView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../../store';\r\nimport * as StationStore from '../../../../store/Station';\r\nimport StationService from '../../../../services/station.service';\r\nimport StationsManagerView from './StationsManagerView';\r\n\r\ntype StationsManagerProps =\r\n    StationStore.StationState &\r\n    typeof StationStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean\r\n}\r\n\r\nclass StationsManager extends React.PureComponent<StationsManagerProps, IState> {\r\n    constructor(props: StationsManagerProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n    }\r\n\r\n    searchStations(props: StationsManagerProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                if (Array.isArray(scs)) {\r\n                    scs.forEach((sc: StationStore.StationController) => {\r\n                        props.createStationController(sc);\r\n\r\n                        sc.stations.forEach((s: StationStore.Station) =>\r\n                            props.createStation(s, sc.id)\r\n                        )\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleSetTraceabilityModeClick = (stationControllerId: string, newState: boolean) => {\r\n            StationService\r\n                .setTraceabilityMode(stationControllerId, newState)\r\n                .then(x => {\r\n                    this.searchStations(this.props);\r\n                });\r\n        }\r\n\r\n        return (\r\n            <StationsManagerView\r\n                stationControllers={this.props.stationControllers}\r\n                isLoading={this.state.isLoading}\r\n                handleSetTraceabilityModeClick={handleSetTraceabilityModeClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(StationsManager);\r\n","import Home from './components/content-pages/Home';\r\nimport Maintenance from './components/content-pages/maintenance/Maintenance';\r\nimport StationsUpdate from './components/content-pages/maintenance/StationsUpdate';\r\nimport Processes from './components/content-pages/processes/Processes';\r\nimport ProcessOptimization from './components/content-pages/processes/ProcessOptimization';\r\nimport SolderingsReference from './components/content-pages/processes/SolderingsReference';\r\nimport SolderingReferenceNew from './components/content-pages/processes/SolderingReferenceNew';\r\nimport Traceability from './components/content-pages/traceability/Traceability';\r\nimport Tasks from './components/content-pages/traceability/Tasks';\r\nimport TaskNew from './components/content-pages/traceability/TaskNew';\r\nimport TaskEdit from './components/content-pages/traceability/TaskEdit';\r\nimport TaskDetail from './components/content-pages/traceability/TaskDetail';\r\nimport TaskHistoryDetail from './components/content-pages/traceability/TaskHistoryDetail';\r\nimport WorkProcess from './components/content-pages/traceability/WorkProcess';\r\nimport StationsManager from './components/content-pages/traceability/StationsManager';\r\n\r\nexport default [\r\n  { path: \"/\", name: \"Home\", Component: Home },\r\n  { path: \"/maintenance\", name: \"Maintenance\", Component: Maintenance },\r\n  { path: \"/maintenance/stationsupdate\", name: \"Stations update\", Component: StationsUpdate },\r\n  { path: \"/processes\", name: \"Processes\", Component: Processes },\r\n  { path: \"/processes/optimization\", name: \"Process optimization\", Component: ProcessOptimization },\r\n  { path: \"/processes/solderingreference\", name: \"Solderings reference\", Component: SolderingsReference },\r\n  { path: \"/processes/solderingreference/new\", name: \"New\", Component: SolderingReferenceNew },\r\n  { path: \"/qst\", name: \"QST\", Component: Traceability },\r\n  { path: \"/qst/task\", name: \"Tasks\", Component: Tasks },\r\n  { path: \"/qst/task/new\", name: \"New\", Component: TaskNew },\r\n  { path: \"/qst/task/:id/detail\", name: \"Details\", Component: TaskDetail },\r\n  { path: \"/qst/task/:id/edit\", name: \"Edit\", Component: TaskEdit },\r\n  { path: \"/qst/task/:taskId/history/:historyId\", name: \"History\", Component: TaskHistoryDetail },\r\n  { path: \"/qst/workprocess\", name: \"Work process\", Component: WorkProcess },\r\n  { path: \"/qst/stationsmanager\", name: \"Stations manager\", Component: StationsManager }\r\n];\r\n","import * as React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Breadcrumbs from './components/content-components/Breadcrumbs';\r\nimport Layout from './components/Layout';\r\nimport routes from \"./routes\";\r\n\r\nimport './scss/main.scss'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Switch>\r\n            {routes.map(({ path, name, Component }, key) => (\r\n                <Route\r\n                    exact\r\n                    path={path}\r\n                    key={key}\r\n                    render={props => {\r\n                        const crumbs = routes\r\n                            .filter(({ path }) => props.match.path.includes(path))\r\n                            .map(({ path, ...rest }) => ({\r\n                                path: Object.keys(props.match.params).length\r\n                                    ? Object.keys(props.match.params).reduce(\r\n                                        (path, param) =>\r\n                                            path.replace(`:${param}`, props.match.params[param]),\r\n                                        path\r\n                                    )\r\n                                    : path,\r\n                                ...rest\r\n                            }));\r\n\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Breadcrumbs crumbs={crumbs} />\r\n                                <div id=\"content-wrap\">\r\n                                    <Route exact path={path} key={key} component={Component} />\r\n                                </div>\r\n                            </React.Fragment>\r\n                        );\r\n                    }}\r\n                />\r\n            ))}\r\n        </Switch>\r\n    </Layout>\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}