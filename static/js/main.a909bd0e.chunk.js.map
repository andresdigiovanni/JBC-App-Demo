{"version":3,"sources":["store/Task.ts","store/TaskHistory.ts","store/Station.ts","store/index.ts","store/Assistant.ts","components/content-components/Breadcrumbs/index.js","components/content-components/Breadcrumbs/Breadcrumbs.tsx","components/content-components/Footer/index.js","components/content-components/Footer/Footer.tsx","components/content-components/NavMenu/index.js","components/content-components/NavMenu/NavMenu.tsx","components/Layout.tsx","components/content-pages/Home/index.js","components/content-pages/Home/Home.tsx","components/content-pages/Processes/index.js","components/content-pages/Processes/Processes.tsx","configuration.js","utils/timeUtils.js","services/fake.service.ts","services/restService.js","services/assistant.service.js","services/processOptimization.service.js","services/station.service.js","services/work.service.js","utils/numberUtils.js","components/content-pages/ProcessOptimization/ProcessOptimizationStep1.tsx","utils/toolUtils.js","components/content-parts/StationsPortList/index.js","components/content-parts/StationsPortList/StationsPortList.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep2.tsx","utils/cartridgeData/T470.js","utils/cartridgeData/T245.js","utils/cartridgeData/T210.js","utils/cartridgeData/PA120.js","utils/cartridgeData/NT105.js","utils/cartridgeData/NP105.js","utils/cartridgeData/HT420.js","utils/cartridgeData/DS360.js","utils/cartridgeData/DR560.js","utils/cartridgeData/AP250.js","utils/cartridgeUtils.tsx","components/content-parts/Plot2AxisSimple/Plot2AxisSimple.tsx","components/content-parts/Plot2AxisSimple/index.js","utils/portUtils.js","components/content-parts/PortStatusCard/index.js","components/content-parts/PortStatusCard/PortStatusCard.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep3.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep4.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationStep5.tsx","components/content-pages/ProcessOptimization/ProcessOptimizationView.tsx","components/content-pages/ProcessOptimization/ProcessOptimization.tsx","components/content-pages/ProcessOptimization/index.js","components/content-components/PaginationNav/index.js","components/content-components/PaginationNav/PaginationNav.tsx","components/content-parts/PlotPowerAxisSimple/PlotPowerAxisSimple.tsx","components/content-parts/PlotPowerAxisSimple/index.js","components/content-pages/SolderingAssistant/SolderingAssistantView.tsx","components/content-pages/SolderingAssistant/SolderingAssistant.tsx","components/content-pages/SolderingAssistant/index.js","components/content-pages/SolderingAssistantNew/SolderingAssistantNewStep1.tsx","components/content-parts/Plot2Axis/Plot2Axis.tsx","components/content-parts/Plot2Axis/index.js","components/content-pages/SolderingAssistantNew/SolderingAssistantNewStep2.tsx","components/content-pages/SolderingAssistantNew/SolderingAssistantNewView.tsx","components/content-pages/SolderingAssistantNew/SolderingAssistantNew.tsx","components/content-pages/SolderingAssistantNew/index.js","components/content-pages/Traceability/index.js","components/content-pages/Traceability/Traceability.tsx","services/tasks.service.js","components/content-pages/Tasks/TasksView.tsx","components/content-pages/Tasks/Tasks.tsx","components/content-pages/Tasks/index.js","components/content-pages/TaskNew/TaskNewView.tsx","components/content-pages/TaskNew/TaskNew.tsx","components/content-pages/TaskNew/index.js","components/content-pages/TaskEdit/TaskEditView.tsx","components/content-pages/TaskEdit/TaskEdit.tsx","components/content-pages/TaskEdit/index.js","services/taskHistories.service.js","components/content-pages/TaskDetail/TaskDetailView.tsx","components/content-pages/TaskDetail/TaskDetail.tsx","components/content-pages/TaskDetail/index.js","utils/plotUtils.js","components/content-pages/TaskHistoryDetail/TaskHistoryDetailView.tsx","utils/solderingClassificationUtils.js","components/content-pages/TaskHistoryDetail/TaskHistoryDetail.tsx","components/content-pages/TaskHistoryDetail/index.js","components/content-parts/StationListSide/StationListSideView.tsx","components/content-parts/StationListSide/StationListSide.tsx","components/content-parts/StationListSide/index.js","components/content-pages/WorkProcess/WorkProcessStep1.tsx","components/content-pages/WorkProcess/WorkProcessStep2.tsx","components/content-pages/WorkProcess/WorkProcessStep3.tsx","components/content-pages/WorkProcess/WorkProcess.tsx","components/content-pages/WorkProcess/index.js","components/content-pages/Workbenchs/WorkbenchsView.tsx","components/content-pages/Workbenchs/Workbenchs.tsx","routes.js","App.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts"],"names":["actionCreators","createTask","task","type","result","deleteTask","id","deleteAllTasks","setTotalTasks","number","createTaskHistory","taskHistory","deleteTaskHistory","deleteAllTaskHistories","createStationController","sc","deleteStationController","deleteAllStationControllers","createStation","station","scId","deleteStation","reducers","assistant","state","incomingAction","undefined","references","nTotalReferences","action","find","x","concat","filter","tasks","nTotalTasks","taskHistories","stationControllers","stations","map","push","Breadcrumbs","this","props","crumbs","length","className","Container","Breadcrumb","key","name","path","BreadcrumbItem","active","NavLink","tag","Link","to","React","PureComponent","Footer","year","Date","getFullYear","NavMenu","isOpen","toggle","setState","Navbar","light","NavbarBrand","src","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","children","Home","Row","xs","sm","md","Col","Card","CardBody","CardText","CardTitle","Processes","Configuration","FakeMode","sleep","ms","Promise","resolve","setTimeout","FakeService","console","log","energy","similarity","tenthsOfSecondSoldering","_getReferences","nReferences","referenceName","i","components","Math","floor","random","reference","power","cartridge","temperature","durationTenthsSeconds","_getTasks","nTasks","taskId","taskName","tool","selectedTemp","workConfig","changeSelectedTemp","timesPerformed","_getTaskHistories","historyId","finishDate","now","selected_temp","change_selected_temp","workData","stationId","stationName","stationPort","Array","from","workSolderings","solderingType","d","seconds","getSeconds","isPortEnabled","toolStatus","isCalibrating","isSoldering","data","reduce","total","time","points","recommended","performance","durability","scs","iSc","url","isQSTMode","round","iSt","model","ports","nPorts","pow","p","port","RestService","doGetRequest","ENDPOINT_ASSISTANT","pageNumber","pageSize","doDeleteRequest","doPostRequest","ENDPOINT_WORK","doPutRequest","ENDPOINT_WORK_HISTORY","ENDPOINT_TRACE","ENDPOINT_REAL_TIME","queueId","solderings","ENDPOINT_PROCESS_OPTIMIZATION","ENDPOINT_STATIONS","scUrl","newState","resource","axios","get","success","error","method","delete","AssistantService","getSolderingResult","count","countReferences","getReferences","deleteReference","generateReferenceSoldering","ProcessOptimizationService","betterSoldering","getBetterOptimizationByCartridge","getBetterOptimizationByTemperature","StationsService","getStations","setSelectedTemperature","setTraceabilityMode","WorkService","startTrace","stopTrace","startRealTimeData","stopRealTimeData","getRealTimeData","TryParseInt","str","defaultValue","retValue","isNaN","parseInt","ProcessOptimizationStep1","currentStep","Jumbotron","Button","outline","color","size","handleNextClick","ToolToString","1","2","3","4","5","6","7","8","9","31","32","33","34","ToolImagePath","toLowerCase","StationsPortList","isLoading","Spinner","options","s","handleStationClick","scope","getListOptionsStationControllers","ProcessOptimizationStep2","Alert","filtered","Input","selectedTemperature","onChange","e","handleSelecTempChange","target","value","isFormCorrect","LoadCartridges","cartridges","MapCatridges","T470data","T245data","T210data","PA120data","NT105data","NP105data","HT420data","DS360data","DR560data","AP250data","cartridgeRoot","_","family","F","def","Default","Cartridge_list","forEach","item","GetToolIdByFamily","fullName","N","isDefault","img","CartridgeImagePath","CartridgeImagePathByFullName","Plot2AxisSimple","width","aspect","plotData","margin","left","dataKey","height","yAxisId","orientation","tick","domain","stroke","dot","defaultProps","showLabels","GetPortStatus2String","GetPortStatus2Lights","PortStatusCard","circleLight","portData","icon","faCircle","ProcessOptimizationStep3","cartridgeImagePath","defaultCartridge","selectedTool","handleCartridgeChange","alerts","getAlerts","lastRealTimeData","stationDetail","selectedStation","selectedPort","card","getDetailsCard","selected","registeredPlots","detectedSolderings","solderingResult","handleDeleteRealTimeData","date","faTrashAlt","counterTenthSecond","interval","getRegisteredPlotsCard","ProcessOptimizationStep4","cardBody","fasterSoldering","getConfigurationCard","ProcessOptimizationStep5","optimizedSoldering","padding","label","tickFormatter","ticks","x1","x2","y1","y2","fill","getOptimizedSolderingPlotCard","selectedCartridge","ProcessOptimizationView","ProcessOptimization","timerSelectedTemp","registeredData","readyGetMoreData","wasSoldering","detectedSolderingsToRemove","searchStations","setInterval","applyDetectedSolderingsToRemove","then","values","isArray","nDataSoldering","min","soldering","toString","splice","StationService","some","r","setSelectedTemperatureRequest","window","clearTimeout","nValue","connect","StationStore","PaginationNav","totalPages","ceil","totalElements","items","PaginationItem","PaginationLink","first","disabled","handlePageClick","previous","handlePreviousPageClick","zero","index","next","handleNextPageClick","last","getItems","Pagination","PlotPowerAxisSimple","plotDataObj","SolderingAssistantView","showDeleteModal","referenceIdToDelete","handleDeleteClick","event","preventDefault","handleDeleteCancelClick","faFile","href","getListReferences","Modal","ModalHeader","ModalBody","ModalFooter","SolderingAssistant","searchReferences","deleteAllReferences","createReference","max","setTotalReferences","SolderingAssistantNewStep1","handleNameChange","Plot2Axis","sec_num","hours","minutes","SecToString","SolderingAssistantNewStep2","detectedSoldering","registeredPlot","saveButton","handleSaveReferenceClick","getLastSoldering","selectedName","SolderingAssistantNewView","SolderingAssistantNew","history","Traceability","TasksService","countTasks","getTasks","getTaskById","updateTask","TasksView","InputGroup","InputGroupAddon","addonType","handleSearchFieldChange","faEye","faPen","getListOptionsTasks","Tasks","timer","searchTasks","bind","TaskStore","TaskNewView","toolImagePath","handleToolChange","newTask","newToolImagePath","form","tools","Object","entries","getListTools","CustomInput","handleModifySelecTempChange","checked","pattern","CardImg","TaskNew","redirect","TaskEditView","defaultChecked","TaskEdit","match","params","searchTask","TaskHistoriessService","countTaskHistories","getTaskHistories","getTaskHistoryById","TaskDetailView","isLoadingTask","COLORS","total2","entry","nTotalTaskHistories","isLoadingHistories","toLocaleDateString","getListHistoryTasks","TaskDetail","searchTaskHistories","taskActions","taskHistoryActions","TaskHistoriesService","dispatch","bindActionCreators","TaskHistoryStore","EmptyPlotSeriesData","maxPLotPoints","TaskHistoryDetailView","correct","registeredSolderings","0","ClassificationToString","getSolderingsCard","GetPlotSeriesData","getRegisteredDataCard","TaskHistoryDetail","taskHistoryId","StationListSideView","ListGroupItem","ListGroup","StationListSide","WorkProcessStep1","taskFilter","isLoadingTasks","handleTaskClick","WorkProcessStep2","taskTool","WorkProcessStep3","WorkProcess","selectedTask","showFinishTaskModal","realTimeData","PushPlotSeriesData","getDetails","taskDetail","getConfiguration","handleFinishTaskCancelClick","MAX_POINTS_PLOT","alert","getMetadata","getPreviousButton","text","isValid","getNextButton","handleFinishTaskConfirmClick","WorkbenchsView","handleSetTraceabilityModeClick","Workbenchs","Component","Layout","routes","exact","render","includes","rest","keys","param","replace","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","baseUrl","document","getElementsByTagName","getAttribute","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a909bd0e.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\n\r\nexport interface TaskConfig\r\n{\r\n    tool: number,\r\n    selectedTemp: number,\r\n    changeSelectedTemp: boolean\r\n}\r\n\r\nexport interface Task\r\n{\r\n    id: number,\r\n    name: string,\r\n    workConfig: TaskConfig,\r\n    timesPerformed: number\r\n}\r\n\r\nexport interface TaskState {\r\n    tasks: Task[],\r\n    nTotalTasks: number\r\n}\r\n\r\nexport interface CreateTaskAction { type: 'CREATE_TASK', result: Task }\r\nexport interface DeleteTaskAction { type: 'DELETE_TASK', result: number }\r\nexport interface DeleteAllTasksAction { type: 'DELETE_ALL_TASKS' }\r\n\r\nexport interface SetTotalTasksAction { type: 'SET_TOTAL_TASKS', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskAction\r\n    | DeleteTaskAction\r\n    | DeleteAllTasksAction\r\n    | SetTotalTasksAction;\r\n\r\nexport const actionCreators = {\r\n    createTask: (task: Task) => ({ type: 'CREATE_TASK', result: task } as CreateTaskAction),\r\n    deleteTask: (id: number) => ({ type: 'DELETE_TASK', result: id } as DeleteTaskAction),\r\n    deleteAllTasks: () => ({ type: 'DELETE_ALL_TASKS' } as DeleteAllTasksAction),\r\n    setTotalTasks: (number: number) => ({ type: 'SET_TOTAL_TASKS', result: number } as SetTotalTasksAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskState> = (\r\n    state: TaskState | undefined,\r\n    incomingAction: Action\r\n): TaskState => {\r\n    if (state === undefined) {\r\n        return {\r\n            tasks: [],\r\n            nTotalTasks: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK':\r\n            if (state.tasks.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK':\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASKS':\r\n            return {\r\n                ...state,\r\n                tasks: []\r\n            };\r\n\r\n        case 'SET_TOTAL_TASKS':\r\n            return {\r\n                ...state,\r\n                nTotalTasks: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface TaskConfig\r\n{\r\n    tool: number,\r\n    selected_temp: number,\r\n    change_selected_temp: boolean\r\n}\r\n\r\nexport interface WorkSolderings\r\n{\r\n    power: number[],\r\n    solderingType: number\r\n}\r\n\r\nexport interface TaskData\r\n{\r\n    stationId: string,\r\n    stationName: string,\r\n    stationPort: number,\r\n    temperature: number[],\r\n    power: number[],\r\n    workSolderings: WorkSolderings[]\r\n}\r\n\r\nexport interface TaskHistory\r\n{\r\n    id: number,\r\n    finishDate: Date,\r\n    workConfig: TaskConfig\r\n    workData: TaskData\r\n}\r\n\r\nexport interface TaskHistoryState {\r\n    taskHistories: TaskHistory[]\r\n}\r\n\r\nexport interface CreateTaskHistoryAction { type: 'CREATE_TASK_HISTORY', result: TaskHistory }\r\nexport interface DeleteTaskHistoryAction { type: 'DELETE_TASK_HISTORY', result: number }\r\nexport interface DeleteAllTaskHistoriesAction { type: 'DELETE_ALL_TASK_HISTORIES' }\r\n\r\nexport type KnownAction =\r\n    | CreateTaskHistoryAction\r\n    | DeleteTaskHistoryAction\r\n    | DeleteAllTaskHistoriesAction;\r\n\r\nexport const actionCreators = {\r\n    createTaskHistory: (taskHistory: TaskHistory) => ({ type: 'CREATE_TASK_HISTORY', result: taskHistory } as CreateTaskHistoryAction),\r\n    deleteTaskHistory: (id: number) => ({ type: 'DELETE_TASK_HISTORY', result: id } as DeleteTaskHistoryAction),\r\n    deleteAllTaskHistories: () => ({ type: 'DELETE_ALL_TASK_HISTORIES' } as DeleteAllTaskHistoriesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<TaskHistoryState> = (\r\n    state: TaskHistoryState | undefined,\r\n    incomingAction: Action\r\n): TaskHistoryState => {\r\n    if (state === undefined) {\r\n        return { taskHistories: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_TASK_HISTORY':\r\n            if (state.taskHistories.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_TASK_HISTORY':\r\n            return {\r\n                ...state,\r\n                taskHistories: state.taskHistories\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_TASK_HISTORIES':\r\n            return {\r\n                ...state,\r\n                taskHistories: []\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Port\r\n{\r\n    id: number,\r\n    tool: number\r\n}\r\n\r\nexport interface Station\r\n{\r\n    id: string,\r\n    name: string,\r\n    model: string,\r\n    isQSTMode: boolean,\r\n    ports: Port[]\r\n}\r\n\r\nexport interface StationController\r\n{\r\n    id: string,\r\n    url: string,\r\n    name: string,\r\n    isQSTMode: boolean,\r\n    stations: Station[]\r\n}\r\n\r\nexport interface StationState {\r\n    stationControllers: StationController[]\r\n}\r\n\r\nexport interface CreateStationControllerAction { type: 'CREATE_STATION_CONTROLLER', sc: StationController }\r\nexport interface DeleteStationControllerAction { type: 'DELETE_STATION_CONTROLLER', id: string }\r\nexport interface DeleteAllStationControllersAction { type: 'DELETE_ALL_STATION_CONTROLLERS' }\r\nexport interface CreateStationAction { type: 'CREATE_STATION', station: Station, scId: string }\r\nexport interface DeleteStationAction { type: 'DELETE_STATION', id: string }\r\n\r\nexport type KnownAction =\r\n    | CreateStationControllerAction\r\n    | DeleteStationControllerAction\r\n    | DeleteAllStationControllersAction\r\n    | CreateStationAction\r\n    | DeleteStationAction;\r\n\r\nexport const actionCreators = {\r\n    createStationController: (sc: StationController) => ({ type: 'CREATE_STATION_CONTROLLER', sc: sc } as CreateStationControllerAction),\r\n    deleteStationController: (id: string) => ({ type: 'DELETE_STATION_CONTROLLER', id: id } as DeleteStationControllerAction),\r\n    deleteAllStationControllers: () => ({ type: 'DELETE_ALL_STATION_CONTROLLERS' } as DeleteAllStationControllersAction),\r\n    createStation: (station: Station, scId: string) => ({ type: 'CREATE_STATION', station: station, scId: scId } as CreateStationAction),\r\n    deleteStation: (id: string) => ({ type: 'DELETE_STATION', id: id } as DeleteStationAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<StationState> = (\r\n    state: StationState | undefined,\r\n    incomingAction: Action\r\n): StationState => {\r\n    if (state === undefined) {\r\n        return { stationControllers: [] };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_STATION_CONTROLLER':\r\n            if (state.stationControllers.find(x => x.id === action.sc.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.concat(action.sc)\r\n            };\r\n\r\n        case 'DELETE_STATION_CONTROLLER':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers\r\n                    .filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_STATION_CONTROLLERS':\r\n            return {\r\n                ...state,\r\n                stationControllers: []\r\n            };\r\n\r\n        case 'CREATE_STATION':\r\n            let sc = state.stationControllers.find(x => x.id === action.scId);\r\n            if (sc === undefined) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            if (sc.stations.find(x => x.id === action.station.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.map(x => {\r\n                    if (x.id === action.scId) {\r\n                        x.stations.push(action.station);\r\n                    }\r\n                    return x;\r\n                })\r\n            };\r\n\r\n        case 'DELETE_STATION':\r\n            return {\r\n                ...state,\r\n                stationControllers: state.stationControllers.filter(sc => {\r\n                    return sc.stations.filter(x => {\r\n                        if (x.id !== action.id) {\r\n                            return x;\r\n                        }\r\n                    })\r\n                })\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as Assistant from './Assistant';\r\nimport * as Task from './Task';\r\nimport * as TaskHistory from './TaskHistory';\r\nimport * as Station from './Station';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    assistant: Assistant.AssistantState;\r\n    task: Task.TaskState;\r\n    taskHistory: TaskHistory.TaskHistoryState;\r\n    station: Station.StationState;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    assistant: Assistant.reducer,\r\n    task: Task.reducer,\r\n    taskHistory: TaskHistory.reducer,\r\n    station: Station.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\nexport interface Reference\r\n{\r\n    id: number,\r\n    name: string,\r\n    power: number[],\r\n    cartridge: string,\r\n    temperature: number,\r\n    durationTenthsSeconds: number\r\n}\r\n\r\nexport interface AssistantState {\r\n    references: Reference[],\r\n    nTotalReferences: number\r\n}\r\n\r\nexport interface CreateReferenceAction { type: 'CREATE_REFERENCE', result: Reference }\r\nexport interface DeleteReferenceAction { type: 'DELETE_REFERENCE', result: number }\r\nexport interface DeleteAllReferencesAction { type: 'DELETE_ALL_REFERENCES' }\r\n\r\nexport interface SetTotalReferencesAction { type: 'SET_TOTAL_REFERENCES', result: number }\r\n\r\nexport type KnownAction =\r\n    | CreateReferenceAction\r\n    | DeleteReferenceAction\r\n    | DeleteAllReferencesAction\r\n    | SetTotalReferencesAction;\r\n\r\nexport const actionCreators = {\r\n    createReference: (reference: Reference) => ({ type: 'CREATE_REFERENCE', result: reference } as CreateReferenceAction),\r\n    deleteReference: (id: number) => ({ type: 'DELETE_REFERENCE', result: id } as DeleteReferenceAction),\r\n    deleteAllReferences: () => ({ type: 'DELETE_ALL_REFERENCES' } as DeleteAllReferencesAction),\r\n    setTotalReferences: (number: number) => ({ type: 'SET_TOTAL_REFERENCES', result: number } as SetTotalReferencesAction)\r\n};\r\n\r\n\r\nexport const reducer: Reducer<AssistantState> = (\r\n    state: AssistantState | undefined,\r\n    incomingAction: Action\r\n): AssistantState => {\r\n    if (state === undefined) {\r\n        return {\r\n            references: [],\r\n            nTotalReferences: 0\r\n        };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'CREATE_REFERENCE':\r\n            if (state.references.find(x => x.id === action.result.id)) {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                references: state.references.concat(action.result)\r\n            };\r\n\r\n        case 'DELETE_REFERENCE':\r\n            return {\r\n                ...state,\r\n                references: state.references\r\n                    .filter(x => {\r\n                        if (x.id !== action.result) {\r\n                            return x;\r\n                        }\r\n                    })\r\n            };\r\n\r\n        case 'DELETE_ALL_REFERENCES':\r\n            return {\r\n                ...state,\r\n                references: []\r\n            };\r\n\r\n        case 'SET_TOTAL_REFERENCES':\r\n            return {\r\n                ...state,\r\n                nTotalReferences: action.result\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import Breadcrumbs from './Breadcrumbs';\r\n\r\nexport default Breadcrumbs;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Container } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\ninterface ICrumb {\r\n    name: string,\r\n    path: string\r\n}\r\n\r\ntype BreadcrumbsProps = {\r\n    crumbs: ICrumb[]\r\n}\r\n\r\nclass Breadcrumbs extends React.PureComponent<BreadcrumbsProps> {\r\n    public render() {\r\n        if (this.props.crumbs.length <= 1) {\r\n            return null;\r\n        }\r\n        \r\n        return (\r\n            <div id=\"breadcrumb-wrap\" className=\"box-shadow\">\r\n                <Container>\r\n                    <Breadcrumb>\r\n                            {/* Link back to any previous steps of the breadcrumb. */}\r\n                            {this.props.crumbs.map(({ name, path }, key) =>\r\n                                key + 1 === this.props.crumbs.length ? (\r\n                                    <BreadcrumbItem active>{name}</BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem>\r\n                                        <NavLink tag={Link} className=\"p-0 d-inline\" to={path}>{name}</NavLink>\r\n                                    </BreadcrumbItem>\r\n                                )\r\n                            )}\r\n                    </Breadcrumb>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\nclass Footer extends React.PureComponent {\r\n    public render() {\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n\r\n        return (\r\n            <footer className=\"border-top box-shadow\">\r\n                <Container className=\"clearfix pt-2 pb-2\">\r\n                    <div className=\"float-left\">\r\n                        <strong>Copyright</strong> JBC, Soldering S.L. © {year}\r\n                    </div>\r\n                    <div className=\"float-right\">\r\n                    <strong>QST 4.0</strong> - version 0.0.1\r\n                    </div>\r\n                </Container>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import NavMenu from './NavMenu';\r\n\r\nexport default NavMenu;\r\n","import * as React from 'react';\r\nimport { Collapse, Container } from 'reactstrap';\r\nimport { Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarToggler } from 'reactstrap';\r\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">\r\n                            <img src=\"img/logo.png\" alt=\"JBC\" className=\"mr-2\"/>QST 4.0\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"flex-grow\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">\r\n                                        Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                \r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Processes\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/optimization\">\r\n                                                Process optimization\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/processes/assistant\">\r\n                                                Soldering assistant\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Traceability\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/task\">\r\n                                                Tasks\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/workprocess\">\r\n                                                Work process\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem>\r\n                                            <NavLink tag={Link} className=\"text-dark\" to=\"/traceability/workbenchs\">\r\n                                                Workbenchs\r\n                                            </NavLink>\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport Footer from './content-components/Footer';\r\nimport NavMenu from './content-components/NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        {props.children}\r\n        <Footer/>\r\n    </React.Fragment>\r\n);\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\nclass Home extends React.PureComponent {\r\n    public render() {\r\n        const getProcessoptimization = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/optimization\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Optimize your processes by choosing the best combination of working temperature and the ideal cartridge.\r\n                            </CardText>\r\n                            <CardTitle>Process optimization</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        const getSolderingAssistant = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/assistant\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Pre-stored soldering joint and compare in real-time with all the new soldering processes.\r\n                            </CardText>\r\n                            <CardTitle>Soldering assistant</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        const getTraceability = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/traceability/task\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Record the data of all connected stations.\r\n                            </CardText>\r\n                            <CardTitle>Traceability</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"list-cards\">\r\n                <Row xs={1} sm={2} md={4}>\r\n                    <Col>{getProcessoptimization()}</Col>\r\n                    <Col>{getSolderingAssistant()}</Col>\r\n                    <Col>{getTraceability()}</Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;\r\n","import Processes from './Processes';\r\n\r\nexport default Processes;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\nclass Processes extends React.PureComponent {\r\n    public render() {\r\n        const getProcessoptimization = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/optimization\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Optimize your processes by choosing the best combination of working temperature and the ideal cartridge.\r\n                            </CardText>\r\n                            <CardTitle>Process optimization</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        const getSolderingAssistant = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/assistant\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Pre-stored soldering joint and compare in real-time with all the new soldering processes.\r\n                            </CardText>\r\n                            <CardTitle>Soldering assistant</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"list-cards\">\r\n                <Row xs={1} sm={2} md={4}>\r\n                    <Col>{getProcessoptimization()}</Col>\r\n                    <Col>{getSolderingAssistant()}</Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Processes;\r\n","const Configuration = {\r\n    FakeMode: true\r\n}\r\n\r\nexport default Configuration\r\n","export function TimeToString(sec_num, format) {\r\n\r\n    var showHours = false;\r\n    var padHours = false;\r\n    var showMinutes = false;\r\n    var padMinutes = false;\r\n    var showSeconds = false;\r\n    var padSeconds = false;\r\n\r\n    if (format.indexOf(\"hh\") >= 0) { showHours = true; padHours = true; }\r\n    else if (format.indexOf(\"h\") >= 0) { showHours = true; padHours = false; }\r\n\r\n    if (format.indexOf(\"mm\") >= 0) { showMinutes = true; padMinutes = true; }\r\n    else if (format.indexOf(\"m\") >= 0) { showMinutes = true; padMinutes = false; }\r\n\r\n    if (format.indexOf(\"ss\") >= 0) { showSeconds = true; padSeconds = true; }\r\n    else if (format.indexOf(\"s\") >= 0) { showSeconds = true; padSeconds = false; }\r\n\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n    \r\n    if (showHours) {\r\n        if (hours < 10 && padHours) { hours = \"0\" + hours; }\r\n        result += hours;\r\n    }\r\n    if (showMinutes) {\r\n        if (minutes < 10 && padMinutes) { minutes = \"0\" + minutes; }\r\n        if (result != \"\") { result += \":\"; }\r\n        result += minutes;\r\n    }\r\n    if (showSeconds) {\r\n        if (seconds < 10 && padSeconds) { seconds = \"0\" + seconds; }\r\n        if (result != \"\") { result += \":\"; }\r\n        result += seconds;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function SecToString(sec_num) {\r\n    if (sec_num < 0) {\r\n        return \"\";\r\n    }\r\n\r\n    var hours   = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    var result = \"\"\r\n    \r\n    if (hours != 0) {\r\n        result += hours;\r\n        result += \":\";\r\n    }\r\n\r\n    if (minutes < 10) { minutes = \"0\" + minutes; }\r\n    result += minutes;\r\n    result += \":\";\r\n\r\n    if (seconds < 10) { seconds = \"0\" + seconds; }\r\n    result += seconds;\r\n\r\n    return result;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as AssistantStore from '../store/Assistant';\r\nimport * as StationStore from '../store/Station';\r\nimport * as TaskStore from '../store/Task';\r\nimport { sleep } from '../utils/timeUtils';\r\n\r\nclass FakeService {\r\n    static components = [\r\n        \"surface\", \"mount\", \"resistor\", \"led\",\r\n        \"R1\", \"R2\", \"R10\", \"R20\", \"PCB\",\r\n        \"C1\", \"C2\", \"C10\", \"C20\",\r\n        \"diode\", \"transistor\", \"capacitor\", \"magnetic\",\r\n        \"switches\", \"terminals\", \"thru-hole\"]\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult() {\r\n        console.log(\"FAKE SERVICE: getSolderingResult\");\r\n        return {\r\n            energy: 46,\r\n            similarity: 800,\r\n            tenthsOfSecondSoldering: 39\r\n        };\r\n    }\r\n\r\n    static async countReferences() {\r\n        console.log(\"FAKE SERVICE: countReferences\");\r\n        return 60;\r\n    }\r\n\r\n    static async getReferences() {\r\n        console.log(\"FAKE SERVICE: getReferences\");\r\n        await sleep(1000);\r\n        return this._getReferences(15);\r\n    }\r\n\r\n    static async _getReferences(nReferences: number) {\r\n        let references = [] as AssistantStore.Reference[];\r\n\r\n        for (var id = 1; id <= nReferences; id++) {\r\n            let referenceName = \"\";\r\n            for (var i = 0; i < 4; i++) {\r\n                referenceName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let reference = {\r\n                id: id,\r\n                name: referenceName,\r\n                power: [109, 136, 162, 181, 205, 216, 208, 199, 182, 165, 151, 141, 136, 132,\r\n                        131, 131, 134, 141, 154, 165, 178, 185, 198, 207, 210, 207, 203, 194,\r\n                        186, 178, 158, 144, 127],\r\n                cartridge: 'C245004',\r\n                temperature: 350 * 9,\r\n                durationTenthsSeconds: 64\r\n            };\r\n\r\n            references.push(reference);\r\n        }\r\n\r\n        return references;\r\n    }\r\n\r\n    static async deleteReference() {\r\n        console.log(\"FAKE SERVICE: deleteReference\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async generateReferenceSoldering() {\r\n        console.log(\"FAKE SERVICE: generateReferenceSoldering\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks() {\r\n        console.log(\"FAKE SERVICE: countTasks\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTasks() {\r\n        console.log(\"FAKE SERVICE: getTasks\");\r\n        await sleep(1000);\r\n        return this._getTasks(25);\r\n    }\r\n\r\n    static async getTaskById() {\r\n        console.log(\"FAKE SERVICE: getTaskById\");\r\n        await sleep(1000);\r\n        return (await this._getTasks(1))[0];\r\n    }\r\n\r\n    static async _getTasks(nTasks: number) {\r\n        let tasks = [] as TaskStore.Task[];\r\n\r\n        for (var taskId = 1; taskId <= nTasks; taskId++) {\r\n\r\n            let taskName = \"\";\r\n            for (var i = 0; i < 4; i++) {\r\n                taskName += this.components[Math.floor(Math.random() * this.components.length)] + \" \";\r\n            }\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let change_selected_temp = true;\r\n\r\n            let task = {\r\n                id: taskId,\r\n                name: taskName,\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selectedTemp: selectedTemp,\r\n                    changeSelectedTemp: change_selected_temp\r\n                },\r\n                timesPerformed: Math.floor(Math.random() * 3)\r\n            };\r\n\r\n            tasks.push(task);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async createTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: createTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async updateTask(task: TaskStore.Task) {\r\n        console.log(\"FAKE SERVICE: updateTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async deleteTask(id: number) {\r\n        console.log(\"FAKE SERVICE: deleteTask\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: countTaskHistories\");\r\n        return 60;\r\n    }\r\n\r\n    static async getTaskHistories(taskId: number) {\r\n        console.log(\"FAKE SERVICE: getTaskHistories\");\r\n        await sleep(2000);\r\n        return this._getTaskHistories(25)\r\n    }\r\n\r\n    static async getTaskHistoryById() {\r\n        console.log(\"FAKE SERVICE: getTaskHistoryById\");\r\n        await sleep(1000);\r\n        return (await this._getTaskHistories(1))[0];\r\n    }\r\n\r\n    static async _getTaskHistories(nTasks: number) {\r\n        let taskHistories = []\r\n\r\n        for (var historyId = 1; historyId <= nTasks; historyId++) {\r\n            let length = Math.floor(Math.random() * 500) + 30;\r\n\r\n            let tool = Math.floor(Math.random() * 8) + 1;\r\n            let selectedTemp = (Math.floor(Math.random() * 100) + 300) * 9;\r\n            let change_selected_temp = true;\r\n\r\n            let taskHistory = {\r\n                id: historyId + 1000,\r\n                finishDate: Date.now(),\r\n                workConfig: {\r\n                    tool: tool,\r\n                    selected_temp: selectedTemp,\r\n                    change_selected_temp: change_selected_temp\r\n                },\r\n                workData: {\r\n                    stationId: \"U1H23UI12HN3IBN\",\r\n                    stationName: \"Roberto's DDE\",\r\n                    stationPort: 1,\r\n                    temperature: Array.from({ length: length }, () => ((Math.floor(Math.random() * 100)) + 300) * 9),\r\n                    power: Array.from({ length: length }, () => Math.floor(Math.random() * 200)),\r\n                    workSolderings: [\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: 0\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        },\r\n                        {\r\n                            power: Array.from({ length: 35 }, () => Math.floor(Math.random() * 200)),\r\n                            solderingType: Math.floor(Math.random() * 6)\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n\r\n            taskHistories.push(taskHistory);\r\n        }\r\n\r\n        return taskHistories;\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace() {\r\n        console.log(\"FAKE SERVICE: startTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async stopTrace() {\r\n        console.log(\"FAKE SERVICE: stopTrace\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async startRealTimeData() {\r\n        console.log(\"FAKE SERVICE: startRealTimeData\");\r\n        await sleep(1000);\r\n        return 1;\r\n    }\r\n\r\n    static async stopRealTimeData() {\r\n        console.log(\"FAKE SERVICE: stopRealTimeData\");\r\n        await sleep(1000);\r\n    }\r\n\r\n    static async getRealTimeData() {\r\n        console.log(\"FAKE SERVICE: getRealTimeData\");\r\n\r\n        var d = new Date();\r\n        var seconds = d.getSeconds() % 10;\r\n\r\n        var isPortEnabled = seconds > 0;\r\n\r\n        var toolStatus = 0;\r\n        if (seconds === 1) toolStatus = 8;\r\n        if (seconds === 2) toolStatus = 4;\r\n        if (seconds === 3) toolStatus = 2;\r\n        if (seconds === 4) toolStatus = 1;\r\n\r\n        var isCalibrating =\r\n            (seconds >= 5) &&\r\n            (seconds <= 6);\r\n        \r\n        var isSoldering =\r\n            (seconds >= 8) &&\r\n            (seconds <= 9);\r\n\r\n        return [{\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        },\r\n        {\r\n            temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n            power: Math.floor(Math.random() * 100) + 100,\r\n            toolStatus: toolStatus,\r\n            isPortEnabled: isPortEnabled,\r\n            isSoldering: isSoldering,\r\n            isCalibrating: isCalibrating\r\n        }]\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByCartridge\");\r\n        await sleep(2000);\r\n\r\n        let data = [];\r\n        for (var i = 0; i < 35; i++) {\r\n            data.push({\r\n                temperature: (Math.floor(Math.random() * 100) + 300) * 9,\r\n                power: (Math.floor(Math.random() * 100) + 100) * 10\r\n            })\r\n        }\r\n\r\n        return {\r\n            data: data,\r\n            energy: data.reduce(((total, x) => total + x.power), 0),\r\n            time: data.length,\r\n            cartridge: \"C210004\",\r\n            selectedTemp: 350 * 9\r\n        }\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature() {\r\n        console.log(\"FAKE SERVICE: getBetterOptimizationByTemperature\");\r\n        await sleep(2000);\r\n\r\n        let points = [{\r\n            temperature: 250 * 9,\r\n            time: 3\r\n        }, {\r\n            temperature: 300 * 9,\r\n            time: 1.75\r\n        }, {\r\n            temperature: 350 * 9,\r\n            time: 1\r\n        }, {\r\n            temperature: 400 * 9,\r\n            time: 0.5\r\n        }];\r\n\r\n        let recommended = {\r\n            temperature: 350 * 9,\r\n            time: 1\r\n        };\r\n\r\n        let performance = {\r\n            temperature: 400 * 9,\r\n            time: 0.5\r\n        };\r\n\r\n        let durability = {\r\n            temperature: 300 * 9,\r\n            time: 1.75\r\n        };\r\n\r\n        return {\r\n            points: points,\r\n            recommended: recommended,\r\n            performance: performance,\r\n            durability: durability\r\n        }\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        console.log(\"FAKE SERVICE: getStations\");\r\n        await sleep(2000);\r\n        let scs = [] as StationStore.StationController[]\r\n\r\n        for (var iSc = 1; iSc <= 2; iSc++) {\r\n            let scId = \"sc\" + iSc\r\n            let sc =\r\n                {\r\n                    id: scId,\r\n                    url: \"192.168.1.1\",\r\n                    name: \"Lab-\" + iSc,\r\n                    isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                    stations: []\r\n                } as StationStore.StationController;\r\n\r\n            for (var iSt = 1; iSt <= 2; iSt++) {\r\n                let stationId = scId + \"_\" + iSt;\r\n                let station =\r\n                    {\r\n                        id: stationId,\r\n                        name: \"Roberto's DDE \" + iSt,\r\n                        model: \"DDE\",\r\n                        isQSTMode: Math.round(Math.random() * 1) === 1 ? true : false,\r\n                        ports: []\r\n                    } as StationStore.Station;\r\n\r\n                let nPorts = Math.pow(2, Math.floor(Math.random() * 3));\r\n                for (var p = 0; p < nPorts; p++) {\r\n                    let port =\r\n                        {\r\n                            id: p,\r\n                            tool: Math.floor(Math.random() * 8) + 1\r\n                        } as StationStore.Port;\r\n                    station.ports.push(port);\r\n                }\r\n\r\n                sc.stations.push(station);\r\n            }\r\n\r\n            scs.push(sc);\r\n        }\r\n\r\n        return scs;\r\n    }\r\n\r\n    static async setSelectedTemperature() {\r\n        console.log(\"FAKE SERVICE: setSelectedTemperature\");\r\n    }\r\n\r\n    static async setTraceabilityMode() {\r\n        console.log(\"FAKE SERVICE: setTraceabilityMode\");\r\n    }\r\n}\r\n\r\nexport default FakeService;\r\n","import axios from 'axios';\r\n\r\nconst ENDPOINT_ASSISTANT = 'api/assistant'\r\nconst ENDPOINT_PROCESS_OPTIMIZATION = 'api/processoptimization'\r\nconst ENDPOINT_REAL_TIME = '/api/realtimedata';\r\nconst ENDPOINT_STATIONS = '/api/station';\r\nconst ENDPOINT_TRACE = '/api/trace';\r\nconst ENDPOINT_WORK = '/api/work';\r\nconst ENDPOINT_WORK_HISTORY = '/api/workhistory';\r\n\r\nclass RestService {\r\n\r\n    // assistant\r\n\r\n    static async getSolderingResult(stationId, port) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/solderingresult?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async countReferences() {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"/count\");\r\n    }\r\n\r\n    static async getReferences(pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_ASSISTANT + \"?pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async deleteReference(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_ASSISTANT + \"/\" + id);\r\n    }\r\n\r\n    static async generateReferenceSoldering(stationId, port, name, cartridge) {\r\n        return await this.doPostRequest(ENDPOINT_ASSISTANT + \"/generatereferencesoldering?stationid=\" + stationId + \"&stationport=\" + port + \"&name=\" + name + \"&cartridge=\" + cartridge);\r\n    }\r\n\r\n    // tasks\r\n\r\n    static async countTasks(filter) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/count?filter=\" + filter);\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"?filter=\" + filter + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    static async createTask(task) {\r\n        return await this.doPostRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        return await this.doPutRequest(ENDPOINT_WORK, task);\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        return await this.doDeleteRequest(ENDPOINT_WORK + \"/\" + id);\r\n    }\r\n\r\n    // task histories\r\n\r\n    static async countTaskHistories(taskId) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/count?workid=\" + taskId);\r\n    }\r\n\r\n    static async getTaskHistories(taskId, pageNumber, pageSize) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"?workid=\" + taskId + \"&pagenumber=\" + pageNumber + \"&pagesize=\" + pageSize);\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        return await this.doGetRequest(ENDPOINT_WORK_HISTORY + \"/\" + id);\r\n    }\r\n\r\n    // work\r\n\r\n    static async startTrace(taskId, stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_TRACE + \"/start?workid=\" + taskId + \"&stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopTrace(stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_TRACE + \"/stop?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    // real time data\r\n\r\n    static async startRealTimeData(stationId, port) {\r\n        return await this.doPostRequest(ENDPOINT_REAL_TIME + \"/start?stationid=\" + stationId + \"&stationport=\" + port);\r\n    }\r\n\r\n    static async stopRealTimeData(stationId, queueId) {\r\n        return await this.doPostRequest(ENDPOINT_REAL_TIME + \"/stop?stationid=\" + stationId + \"&queueid=\" + queueId);\r\n    }\r\n\r\n    static async getRealTimeData(stationId, queueId) {\r\n        return await this.doGetRequest(ENDPOINT_REAL_TIME + \"?stationid=\" + stationId + \"&queueid=\" + queueId);\r\n    }\r\n\r\n    // process optimization\r\n\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/cartridge\", solderings);\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        return await this.doPostRequest(ENDPOINT_PROCESS_OPTIMIZATION + \"/temperature\", solderings);\r\n    }\r\n\r\n    // stations\r\n\r\n    static async getStations() {\r\n        return await this.doGetRequest(ENDPOINT_STATIONS);\r\n    }\r\n\r\n    static async setSelectedTemperature(stationId, port, temperature) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS + \"/setselectedtemperature?stationid=\" + stationId + \"&stationport=\" + port + \"&temperature=\" + temperature);\r\n    }\r\n\r\n    static async setTraceabilityMode(scUrl, newState) {\r\n        return await this.doPostRequest(ENDPOINT_STATIONS + \"/settraceabilitymode?scurl=\" + scUrl + \"&qststate=\" + newState);\r\n    }\r\n\r\n    // api requests\r\n\r\n    static async doGetRequest(resource) {\r\n        try {\r\n            const success = await axios.get(resource);\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPostRequest(resource, data) {\r\n        try {\r\n            const success = await axios({\r\n                method: 'post',\r\n                url: resource,\r\n                data: data\r\n            });\r\n            return success[\"data\"];\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    static async doPutRequest(resource, data) {\r\n        try {\r\n            await axios({\r\n                method: 'put',\r\n                url: resource,\r\n                data: data\r\n            });\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n\r\n    static async doDeleteRequest(resource) {\r\n        try {\r\n            await axios.delete(resource);\r\n        } catch (error) {\r\n            console.error(\"error\", error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RestService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass AssistantService {\r\n    static async getSolderingResult(stationId, port) {\r\n        let result;\r\n\r\n        if (Configuration.FakeMode) {\r\n            result = FakeService.getSolderingResult();\r\n        }\r\n        else {\r\n            result = RestService.getSolderingResult(stationId, port);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static async countReferences() {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countReferences();\r\n        }\r\n        else {\r\n            count = RestService.countReferences();\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getReferences(pageNumber, pageSize) {\r\n        let references;\r\n\r\n        if (Configuration.FakeMode) {\r\n            references = FakeService.getReferences();\r\n        }\r\n        else {\r\n            references = RestService.getReferences(pageNumber, pageSize);\r\n        }\r\n\r\n        return references;\r\n    }\r\n\r\n    static async deleteReference(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteReference();\r\n        }\r\n        else {\r\n            RestService.deleteReference(id);\r\n        }\r\n    }\r\n\r\n    static async generateReferenceSoldering(stationId, port, name, cartridge) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.generateReferenceSoldering();\r\n        }\r\n        else {\r\n            RestService.generateReferenceSoldering(stationId, port, name, cartridge);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AssistantService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass ProcessOptimizationService {\r\n    static async getBetterOptimizationByCartridge(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByCartridge();\r\n        }\r\n        else {\r\n            betterSoldering = RestService.getBetterOptimizationByCartridge(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n\r\n    static async getBetterOptimizationByTemperature(solderings) {\r\n        let betterSoldering;\r\n\r\n        if (Configuration.FakeMode) {\r\n            betterSoldering = FakeService.getBetterOptimizationByTemperature();\r\n        }\r\n        else {\r\n            betterSoldering = RestService.getBetterOptimizationByTemperature(solderings);\r\n        }\r\n\r\n        return betterSoldering;\r\n    }\r\n}\r\n\r\nexport default ProcessOptimizationService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass StationsService {\r\n    static async getStations() {\r\n        let stations;\r\n\r\n        if (Configuration.FakeMode) {\r\n            stations = FakeService.getStations();\r\n        }\r\n        else {\r\n            stations = RestService.getStations();\r\n        }\r\n\r\n        return stations;\r\n    }\r\n\r\n    static async setSelectedTemperature(stationId, port, temperature) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setSelectedTemperature();\r\n        }\r\n        else {\r\n            RestService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n    }\r\n\r\n    static async setTraceabilityMode(scUrl, newState) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.setTraceabilityMode();\r\n        }\r\n        else {\r\n            RestService.setTraceabilityMode(scUrl, newState);\r\n        }\r\n    }\r\n}\r\n\r\nexport default StationsService;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass WorkService {\r\n    static async startTrace(taskId, stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.startTrace();\r\n        }\r\n        else {\r\n            RestService.startTrace(taskId, stationId, port);\r\n        }\r\n    }\r\n\r\n    static async stopTrace(stationId, port) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopTrace();\r\n        }\r\n        else {\r\n            RestService.stopTrace(stationId, port);\r\n        }\r\n    }\r\n\r\n    static async startRealTimeData(stationId, port) {\r\n        let queueId;\r\n\r\n        if (Configuration.FakeMode) {\r\n            queueId = FakeService.startRealTimeData();\r\n        }\r\n        else {\r\n            queueId = RestService.startRealTimeData(stationId, port);\r\n        }\r\n\r\n        return queueId;\r\n    }\r\n\r\n    static async stopRealTimeData(stationId, queueId) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.stopRealTimeData();\r\n        }\r\n        else {\r\n            RestService.stopRealTimeData(stationId, queueId);\r\n        }\r\n    }\r\n\r\n    static async getRealTimeData(stationId, queueId) {\r\n        let data;\r\n\r\n        if (Configuration.FakeMode) {\r\n            data = FakeService.getRealTimeData();\r\n        }\r\n        else {\r\n            data = RestService.getRealTimeData(stationId, queueId);\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\nexport default WorkService;\r\n","export function TryParseInt(str,defaultValue) {\r\n    var retValue = defaultValue;\r\n    if(str !== null) {\r\n        if(str.length > 0) {\r\n            if (!isNaN(str)) {\r\n                retValue = parseInt(str);\r\n            }\r\n        }\r\n    }\r\n    return retValue;\r\n}\r\n","import * as React from 'react';\r\nimport { Jumbotron, Button } from 'reactstrap';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep1 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n\r\n        const getInformation = () => {\r\n            return (\r\n                <Jumbotron className=\"pr-opti\">\r\n                    <h1 className=\"display-4\">Process optimization</h1>\r\n                    <p className=\"lead\">Optimize your processes by choosing the best combination of working temperature and the ideal cartridge</p>\r\n                    <hr className=\"my-2\" />\r\n                    <p>Extend cartridge life, save time and reduce costs with smart optimization</p>\r\n                    <p className=\"lead\">\r\n                        <Button\r\n                            outline\r\n                            color=\"primary\"\r\n                            size=\"lg\"\r\n                            className=\"m-2\"\r\n                            onClick={this.props.handleNextClick}\r\n                        >Start</Button>\r\n                    </p>\r\n                </Jumbotron>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {getInformation()}\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep1;\r\n","export function GetTools()\r\n{\r\n    var tools =\r\n    {\r\n        1: \"T210\",\r\n        2: \"T245\",\r\n        3: \"PA\",\r\n        4: \"HT\",\r\n        5: \"DS\",\r\n        6: \"DR\",\r\n        7: \"NT105\",\r\n        8: \"NP105\",\r\n        9: \"T470\",\r\n\r\n        31: \"JT\",\r\n        32: \"TE\",\r\n        33: \"PHS\",\r\n        34: \"PHB\"\r\n    }\r\n    return tools;\r\n}\r\n\r\nexport function ToolToString(id)\r\n{\r\n    let tool = GetTools()[id];\r\n\r\n    if (typeof(tool) === \"undefined\") {\r\n        return \"No tool\";\r\n    }\r\n    else {\r\n        return tool;\r\n    }\r\n}\r\n\r\nexport function ToolImagePath(id)\r\n{\r\n    if (typeof(GetTools()[id]) === \"undefined\") {\r\n        return \"\";\r\n    }\r\n    else {\r\n        return \"img/tools/\" + GetTools()[id].toLowerCase() + \".png\";\r\n    }\r\n}\r\n","import StationsPortList from './StationsPortList';\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\n\r\ntype ProcessOptimizationProps = {\r\n    isLoading: boolean,\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void\r\n}\r\n\r\nclass StationsPortList extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                            .map(p => (\r\n                                <tr onClick={() => this.props.handleStationClick(s, p.id, p.tool)}>\r\n                                    <td scope=\"row\">{s.name} [{s.model}]</td>\r\n                                    <td>{p.id + 1}</td>\r\n                                    <td>{ToolToString(p.tool)}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            getListOptionsStationControllers()\r\n        );\r\n    }\r\n};\r\n\r\nexport default StationsPortList;\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport StationsPortList from '../../content-parts/StationsPortList';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n    selectedTemperature: number,\r\n    \r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep2 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoading}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={this.props.handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <CardText>\r\n                            <strong>Selected temperature:</strong>\r\n                            <Input\r\n                                type=\"select\"\r\n                                defaultValue={this.props.selectedTemperature / 9}\r\n                                onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                            >\r\n                                <option>425</option>\r\n                                <option>400</option>\r\n                                <option>375</option>\r\n                                <option>350</option>\r\n                                <option>325</option>\r\n                                <option>300</option>\r\n                            </Input>\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (!this.props.isFormCorrect) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <h4>Step 1 - Station selection</h4>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <Alert color=\"warning\">\r\n                        Select temperature to test with different cartridges\r\n                    </Alert>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"8\">\r\n                        <Row>\r\n                            <Card>\r\n                                <CardBody>\r\n                                    <CardTitle>Stations available</CardTitle>\r\n                                    <CardText>\r\n                                        {getListOptionsStationControllers()}\r\n                                    </CardText>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep2;\r\n","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C470\",\r\n\"Default\":\"009\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"026\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"035\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"037\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"038\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"040\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"042\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"043\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"044\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"045\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"046\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"047\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"048\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"049\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"050\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"051\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"055\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"057\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"058\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"059\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"063\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"065\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"066\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"564\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"SP42\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C245\",\r\n\"Default\":\"029\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"2\",\r\n\"RT\":\"1022\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"3\",\r\n\"RT\":\"30\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"1\",\r\n\"RT\":\"1474\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"1\",\r\n\"RT\":\"1711\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"2\",\r\n\"RT\":\"408\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"036\",\r\n\"G\":\"1\",\r\n\"RT\":\"2602\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"039\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"041\",\r\n\"G\":\"2\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"052\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"053\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"054\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"056\",\r\n\"G\":\"3\",\r\n\"RT\":\"100\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"061\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"064\",\r\n\"G\":\"2\",\r\n\"RT\":\"765\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"067\",\r\n\"G\":\"3\",\r\n\"RT\":\"638\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"069\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"102\",\r\n\"G\":\"3\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"3\",\r\n\"RT\":\"118\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"1\",\r\n\"RT\":\"42\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"3\",\r\n\"RT\":\"195\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"3\",\r\n\"RT\":\"151\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"119\",\r\n\"G\":\"3\",\r\n\"RT\":\"2258\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"121\",\r\n\"G\":\"1\",\r\n\"RT\":\"166\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"122\",\r\n\"G\":\"2\",\r\n\"RT\":\"268\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"123\",\r\n\"G\":\"3\",\r\n\"RT\":\"143\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"3\",\r\n\"RT\":\"42\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"1\",\r\n\"RT\":\"1219\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"136\",\r\n\"G\":\"1\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"138\",\r\n\"G\":\"1\",\r\n\"RT\":\"36\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"150\",\r\n\"G\":\"3\",\r\n\"RT\":\"29\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"201\",\r\n\"G\":\"2\",\r\n\"RT\":\"1013\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"215\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"220\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"224\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"226\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"227\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"228\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"234\",\r\n\"G\":\"2\",\r\n\"RT\":\"463\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"247\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"248\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"250\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"256\",\r\n\"G\":\"3\",\r\n\"RT\":\"101\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"259\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"260\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"261\",\r\n\"G\":\"3\",\r\n\"RT\":\"164\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"268\",\r\n\"G\":\"3\",\r\n\"RT\":\"189\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"301\",\r\n\"G\":\"4\",\r\n\"RT\":\"31\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"303\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"304\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"305\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"306\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"311\",\r\n\"G\":\"2\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"312\",\r\n\"G\":\"2\",\r\n\"RT\":\"244\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"313\",\r\n\"G\":\"2\",\r\n\"RT\":\"114\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"315\",\r\n\"G\":\"4\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"344\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"351\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"352\",\r\n\"G\":\"0\",\r\n\"RT\":\"21\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"254\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"273\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"3\",\r\n\"RT\":\"139\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"627\",\r\n\"G\":\"3\",\r\n\"RT\":\"239\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"628\",\r\n\"G\":\"3\",\r\n\"RT\":\"175\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"651\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"654\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"667\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"669\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"673\",\r\n\"G\":\"2\",\r\n\"RT\":\"168\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"708\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"710\",\r\n\"G\":\"2\",\r\n\"RT\":\"922\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"729\",\r\n\"G\":\"3\",\r\n\"RT\":\"213\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"730\",\r\n\"G\":\"3\",\r\n\"RT\":\"21\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"731\",\r\n\"G\":\"2\",\r\n\"RT\":\"1233\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"732\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"741\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"742\",\r\n\"G\":\"2\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"747\",\r\n\"G\":\"1\",\r\n\"RT\":\"2530\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"748\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"749\",\r\n\"G\":\"1\",\r\n\"RT\":\"2521\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"751\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"752\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"754\",\r\n\"G\":\"3\",\r\n\"RT\":\"74\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"755\",\r\n\"G\":\"3\",\r\n\"RT\":\"72\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"756\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"757\",\r\n\"G\":\"3\",\r\n\"RT\":\"253\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"758\",\r\n\"G\":\"3\",\r\n\"RT\":\"196\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"759\",\r\n\"G\":\"2\",\r\n\"RT\":\"162\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"760\",\r\n\"G\":\"4\",\r\n\"RT\":\"39\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"761\",\r\n\"G\":\"3\",\r\n\"RT\":\"206\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"762\",\r\n\"G\":\"4\",\r\n\"RT\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"763\",\r\n\"G\":\"3\",\r\n\"RT\":\"48\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"764\",\r\n\"G\":\"1\",\r\n\"RT\":\"2977\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"765\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"766\",\r\n\"G\":\"3\",\r\n\"RT\":\"55\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"768\",\r\n\"G\":\"3\",\r\n\"RT\":\"174\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"770\",\r\n\"G\":\"3\",\r\n\"RT\":\"56\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"771\",\r\n\"G\":\"1\",\r\n\"RT\":\"8830\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"772\",\r\n\"G\":\"1\",\r\n\"RT\":\"1483\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"773\",\r\n\"G\":\"2\",\r\n\"RT\":\"465\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"774\",\r\n\"G\":\"2\",\r\n\"RT\":\"302\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"775\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"776\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"784\",\r\n\"G\":\"3\",\r\n\"RT\":\"231\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"785\",\r\n\"G\":\"2\",\r\n\"RT\":\"70\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"786\",\r\n\"G\":\"0\",\r\n\"RT\":\"728\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"789\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"790\",\r\n\"G\":\"0\",\r\n\"RT\":\"149\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"792\",\r\n\"G\":\"0\",\r\n\"RT\":\"96\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"793\",\r\n\"G\":\"0\",\r\n\"RT\":\"162\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"795\",\r\n\"G\":\"0\",\r\n\"RT\":\"776\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"796\",\r\n\"G\":\"0\",\r\n\"RT\":\"81\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"797\",\r\n\"G\":\"0\",\r\n\"RT\":\"191\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"803\",\r\n\"G\":\"2\",\r\n\"RT\":\"573\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"804\",\r\n\"G\":\"2\",\r\n\"RT\":\"579\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"806\",\r\n\"G\":\"2\",\r\n\"RT\":\"472\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"807\",\r\n\"G\":\"3\",\r\n\"RT\":\"223\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"808\",\r\n\"G\":\"3\",\r\n\"RT\":\"33\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"811\",\r\n\"G\":\"3\",\r\n\"RT\":\"90\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"812\",\r\n\"G\":\"3\",\r\n\"RT\":\"105\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"844\",\r\n\"G\":\"3\",\r\n\"RT\":\"158\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"845\",\r\n\"G\":\"3\",\r\n\"RT\":\"312\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"846\",\r\n\"G\":\"3\",\r\n\"RT\":\"220\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"862\",\r\n\"G\":\"2\",\r\n\"RT\":\"469\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"863\",\r\n\"G\":\"3\",\r\n\"RT\":\"2117\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"866\",\r\n\"G\":\"4\",\r\n\"RT\":\"46\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"903\",\r\n\"G\":\"2\",\r\n\"RT\":\"552\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"904\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"905\",\r\n\"G\":\"3\",\r\n\"RT\":\"585\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"906\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"907\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"908\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"911\",\r\n\"G\":\"3\",\r\n\"RT\":\"173\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"912\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"913\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"914\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"929\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"930\",\r\n\"G\":\"1\",\r\n\"RT\":\"1395\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"931\",\r\n\"G\":\"3\",\r\n\"RT\":\"152\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"933\",\r\n\"G\":\"4\",\r\n\"RT\":\"262\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"935\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"937\",\r\n\"G\":\"2\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"938\",\r\n\"G\":\"3\",\r\n\"RT\":\"73\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"939\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"943\",\r\n\"G\":\"3\",\r\n\"RT\":\"341\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"944\",\r\n\"G\":\"3\",\r\n\"RT\":\"188\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"945\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"946\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"949\",\r\n\"G\":\"3\",\r\n\"RT\":\"96\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"951\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"955\",\r\n\"G\":\"3\",\r\n\"RT\":\"342\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"957\",\r\n\"G\":\"1\",\r\n\"RT\":\"1157\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"962\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"963\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"965\",\r\n\"G\":\"3\",\r\n\"RT\":\"620\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"966\",\r\n\"G\":\"4\",\r\n\"RT\":\"14\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"SP01\",\r\n\"G\":\"0\",\r\n\"RT\":\"617\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C210\",\r\n\"Default\":\"003\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"421\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"380\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"2\",\r\n\"RT\":\"929\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"2\",\r\n\"RT\":\"374\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"2\",\r\n\"RT\":\"349\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"195\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"299\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"1332\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"1137\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"2\",\r\n\"RT\":\"273\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"2\",\r\n\"RT\":\"1656\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"2\",\r\n\"RT\":\"780\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"016\",\r\n\"G\":\"2\",\r\n\"RT\":\"2494\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"2\",\r\n\"RT\":\"161\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"018\",\r\n\"G\":\"2\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"019\",\r\n\"G\":\"2\",\r\n\"RT\":\"1368\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"020\",\r\n\"G\":\"1\",\r\n\"RT\":\"2861\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"021\",\r\n\"G\":\"2\",\r\n\"RT\":\"745\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"022\",\r\n\"G\":\"2\",\r\n\"RT\":\"80\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"023\",\r\n\"G\":\"1\",\r\n\"RT\":\"1222\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"N\":\"024\",\r\n\"G\":\"2\",\r\n\"RT\":\"451\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"025\",\r\n\"G\":\"2\",\r\n\"RT\":\"115\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"027\",\r\n\"G\":\"0\",\r\n\"RT\":\"355\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"028\",\r\n\"G\":\"0\",\r\n\"RT\":\"536\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"029\",\r\n\"G\":\"0\",\r\n\"RT\":\"287\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"030\",\r\n\"G\":\"0\",\r\n\"RT\":\"259\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"031\",\r\n\"G\":\"0\",\r\n\"RT\":\"210\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"032\",\r\n\"G\":\"0\",\r\n\"RT\":\"891\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"033\",\r\n\"G\":\"0\",\r\n\"RT\":\"342\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"034\",\r\n\"G\":\"0\",\r\n\"RT\":\"692\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"10\",\r\n\"P400\":\"10\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C120\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"2068\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"2\",\r\n\"RT\":\"680\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"938\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"517\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"1653\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"008\",\r\n\"G\":\"2\",\r\n\"RT\":\"350\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"247\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"010\",\r\n\"G\":\"1\",\r\n\"RT\":\"207\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"1381\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"86\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"0\",\r\n\"RT\":\"959\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"902\",\r\n\"G\":\"1\",\r\n\"RT\":\"2266\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C105\",\r\n\"Default\":\"101\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"3\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"105\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"106\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"107\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"108\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"109\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"110\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"111\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"113\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"114\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"115\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"116\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"117\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"118\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"120\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"124\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"30\",\r\n\"P400\":\"30\"\r\n},\r\n{\r\n\"N\":\"125\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"126\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"20\",\r\n\"P400\":\"20\"\r\n},\r\n{\r\n\"N\":\"127\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"128\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"129\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"130\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"131\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"211\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"212\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"213\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"214\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"221\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"222\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n},\r\n{\r\n\"N\":\"223\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-5\",\r\n\"P400\":\"-5\"\r\n}\r\n],\r\n\"Cartridge_group\":[]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C420\",\r\n\"Default\":\"281\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"271\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"272\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"273\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"274\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"275\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"276\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"277\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"278\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"279\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"280\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"281\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"282\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"283\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"285\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"286\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"287\",\r\n\"G\":\"2\",\r\n\"RT\":\"0\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n},\r\n{\r\n\"N\":\"288\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-15\",\r\n\"P400\":\"-15\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C360\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"101\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"103\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"112\",\r\n\"G\":\"0\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C560\",\r\n\"Default\":\"001\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"001\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"002\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"003\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"004\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"005\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"006\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"007\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"009\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"011\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"012\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"013\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"014\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"015\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"017\",\r\n\"G\":\"1\",\r\n\"RT\":\"0\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n}\r\n]\r\n}\r\n};","export default {\r\n\"_Type\":\"CARTRIDGES\",\r\n\"_V\":1,\r\n\"_\":{\r\n\"F\":\"C250\",\r\n\"Default\":\"401\",\r\n\"Cartridge_list\":[\r\n{\r\n\"N\":\"401\",\r\n\"G\":\"1\",\r\n\"RT\":\"1075\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"402\",\r\n\"G\":\"2\",\r\n\"RT\":\"2778\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"403\",\r\n\"G\":\"2\",\r\n\"RT\":\"578\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"404\",\r\n\"G\":\"2\",\r\n\"RT\":\"344\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"405\",\r\n\"G\":\"3\",\r\n\"RT\":\"2031\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"406\",\r\n\"G\":\"3\",\r\n\"RT\":\"221\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"407\",\r\n\"G\":\"2\",\r\n\"RT\":\"449\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"N\":\"408\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"409\",\r\n\"G\":\"3\",\r\n\"RT\":\"437\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"410\",\r\n\"G\":\"3\",\r\n\"RT\":\"269\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"411\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"412\",\r\n\"G\":\"3\",\r\n\"RT\":\"50\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"413\",\r\n\"G\":\"3\",\r\n\"RT\":\"214\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"414\",\r\n\"G\":\"3\",\r\n\"RT\":\"289\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"415\",\r\n\"G\":\"4\",\r\n\"RT\":\"130\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n},\r\n{\r\n\"N\":\"418\",\r\n\"G\":\"3\",\r\n\"RT\":\"420\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"N\":\"420\",\r\n\"G\":\"1\",\r\n\"RT\":\"1827\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"N\":\"424\",\r\n\"G\":\"3\",\r\n\"RT\":\"109\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n}\r\n],\r\n\"Cartridge_group\":[\r\n{\r\n\"G\":\"1\",\r\n\"P300\":\"0\",\r\n\"P400\":\"0\"\r\n},\r\n{\r\n\"G\":\"2\",\r\n\"P300\":\"-10\",\r\n\"P400\":\"-10\"\r\n},\r\n{\r\n\"G\":\"3\",\r\n\"P300\":\"-20\",\r\n\"P400\":\"-20\"\r\n},\r\n{\r\n\"G\":\"4\",\r\n\"P300\":\"-30\",\r\n\"P400\":\"-30\"\r\n}\r\n]\r\n}\r\n};","import T470data from './cartridgeData/T470';\r\nimport T245data from './cartridgeData/T245';\r\nimport T210data from './cartridgeData/T210';\r\nimport PA120data from './cartridgeData/PA120';\r\nimport NT105data from './cartridgeData/NT105';\r\nimport NP105data from './cartridgeData/NP105';\r\nimport HT420data from './cartridgeData/HT420';\r\nimport DS360data from './cartridgeData/DS360';\r\nimport DR560data from './cartridgeData/DR560';\r\nimport AP250data from './cartridgeData/AP250';\r\n\r\ninterface CartridgeList {\r\n    N: string;\r\n    G: string;\r\n    RT: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeGroup {\r\n    G: string;\r\n    P300: string;\r\n    P400: string;\r\n}\r\n\r\ninterface CartridgeData {\r\n    F: string;\r\n    Default: string;\r\n    Cartridge_list: CartridgeList[];\r\n    Cartridge_group: CartridgeGroup[];\r\n}\r\n\r\ninterface CartridgeRoot {\r\n    _Type: string;\r\n    _V: number;\r\n    _: CartridgeData;\r\n}\r\n\r\nexport interface ICartridge {\r\n    tool: number,\r\n    fullName: string,\r\n    family: string,\r\n    name: string,\r\n    isDefault: boolean,\r\n    img: string\r\n}\r\n\r\nexport function LoadCartridges() {\r\n    let cartridges: ICartridge[] = [];\r\n    cartridges = cartridges.concat(MapCatridges(T470data));\r\n    cartridges = cartridges.concat(MapCatridges(T245data));\r\n    cartridges = cartridges.concat(MapCatridges(T210data));\r\n    cartridges = cartridges.concat(MapCatridges(PA120data));\r\n    cartridges = cartridges.concat(MapCatridges(NT105data));\r\n    cartridges = cartridges.concat(MapCatridges(NP105data));\r\n    cartridges = cartridges.concat(MapCatridges(HT420data));\r\n    cartridges = cartridges.concat(MapCatridges(DS360data));\r\n    cartridges = cartridges.concat(MapCatridges(DR560data));\r\n    cartridges = cartridges.concat(MapCatridges(AP250data));\r\n\r\n    return cartridges;\r\n}\r\n\r\nexport function MapCatridges(cartridgeRoot: CartridgeRoot) {\r\n    let result: ICartridge[] = [];\r\n\r\n    let cartridge = cartridgeRoot._;\r\n    let family = cartridge.F;\r\n    let def = cartridge.Default;\r\n\r\n    cartridge.Cartridge_list.forEach(item => {\r\n        result.push({\r\n            tool: GetToolIdByFamily(family),\r\n            fullName: family + item.N,\r\n            family: family,\r\n            name: item.N,\r\n            isDefault: def === item.N,\r\n            img: CartridgeImagePath(family, item.N)\r\n        });\r\n    })\r\n\r\n    return result;\r\n};\r\n\r\nexport function GetToolIdByFamily(family: string)\r\n{\r\n    family = family.toLowerCase();\r\n\r\n    if (family === \"c210\") return 1; // T210\r\n    if (family === \"c245\") return 2; // T245\r\n    if (family === \"c120\") return 3; // PA\r\n    if (family === \"c420\") return 4; // HT\r\n    if (family === \"c360\") return 5; // DS\r\n    if (family === \"c560\") return 6; // DR\r\n    if (family === \"c105\" || family === \"c115\") return 7; // NT105, NP105\r\n    if (family === \"c470\") return 9; // T470\r\n\r\n    return 0;\r\n}\r\n\r\nexport function CartridgeImagePath(family: string, name: string)\r\n{\r\n    return \"img/cartidges/\" + family.toLowerCase() + name.toLowerCase() + \"_detail.png\";\r\n}\r\n\r\nexport function CartridgeImagePathByFullName(name: string)\r\n{\r\n    let cartridge = LoadCartridges().find(x => x.fullName.toLowerCase() === name.toLowerCase());\r\n\r\n    if (cartridge === undefined) {\r\n        return \"\";\r\n    }\r\n\r\n    return CartridgeImagePath(cartridge.family, cartridge.name);\r\n}\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2AxisSimple extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: -61\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        tick={false}\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2AxisSimple;\r\n","import Plot2AxisSimple from './Plot2AxisSimple';\r\n\r\nexport default Plot2AxisSimple;\r\n","const DESOLDER = 16;\r\nconst EXTRACTOR = 8;\r\nconst HIBERNATION = 4;\r\nconst SLEEP = 2;\r\nconst STAND = 1;\r\nconst NONE = 0;\r\n\r\nexport function GetPortStatus2String(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return \"Port locked\";\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return \"Tool in the extractor\";\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return \"Tool in hibernation\";\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return \"Tool in sleep\";\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return \"Tool in the stand\";\r\n    }\r\n    else if (isCalibrating) {\r\n        return \"Calibrating\";\r\n    }\r\n    else if (isSoldering) {\r\n        return \"Soldering\";\r\n    }\r\n    else {\r\n        return \"Ready\";\r\n    }\r\n}\r\n\r\nexport function GetPortStatus2Lights(toolStatus, isCalibrating, isSoldering, isPortEnabled) {\r\n    if (!isPortEnabled) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & EXTRACTOR) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & HIBERNATION) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & SLEEP) {\r\n        return 3;\r\n    }\r\n    else if (toolStatus & STAND) {\r\n        return 3;\r\n    }\r\n    else if (isCalibrating) {\r\n        return 2;\r\n    }\r\n    else if (isSoldering) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n","import PortStatusCard from './PortStatusCard';\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../utils/portUtils';\r\nimport './PortStatusCard.css';\r\n\r\ntype PortStatusCardProps = {\r\n    portData: IRealTimeData\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number,\r\n    toolStatus: number,\r\n    isPortEnabled: boolean,\r\n    isCalibrating: boolean,\r\n    isSoldering: boolean,\r\n    tenthsOfSecondSoldering: number\r\n}\r\n\r\nclass PortStatusCard extends React.PureComponent<PortStatusCardProps> {\r\n    public render() {\r\n        let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n            this.props.portData.toolStatus,\r\n            this.props.portData.isCalibrating,\r\n            this.props.portData.isSoldering,\r\n            this.props.portData.isPortEnabled);\r\n            \r\n        return (\r\n            <Card>\r\n                <CardBody>\r\n                    <Row>\r\n                        <Col xs=\"auto\">\r\n                            Temperature:{' '}\r\n                            <span className=\"temp-value\"> {Math.floor(this.props.portData.temperature / 9)} ºC</span>\r\n                        </Col>\r\n                        <Col>\r\n                            Power:{' '}\r\n                            <span className=\"power-value\">{Math.floor(this.props.portData.power / 10)} %</span>\r\n                        </Col>\r\n                        <Col className=\"text-right\">\r\n                            <FontAwesomeIcon icon={faCircle} className={circleLight}/>\r\n                            <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                this.props.portData.toolStatus,\r\n                                this.props.portData.isCalibrating,\r\n                                this.props.portData.isSoldering,\r\n                                this.props.portData.isPortEnabled\r\n                            )}</strong>\r\n                        </Col>\r\n                    </Row>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PortStatusCard;\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as StationStore from '../../../store/Station';\r\nimport { LoadCartridges, ICartridge } from '../../../utils/cartridgeUtils';\r\nimport Plot2AxisSimple from '../../content-parts/Plot2AxisSimple';\r\nimport PortStatusCard from '../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    \r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string\r\n}\r\n\r\nclass ProcessOptimizationStep3 extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n        \r\n        let cartridgeImagePath = \"\";\r\n        let cartridges = LoadCartridges();\r\n        let defaultCartridge = cartridges.find(x => x.isDefault && x.tool === this.props.selectedTool);\r\n        \r\n        if (defaultCartridge !== undefined) {\r\n            cartridgeImagePath = defaultCartridge.img;\r\n            this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n        }\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeImagePath: cartridgeImagePath\r\n        };\r\n    }\r\n    \r\n    public render() {\r\n        if (this.props.currentStep !== 3) {\r\n            return null\r\n        }\r\n\r\n        const getAlerts = () => {\r\n            let alerts = [];\r\n\r\n            alerts.push(\r\n                <Alert color=\"warning\">\r\n                    Performs multiple solderings with different cartridges\r\n                </Alert>);\r\n\r\n            return alerts;\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let stationDetail;\r\n            if (this.props.selectedStation.id != \"\") {\r\n                stationDetail =\r\n                    <React.Fragment>\r\n                        <CardText>Station Id: {this.props.selectedStation.id}</CardText>\r\n                        <CardText>Station: {this.props.selectedStation.name} [{this.props.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.props.selectedPort + 1}</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        };\r\n        \r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath\r\n            });\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Selected temperature: {this.props.selectedTemperature / 9} ºC</CardText>\r\n                                <CardText>\r\n                                    <strong>Selected cartridge:</strong>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={this.state.cartridgeImagePath} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"pr-opti-plot\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Energy: <strong>{x.solderingResult.energy} w·s</strong></CardText>\r\n                                        <CardText>Cartridge: <strong>{x.cartridge}</strong></CardText>\r\n                                    </Col>\r\n                                    <Col className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Plot2AxisSimple\r\n                                    plotData={data}\r\n                                    counterTenthSecond={x.data.length}\r\n                                    interval={Math.floor(x.data.length / 2)}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered processes</CardTitle>\r\n                        <Row xs={1} sm={2} md={3}>\r\n                            {registeredPlots}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <h4>Step 2 - Cartridge selection</h4>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    {getAlerts()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep3;\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\nimport { Col, Row, Input } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as StationStore from '../../../store/Station';\r\nimport { CartridgeImagePathByFullName } from '../../../utils/cartridgeUtils';\r\nimport Plot2AxisSimple from '../../content-parts/Plot2AxisSimple';\r\nimport PortStatusCard from '../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    \r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTemperature: number,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep4 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 4) {\r\n            return null\r\n        }\r\n\r\n        const getAlerts = () => {\r\n            let alerts = [];\r\n\r\n            alerts.push(\r\n                <Alert color=\"warning\">\r\n                    Performs multiple solderings with different temperatures and the selected cartridge\r\n                </Alert>);\r\n\r\n            return alerts;\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let stationDetail;\r\n            if (this.props.selectedStation.id != \"\") {\r\n                stationDetail =\r\n                    <React.Fragment>\r\n                        <CardText>Station Id: {this.props.selectedStation.id}</CardText>\r\n                        <CardText>Station: {this.props.selectedStation.name} [{this.props.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.props.selectedPort + 1}</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        };\r\n\r\n        const getConfigurationCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <Row>\r\n                        <Col xs=\"6\">\r\n                            <CardText>Selected cartridge: {this.props.fasterSoldering.cartridge}</CardText>\r\n                            <CardText>\r\n                                <strong>Selected temperature:</strong>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    defaultValue={this.props.selectedTemperature / 9}\r\n                                    onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                >\r\n                                    <option>425</option>\r\n                                    <option>400</option>\r\n                                    <option>375</option>\r\n                                    <option>350</option>\r\n                                    <option>325</option>\r\n                                    <option>300</option>\r\n                                </Input>\r\n                            </CardText>\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <img src={CartridgeImagePathByFullName(this.props.fasterSoldering.cartridge)} />\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredPlotsCard = () => {\r\n            let registeredPlots = this.props.detectedSolderings.map(x => {\r\n                let data: IRealTimeData[];\r\n                data = x.data.map(x => {\r\n                    return {\r\n                        temperature: x.temperature,\r\n                        power: x.power,\r\n                        toolStatus: x.toolStatus,\r\n                        isPortEnabled: x.isPortEnabled,\r\n                        isCalibrating: x.isCalibrating,\r\n                        isSoldering: x.isSoldering,\r\n                        tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"pr-opti-plot\">\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <CardText>Time: <strong>{x.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                                        <CardText>Energy: <strong>{x.solderingResult.energy} w·s</strong></CardText>\r\n                                        <CardText>Selected temperature: <strong>{x.selectedTemperature / 9} ºC</strong></CardText>\r\n                                    </Col>\r\n                                    <Col className=\"text-right\">\r\n                                        <a className=\"pointer\" onClick={() => this.props.handleDeleteRealTimeData(x.date)}>\r\n                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                        </a>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Plot2AxisSimple\r\n                                    plotData={data}\r\n                                    counterTenthSecond={x.data.length}\r\n                                    interval={Math.floor(x.data.length / 2)}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>);\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered processes</CardTitle>\r\n                        <Row xs={1} sm={2} md={3}>\r\n                            {registeredPlots}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (this.props.detectedSolderings.length === 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    <h4>Step 3 - Temperature selection</h4>\r\n                </Row>\r\n                <Row className=\"mb-1\">\r\n                    {getAlerts()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredPlotsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep4;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, ReferenceArea } from 'recharts';\r\nimport { CartridgeImagePathByFullName } from '../../../utils/cartridgeUtils';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    optimizedSoldering: IOptimizedSoldering,\r\n    selectedCartridge: string,\r\n    handleNextClick: () => void\r\n}\r\n\r\nclass ProcessOptimizationStep5 extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 5) {\r\n            return null\r\n        }\r\n\r\n        const getPlot = (temperature: number) => {\r\n            return (\r\n                <ResponsiveContainer width='100%' aspect={2.5}>\r\n                    <LineChart\r\n                        data={this.props.optimizedSoldering.points}\r\n                        margin={{\r\n                            left: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                        <XAxis\r\n                            dataKey=\"temperature\"\r\n                            height={50}\r\n                            padding={{ left: 30, right: 30 }}\r\n                            label=\"Temperature\"\r\n                            tickFormatter={(value) => Math.floor(value / 9)}\r\n                            domain={[250 * 9, 400 * 9]}\r\n                            ticks={[250 * 9, 300 * 9, 350 * 9, 400 * 9]}\r\n                            type=\"number\" />\r\n                        <YAxis\r\n                            orientation=\"left\"\r\n                            label=\"Tip life\"\r\n                            tickFormatter={(value) => value + \"x\"}\r\n                            domain={[0, 3]}\r\n                            ticks={[1, 2, 3]}\r\n                            type=\"number\" />\r\n    \r\n                        <Line dataKey=\"time\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                        <ReferenceArea\r\n                            x1={temperature - 20 * 9} x2={temperature + 20 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#fff8e1\" />\r\n                        <ReferenceArea\r\n                            x1={temperature + 20 * 9} x2={400 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ffebeb\" />\r\n                        <ReferenceArea\r\n                            x1={280 * 9} x2={temperature - 20 * 9}\r\n                            y1={0} y2={3}\r\n                            fill=\"#ebebff\" />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            );\r\n        }\r\n\r\n        const getOptimizedSolderingPlotCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody = getPlot(this.props.optimizedSoldering.recommended.temperature)\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Performance curve</CardTitle>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            let cardBody;\r\n            if (this.props.isLoading) {\r\n                cardBody = \r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>;\r\n            }\r\n            else {\r\n                cardBody =\r\n                    <Row>\r\n                        <Col xs=\"6\">\r\n                            <CardText>Cartridge: <strong>{this.props.selectedCartridge}</strong></CardText>\r\n\r\n                            <CardText>\r\n                                <strong>Optimized:</strong>\r\n                            </CardText>\r\n                            <CardText>Tip live: {this.props.optimizedSoldering.recommended.time}x</CardText>\r\n                            <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.recommended.temperature / 9)} ºC</CardText>\r\n\r\n                            <CardText>\r\n                                <strong>Better performance:</strong>\r\n                            </CardText>\r\n                            <CardText>Tip live: {this.props.optimizedSoldering.performance.time}x\r\n                            </CardText>\r\n                            <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.performance.temperature / 9)} ºC\r\n                            </CardText>\r\n\r\n                            <CardText>\r\n                                <strong>Better durability:</strong>\r\n                            </CardText>\r\n                            <CardText>Tip live: {this.props.optimizedSoldering.durability.time}x</CardText>\r\n                            <CardText>Temperature: {Math.floor(this.props.optimizedSoldering.durability.temperature / 9)} ºC\r\n                            </CardText>\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <img src={CartridgeImagePathByFullName(this.props.selectedCartridge)} />\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Performance result</CardTitle>\r\n                        {cardBody}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Start again</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>Process optimization</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"8\" className=\"pl-0\">\r\n                        {getOptimizedSolderingPlotCard()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"d-flex flex-column\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n           </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationStep5;\r\n","import * as React from 'react';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationStep1 from './ProcessOptimizationStep1';\r\nimport ProcessOptimizationStep2 from './ProcessOptimizationStep2';\r\nimport ProcessOptimizationStep3 from './ProcessOptimizationStep3';\r\nimport ProcessOptimizationStep4 from './ProcessOptimizationStep4';\r\nimport ProcessOptimizationStep5 from './ProcessOptimizationStep5';\r\n\r\ntype ProcessOptimizationProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleDeleteRealTimeData: (value: string) => void,\r\n    handleNextClick: () => void,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n\r\n    detectedSolderings: ISolderingData[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nclass ProcessOptimizationView extends React.PureComponent<ProcessOptimizationProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <ProcessOptimizationStep1\r\n                    currentStep={this.props.currentStep}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep2\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n                    isFormCorrect={this.props.isFormCorrect}\r\n                    \r\n                    stationControllers={this.props.stationControllers}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n                    \r\n                    handleStationClick={this.props.handleStationClick}\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep3\r\n                    currentStep={this.props.currentStep}\r\n                    \r\n                    selectedStation={this.props.selectedStation}\r\n                    selectedPort={this.props.selectedPort}\r\n                    selectedTool={this.props.selectedTool}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                    detectedSolderings={this.props.detectedSolderings}\r\n\r\n                    handleCartridgeChange={this.props.handleCartridgeChange}\r\n                    handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep4\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n\r\n                    selectedStation={this.props.selectedStation}\r\n                    selectedPort={this.props.selectedPort}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    counterTenthSecond={this.props.counterTenthSecond}\r\n\r\n                    detectedSolderings={this.props.detectedSolderings}\r\n                    fasterSoldering={this.props.fasterSoldering}\r\n\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleDeleteRealTimeData={this.props.handleDeleteRealTimeData}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <ProcessOptimizationStep5\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n\r\n                    optimizedSoldering={this.props.optimizedSoldering}\r\n                    selectedCartridge={this.props.selectedCartridge}\r\n\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ProcessOptimizationView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport AssistantService from '../../../services/assistant.service';\r\nimport ProcessOptimizationService from '../../../services/processOptimization.service';\r\nimport StationService from '../../../services/station.service';\r\nimport WorkService from '../../../services/work.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport { IOptimizedSoldering } from './data/IOptimizedSoldering';\r\nimport ProcessOptimizationView from './ProcessOptimizationView';\r\n\r\ntype ProcessOptimizationProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSolderings: ISolderingData[],\r\n    detectedSolderingsToRemove: string[],\r\n    fasterSoldering: ISolderingData,\r\n    optimizedSoldering: IOptimizedSoldering\r\n}\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass ProcessOptimization extends React.PureComponent<ProcessOptimizationProps, IState> {\r\n    constructor(props: ProcessOptimizationProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 2,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: 0,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSolderings: [],\r\n            detectedSolderingsToRemove: [],\r\n            fasterSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            },\r\n            optimizedSoldering: {\r\n                points: [],\r\n                recommended: {\r\n                    temperature: 0,\r\n                    time: 0\r\n                },\r\n                performance: {\r\n                    temperature: 0,\r\n                    time: 0\r\n                },\r\n                durability: {\r\n                    temperature: 0,\r\n                    time: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                this.applyDetectedSolderingsToRemove();\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !this.state.wasSoldering) {\r\n\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(this.state.registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = this.state.registeredData.length - nDataSoldering; i < this.state.registeredData.length; i++) {\r\n                                        data.push(this.state.registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: this.state.selectedCartridge,\r\n                                        selectedTemperature: this.state.selectedTemperature,\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                        return {\r\n                                            detectedSolderings: state.detectedSolderings.concat(soldering),\r\n                                            wasSoldering: true\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && this.state.wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                                let detectedSolderings = state.detectedSolderings;\r\n                                                let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                                let solderingResult = soldering.solderingResult;\r\n\r\n                                                solderingResult.energy = x.energy;\r\n                                                solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n                                                soldering.solderingResult = solderingResult;\r\n                                                soldering.cartridge = state.selectedCartridge;\r\n\r\n                                                detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n\r\n                                                return {\r\n                                                    detectedSolderings: detectedSolderings,\r\n                                                    wasSoldering: false\r\n                                                };\r\n                                            });\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                        let detectedSolderings = state.detectedSolderings;\r\n                                        let soldering = detectedSolderings[detectedSolderings.length - 1];\r\n                                        let data = soldering.data;\r\n\r\n                                        data.push(x);\r\n                                        soldering.data = data;\r\n\r\n                                        let solderingResult = soldering.solderingResult;\r\n                                        solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                        soldering.solderingResult = solderingResult;\r\n\r\n                                        detectedSolderings[detectedSolderings.length - 1] = soldering;\r\n\r\n                                        return {\r\n                                            detectedSolderings: detectedSolderings\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                                    let registeredData = state.registeredData.concat(x);\r\n                                    registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n\r\n                                    return {\r\n                                        registeredData: registeredData,\r\n                                        lastRealTimeData: x,\r\n                                        counterTenthSecond: state.counterTenthSecond + 1\r\n                                    };\r\n                                });\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            readyGetMoreData: true\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: ProcessOptimizationProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    applyDetectedSolderingsToRemove() {\r\n        if (this.state.detectedSolderingsToRemove.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n            return {\r\n                detectedSolderings:\r\n                    state.detectedSolderings\r\n                        .filter(x => !state.detectedSolderingsToRemove\r\n                            .some(r => r === x.date)),\r\n                detectedSolderingsToRemove: []\r\n            };\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleDeleteRealTimeData = (value: string) => {\r\n            this.setState((state: IState, props: ProcessOptimizationProps) => {\r\n                return {\r\n                    detectedSolderingsToRemove: state.detectedSolderingsToRemove.concat(value)\r\n                };\r\n            });\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId != -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n\r\n            if (this.state.currentStep == 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep == 2) {\r\n                this.setState({\r\n                    currentStep: 3,\r\n                    counterTenthSecond: 0,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 3) {\r\n                this.setState({\r\n                    currentStep: 4,\r\n                    isLoading: true,\r\n\r\n                    wasSoldering: false,\r\n                    detectedSolderings: []\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByCartridge(this.state.detectedSolderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            fasterSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 4) {\r\n                this.setState({\r\n                    currentStep: 5,\r\n                    isLoading: true\r\n                })\r\n\r\n                ProcessOptimizationService\r\n                    .getBetterOptimizationByTemperature(this.state.detectedSolderings)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            optimizedSoldering: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 5) {\r\n                this.setState({\r\n                    currentStep: 2,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ProcessOptimizationView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n                isFormCorrect={this.state.selectedStation.id != \"\" && this.state.selectedTemperature > 0}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleDeleteRealTimeData={handleDeleteRealTimeData}\r\n                handleNextClick={handleNextClick}\r\n\r\n                selectedStation={this.state.selectedStation}\r\n                selectedPort={this.state.selectedPort}\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                counterTenthSecond={this.state.counterTenthSecond}\r\n\r\n                detectedSolderings={this.state.detectedSolderings}\r\n                fasterSoldering={this.state.fasterSoldering}\r\n                optimizedSoldering={this.state.optimizedSoldering}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(ProcessOptimization);\r\n","import ProcessOptimization from './ProcessOptimization';\r\n\r\nexport default ProcessOptimization;\r\n","import PaginationNav from './PaginationNav';\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\n\r\ntype PaginationNavProps = {\r\n    totalElements: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    handlePageClick: (page: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass PaginationNav extends React.PureComponent<PaginationNavProps> {\r\n    public render() {\r\n        const getItems = (pageNumber: number, totalPages: number) => {\r\n            let items = [];\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        first\r\n                        disabled={pageNumber === 1}\r\n                        onClick={() => this.props.handlePageClick(1)} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        previous\r\n                        disabled={pageNumber === 1}\r\n                        onClick={this.props.handlePreviousPageClick} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            items.push(new Array(totalPages).fill(0).map((zero, index) =>\r\n                <PaginationItem active={pageNumber === index + 1}>\r\n                    <PaginationLink onClick={() => this.props.handlePageClick(index + 1)}>\r\n                        {index + 1}\r\n                    </PaginationLink>\r\n                </PaginationItem>\r\n            ));\r\n\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        next\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={this.props.handleNextPageClick} />\r\n                </PaginationItem>\r\n            );\r\n            items.push(\r\n                <PaginationItem>\r\n                    <PaginationLink\r\n                        last\r\n                        disabled={pageNumber === totalPages}\r\n                        onClick={() => this.props.handlePageClick(totalPages)} />\r\n                </PaginationItem>\r\n            );\r\n\r\n            return items;\r\n        }\r\n\r\n        let totalPages = Math.ceil(this.props.totalElements / this.props.pageSize);\r\n        let items = getItems(this.props.pageNumber, totalPages);\r\n\r\n        return (\r\n            <Pagination>\r\n                {items}\r\n            </Pagination>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PaginationNav;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\n\r\ntype PlotProps = {\r\n    plotData: number[]\r\n}\r\n\r\nclass PlotPowerAxisSimple extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        let plotDataObj = this.props.plotData.map((x) => {\r\n            return {power: x}\r\n        });\r\n\r\n\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={plotDataObj}\r\n                    margin={{\r\n                        left: -61,\r\n                        right: 0\r\n                    }}\r\n                >\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={0} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={['auto', 'auto']} />\r\n\r\n                    <Line dataKey=\"power\" yAxisId=\"left\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlotPowerAxisSimple;\r\n","import PlotPowerAxisSimple from './PlotPowerAxisSimple';\r\n\r\nexport default PlotPowerAxisSimple;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFile, faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as AssistantStore from '../../../store/Assistant';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\nimport PlotPowerAxisSimple from '../../content-parts/PlotPowerAxisSimple';\r\n\r\ntype SolderingAssistantProps = {\r\n    references: AssistantStore.Reference[],\r\n    nTotalReferences: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    deleteReference: (id: number) => void,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    showDeleteModal: boolean;\r\n    referenceIdToDelete: number;\r\n}\r\n\r\nclass SolderingAssistantView extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showDeleteModal: false,\r\n            referenceIdToDelete: -1\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListReferences = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.references) {\r\n                options.push(\r\n                    <tr>\r\n                        <td scope=\"row\">{value.id}</td>\r\n                        <td>\r\n                            <PlotPowerAxisSimple\r\n                                plotData={value.power}\r\n                            />\r\n                        </td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.cartridge}</td>\r\n                        <td>{value.temperature / 9}</td>\r\n                        <td>{value.durationTenthsSeconds / 10}</td>\r\n                        <td>\r\n                            <a href=\"#\" className=\"p-0\" onClick={(event) => handleDeleteClick(event, value.id)}>\r\n                                <FontAwesomeIcon icon={faTrashAlt} className=\"fa\"/>\r\n                            </a>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\" className=\"col-3\">Reference</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Cartridge</th>\r\n                            <th scope=\"col\">Temperature</th>\r\n                            <th scope=\"col\">Duration</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, id: number) => {\r\n            event.preventDefault();\r\n\r\n            this.setState({\r\n                referenceIdToDelete: id,\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteReference(this.state.referenceIdToDelete);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <h1>List of references</h1>\r\n\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4 float-right\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/processes/assistant/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardText>\r\n                                {getListReferences()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalReferences}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete reference</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the reference? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"danger\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"danger\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as AssistantStore from '../../../store/Assistant';\r\nimport AssistantService from '../../../services/assistant.service';\r\nimport SolderingAssistantView from './SolderingAssistantView';\r\n\r\ntype SolderingAssistantProps =\r\n    AssistantStore.AssistantState &\r\n    typeof AssistantStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean,\r\n    nTotalReferences: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass SolderingAssistant extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            nTotalReferences: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchReferences(this.props, this.state.pageNumber);\r\n    }\r\n\r\n    searchReferences(props: SolderingAssistantProps, pageNumber: number) {\r\n        props.deleteAllReferences();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber\r\n        })\r\n\r\n        AssistantService\r\n            .getReferences(pageNumber, this.state.pageSize)\r\n            .then(references => {\r\n                references.forEach((x: AssistantStore.Reference) =>\r\n                    props.createReference(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        AssistantService\r\n            .countReferences()\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalReferences: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleDeleteReference = (id: number) => {\r\n            AssistantService\r\n                .deleteReference(id)\r\n                .then(() =>\r\n                    this.searchReferences(\r\n                        this.props,\r\n                        this.state.pageNumber)\r\n                );\r\n        }\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchReferences(\r\n                this.props,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchReferences(\r\n                this.props,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchReferences(\r\n                this.props,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalReferences / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        return (\r\n            <SolderingAssistantView\r\n                references={this.props.references}\r\n                nTotalReferences={this.state.nTotalReferences}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                deleteReference={handleDeleteReference}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        references: state.assistant.references\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    AssistantStore.actionCreators\r\n)(SolderingAssistant);\r\n","import SolderingAssistant from './SolderingAssistant';\r\n\r\nexport default SolderingAssistant;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { LoadCartridges, ICartridge } from '../../../utils/cartridgeUtils';\r\nimport StationsPortList from '../../content-parts/StationsPortList';\r\n\r\ntype SolderingAssistantProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleNameChange: (value: string) => void,\r\n    handleNextClick: () => void\r\n}\r\n\r\ninterface IState {\r\n    cartridges: ICartridge[],\r\n    cartridgeImagePath: string\r\n}\r\n\r\nclass SolderingAssistantNewStep1 extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n        \r\n        let cartridgeImagePath = \"\";\r\n        let cartridges = LoadCartridges();\r\n\r\n        this.state = {\r\n            cartridges: cartridges,\r\n            cartridgeImagePath: cartridgeImagePath\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n        \r\n        const getListOptionsStationControllers = () => {\r\n            let filtered = this.props.stationControllers.map(sc => {\r\n                let stations = sc.stations.map(s => {\r\n                    let ports = s.ports.filter(p => p.tool === 1 || p.tool === 2);\r\n                    s.ports = ports;\r\n                    return s;\r\n                });\r\n                sc.stations = stations;\r\n                return sc;\r\n            });\r\n\r\n            return (\r\n                <StationsPortList\r\n                    isLoading={this.props.isLoading}\r\n                    stationControllers={filtered}\r\n                    handleStationClick={handleStationClick}\r\n                />\r\n            );\r\n        };\r\n\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.props.handleStationClick(station, port, tool);\r\n\r\n            let cartridgeImagePath = \"\";\r\n            let defaultCartridge = this.state.cartridges.find(x => x.isDefault && x.tool === tool);\r\n        \r\n            if (defaultCartridge !== undefined) {\r\n                cartridgeImagePath = defaultCartridge.img;\r\n                this.props.handleCartridgeChange(defaultCartridge.fullName);\r\n            }\r\n    \r\n            this.setState ({\r\n                cartridgeImagePath: cartridgeImagePath\r\n            });\r\n        }\r\n\r\n        const getCartridges = () => {\r\n            let cartridges = this.state.cartridges\r\n                .filter(x => x.tool === this.props.selectedTool)\r\n                .map(x => (\r\n                    <option selected={x.isDefault}>{x.fullName}</option>\r\n                ));\r\n\r\n            return cartridges;\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.props.handleCartridgeChange(value);\r\n            let cartridge = this.state.cartridges.find(x => x.fullName === value);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n\r\n            this.setState({\r\n                cartridgeImagePath: cartridgeImagePath\r\n            });\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>\r\n                                    <strong>Selected temperature:</strong>\r\n                                    <Input\r\n                                        defaultValue={this.props.selectedTemperature / 9}\r\n                                        onChange={(e) => this.props.handleSelecTempChange(e.target.value)}\r\n                                    />\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <strong>Selected cartridge:</strong>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        onChange={(e) => handleCartridgeChange(e.target.value)}\r\n                                    >\r\n                                        {getCartridges()}\r\n                                    </Input>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <strong>Name:</strong>\r\n                                    <Input\r\n                                        onChange={(e) => this.props.handleNameChange(e.target.value)}\r\n                                    />\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={this.state.cartridgeImagePath} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            if (!this.props.isFormCorrect) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Continue</Button>)\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New soldering reference</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"8\" className=\"pr-0\">\r\n                        <Card>\r\n                            <CardBody>\r\n                                <CardTitle>Stations available</CardTitle>\r\n                                <CardText>\r\n                                    {getListOptionsStationControllers()}\r\n                                </CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantNewStep1;\r\n","import * as React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport { SecToString } from '../../../utils/timeUtils';\r\n\r\ntype PlotProps = {\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\ninterface IRealTimeData {\r\n    temperature: number,\r\n    power: number\r\n}\r\n\r\nclass Plot2Axis extends React.PureComponent<PlotProps> {\r\n    public static defaultProps = {\r\n        showLabels: true\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={2.5}>\r\n                <LineChart\r\n                    data={this.props.plotData}\r\n                    margin={{\r\n                        left: -10,\r\n                        right: -10\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke=\"#e6e6e6\" />\r\n\r\n                    <XAxis\r\n                        dataKey=\"tick\"\r\n                        height={50}\r\n                        label={\"Time (s)\"}\r\n                        tickFormatter={(tick) => SecToString(Math.floor(tick / 10))}\r\n                        interval={this.props.interval} />\r\n                    <YAxis\r\n                        yAxisId=\"left\"\r\n                        orientation=\"left\"\r\n                        domain={[0, 400]} />\r\n                    <YAxis\r\n                        yAxisId=\"right\"\r\n                        orientation=\"right\"\r\n                        domain={[0, 100]} />\r\n\r\n                    <Line dataKey=\"temperature\" yAxisId=\"left\" type=\"monotone\" stroke=\"#dc3545\" dot={false} />\r\n                    <Line dataKey=\"power\" yAxisId=\"right\" type=\"monotone\" dot={false}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Plot2Axis;\r\n","import Plot2Axis from './Plot2Axis';\r\n\r\nexport default Plot2Axis;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { Card, CardBody, CardText, CardTitle } from 'reactstrap';\r\nimport { LoadCartridges } from '../../../utils/cartridgeUtils';\r\nimport Plot2Axis from '../../content-parts/Plot2Axis';\r\nimport PortStatusCard from '../../content-parts/PortStatusCard';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\n\r\ntype SolderingAssistantProps = {\r\n    currentStep: number,\r\n    lastRealTimeData: IRealTimeData,\r\n    detectedSoldering: ISolderingData,\r\n\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    handleNextClick: () => void,\r\n    handleSaveReferenceClick: () => void\r\n}\r\n\r\nclass SolderingAssistantNewStep2 extends React.PureComponent<SolderingAssistantProps> {\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getPortStatus = () => {\r\n            return <PortStatusCard portData={this.props.lastRealTimeData} />;\r\n        }\r\n\r\n        const getLastSoldering = () => {\r\n            let data: IRealTimeData[];\r\n            data = this.props.detectedSoldering.data.map(x => {\r\n                return {\r\n                    temperature: x.temperature / 9,\r\n                    power: x.power / 10,\r\n                    toolStatus: x.toolStatus,\r\n                    isPortEnabled: x.isPortEnabled,\r\n                    isCalibrating: x.isCalibrating,\r\n                    isSoldering: x.isSoldering,\r\n                    tenthsOfSecondSoldering: x.tenthsOfSecondSoldering\r\n                }\r\n            });\r\n\r\n            let registeredPlot =\r\n                <Plot2Axis\r\n                    plotData={data}\r\n                    counterTenthSecond={data.length}\r\n                    interval={Math.floor(data.length / 5)}\r\n                />;\r\n\r\n            let saveButton = \r\n                this.props.detectedSoldering.solderingResult.tenthsOfSecondSoldering === 0 ?\r\n                    \"\" :\r\n                    <Button\r\n                        color=\"danger\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={this.props.handleSaveReferenceClick}\r\n                    >Save reference</Button>;\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Last soldering</CardTitle>\r\n                        <CardText>Time: <strong>{this.props.detectedSoldering.solderingResult.tenthsOfSecondSoldering / 10} seconds</strong></CardText>\r\n                        <CardText>Energy: <strong>{this.props.detectedSoldering.solderingResult.energy} w·s</strong></CardText>\r\n                        {registeredPlot}\r\n                        {saveButton}\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            let cartridges = LoadCartridges();\r\n            let cartridge = cartridges.find(x => x.fullName === this.props.selectedCartridge);\r\n            let cartridgeImagePath = cartridge === undefined ? \"\" : cartridge.img;\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <CardText>Selected temperature: {this.props.selectedTemperature / 9} ºC</CardText>\r\n                                <CardText>Cartridge: {this.props.selectedCartridge}</CardText>\r\n                                <CardText>Name: {this.props.selectedName}</CardText>\r\n                            </Col>\r\n                            <Col xs=\"6\">\r\n                                <img src={cartridgeImagePath} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            return (\r\n                <Button\r\n                    outline\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={this.props.handleNextClick}\r\n                >Previous</Button>)\r\n        }\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New soldering reference</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getPortStatus()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"8\" className=\"pl-0\">\r\n                        {getLastSoldering()}\r\n                    </Col>\r\n                    <Col xs=\"4\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    {getNextButton()}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantNewStep2;\r\n","import * as React from 'react';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport SolderingAssistantNewStep1 from './SolderingAssistantNewStep1';\r\nimport SolderingAssistantNewStep2 from './SolderingAssistantNewStep2';\r\n\r\ntype SolderingAssistantProps = {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    isFormCorrect: boolean,\r\n\r\n    stationControllers: StationStore.StationController[],\r\n\r\n    lastRealTimeData: IRealTimeData,\r\n    detectedSoldering: ISolderingData,\r\n\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    handleStationClick: (station: StationStore.Station, port: number, tool: number) => void,\r\n    handleSelecTempChange: (temperature: string) => void,\r\n    handleCartridgeChange: (value: string) => void,\r\n    handleNameChange: (value: string) => void,\r\n    handleNextClick: () => void,\r\n    handleSaveReferenceClick: () => void\r\n}\r\n\r\nclass SolderingAssistantNewView extends React.PureComponent<SolderingAssistantProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <SolderingAssistantNewStep1\r\n                    currentStep={this.props.currentStep}\r\n                    isLoading={this.props.isLoading}\r\n                    isFormCorrect={this.props.isFormCorrect}\r\n                    \r\n                    stationControllers={this.props.stationControllers}\r\n                    \r\n                    selectedTool={this.props.selectedTool}\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n\r\n                    handleStationClick={this.props.handleStationClick}\r\n                    handleSelecTempChange={this.props.handleSelecTempChange}\r\n                    handleCartridgeChange={this.props.handleCartridgeChange}\r\n                    handleNameChange={this.props.handleNameChange}\r\n                    handleNextClick={this.props.handleNextClick}\r\n                />\r\n                <SolderingAssistantNewStep2\r\n                    currentStep={this.props.currentStep}\r\n                    lastRealTimeData={this.props.lastRealTimeData}\r\n                    detectedSoldering={this.props.detectedSoldering}\r\n\r\n                    selectedTemperature={this.props.selectedTemperature}\r\n                    selectedCartridge={this.props.selectedCartridge}\r\n                    selectedName={this.props.selectedName}\r\n\r\n                    handleNextClick={this.props.handleNextClick}\r\n                    handleSaveReferenceClick={this.props.handleSaveReferenceClick}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SolderingAssistantNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport AssistantService from '../../../services/assistant.service';\r\nimport StationService from '../../../services/station.service';\r\nimport WorkService from '../../../services/work.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ISolderingResult } from './data/ISolderingResult';\r\nimport { ISolderingData } from './data/ISolderingData';\r\nimport SolderingAssistantNewView from './SolderingAssistantNewView';\r\n\r\ntype SolderingAssistantProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n  & RouteComponentProps<{id: string}>;\r\n\r\ninterface IState {\r\n    currentStep: number,\r\n    isLoading: boolean,\r\n    timerSelectedTemp: number,\r\n\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n    selectedTool: number,\r\n    selectedTemperature: number,\r\n    selectedCartridge: string,\r\n    selectedName: string,\r\n\r\n    queueId: number,\r\n    registeredData: IRealTimeData[],\r\n    lastRealTimeData: IRealTimeData,\r\n    readyGetMoreData: boolean,\r\n\r\n    wasSoldering: boolean,\r\n    detectedSoldering: ISolderingData\r\n}\r\n\r\nconst WAIT_INTERVAL_SET_SELECTED_TEMP = 1000;\r\nconst MAX_POINTS_REGISTERED_DATA = 50;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 200;\r\n\r\nclass SolderingAssistantNew extends React.PureComponent<SolderingAssistantProps, IState> {\r\n    constructor(props: SolderingAssistantProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n            isLoading: true,\r\n            timerSelectedTemp: -1,\r\n\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n            selectedTool: -1,\r\n            selectedTemperature: 350 * 9,\r\n            selectedCartridge: \"\",\r\n            selectedName: \"\",\r\n\r\n            queueId: -1,\r\n            registeredData: [],\r\n            lastRealTimeData: {\r\n                temperature: 0,\r\n                power: 0,\r\n                toolStatus: 0,\r\n                isPortEnabled: true,\r\n                isCalibrating: false,\r\n                isSoldering: false,\r\n                tenthsOfSecondSoldering: 0\r\n            },\r\n            readyGetMoreData: true,\r\n\r\n            wasSoldering: false,\r\n            detectedSoldering: {\r\n                data: [],\r\n                solderingResult: {\r\n                    energy: 0,\r\n                    similarity: 0,\r\n                    tenthsOfSecondSoldering: 0\r\n                },\r\n                cartridge: \"\",\r\n                selectedTemperature: 0,\r\n                date: \"\"\r\n            }\r\n        }\r\n\r\n        this.searchStations(this.props);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        if (Array.isArray(values)) {\r\n                            values.forEach(x => {\r\n\r\n                                // raise flag\r\n                                if (x.isSoldering && !this.state.wasSoldering) {\r\n\r\n                                    let data: IRealTimeData[] = [];\r\n                                    let nDataSoldering = Math.min(this.state.registeredData.length, x.tenthsOfSecondSoldering);\r\n\r\n                                    for (var i = this.state.registeredData.length - nDataSoldering; i < this.state.registeredData.length; i++) {\r\n                                        data.push(this.state.registeredData[i]);\r\n                                    }\r\n\r\n                                    let soldering = {\r\n                                        data: data,\r\n                                        solderingResult: {\r\n                                            energy: 0,\r\n                                            similarity: 0,\r\n                                            tenthsOfSecondSoldering: 0\r\n                                        },\r\n                                        cartridge: \"\", //TODO\r\n                                        selectedTemperature: 0, //TODO\r\n                                        date: (new Date()).toString()\r\n                                    };\r\n\r\n                                    this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                        return {\r\n                                            detectedSoldering: soldering,\r\n                                            wasSoldering: true\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                // down flag\r\n                                if (!x.isSoldering && this.state.wasSoldering) {\r\n                                    AssistantService\r\n                                        .getSolderingResult(this.state.selectedStation.id, this.state.selectedPort)\r\n                                        .then((x: ISolderingResult) => {\r\n                                            this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                                let soldering = state.detectedSoldering;\r\n                                                let solderingResult = soldering.solderingResult;\r\n\r\n                                                solderingResult.energy = x.energy;\r\n                                                solderingResult.tenthsOfSecondSoldering = x.tenthsOfSecondSoldering;\r\n\r\n\r\n                                                return {\r\n                                                    detectedSoldering: soldering,\r\n                                                    wasSoldering: false\r\n                                                };\r\n                                            });\r\n                                        });\r\n                                }\r\n\r\n                                // soldering\r\n                                if (x.isSoldering) {\r\n                                    this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                        let soldering = state.detectedSoldering;\r\n                                        let data = soldering.data;\r\n\r\n                                        data.push(x);\r\n                                        soldering.data = data;\r\n\r\n                                        let solderingResult = soldering.solderingResult;\r\n                                        solderingResult.tenthsOfSecondSoldering = soldering.data.length;\r\n                                        soldering.solderingResult = solderingResult;\r\n\r\n                                        return {\r\n                                            detectedSoldering: soldering\r\n                                        };\r\n                                    });\r\n                                }\r\n\r\n                                this.setState((state: IState, props: SolderingAssistantProps) => {\r\n                                    let registeredData = state.registeredData.concat(x);\r\n                                    registeredData.splice(0, registeredData.length - MAX_POINTS_REGISTERED_DATA);\r\n\r\n                                    return {\r\n                                        registeredData: registeredData,\r\n                                        lastRealTimeData: x\r\n                                    };\r\n                                });\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            readyGetMoreData: true\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchStations(props: SolderingAssistantProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleStationClick = (station: StationStore.Station, port: number, tool: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port,\r\n                selectedTool: tool\r\n            })\r\n\r\n            setSelectedTemperatureRequest(station.id, port, this.state.selectedTemperature);\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, -1);\r\n\r\n            if (nValue < 0) {\r\n                return;\r\n            }\r\n\r\n            nValue *= 9\r\n\r\n            this.setState({\r\n                selectedTemperature: nValue\r\n            });\r\n\r\n            setSelectedTemperatureRequest(this.state.selectedStation.id, this.state.selectedPort, nValue);\r\n        }\r\n\r\n        const setSelectedTemperatureRequest = (stationId: string, port: number, temperature: number) => {\r\n            if (stationId === \"\" || port === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this.state.timerSelectedTemp > 0)\r\n                window.clearTimeout(this.state.timerSelectedTemp);\r\n\r\n            this.setState({\r\n                timerSelectedTemp: setTimeout(setSelectedTemperature, WAIT_INTERVAL_SET_SELECTED_TEMP, stationId, port, temperature)\r\n            });\r\n        }\r\n\r\n        const setSelectedTemperature = (stationId: string, port: number, temperature: number) => {\r\n            StationService.setSelectedTemperature(stationId, port, temperature);\r\n        }\r\n\r\n        const handleCartridgeChange = (value: string) => {\r\n            this.setState({\r\n                selectedCartridge: value\r\n            });\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            this.setState({\r\n                selectedName: value\r\n            });\r\n        }\r\n\r\n        const handleSaveReferenceClick = () => {\r\n            AssistantService\r\n                .generateReferenceSoldering(\r\n                    this.state.selectedStation.id,\r\n                    this.state.selectedPort,\r\n                    this.state.selectedName,\r\n                    this.state.selectedCartridge)\r\n                .then(() =>\r\n                    this.props.history.push(\"/processes/assistant\")\r\n                );\r\n        }\r\n\r\n        const handleNextClick = () => {\r\n            var queueId = this.state.queueId;\r\n\r\n            if (queueId != -1) {\r\n                this.setState({\r\n                    queueId: -1\r\n                })\r\n                WorkService.stopRealTimeData(this.state.selectedStation.id, queueId);\r\n            }\r\n\r\n\r\n            if (this.state.currentStep == 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else if (this.state.currentStep == 2) {\r\n                this.setState({\r\n                    currentStep: 1,\r\n                    isLoading: true\r\n                })\r\n\r\n                this.searchStations(this.props);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <SolderingAssistantNewView\r\n                currentStep={this.state.currentStep}\r\n                isLoading={this.state.isLoading}\r\n                isFormCorrect={this.state.selectedStation.id != \"\"}\r\n\r\n                stationControllers={this.props.stationControllers}\r\n\r\n                lastRealTimeData={this.state.lastRealTimeData}\r\n                detectedSoldering={this.state.detectedSoldering}\r\n\r\n                selectedTool={this.state.selectedTool}\r\n                selectedTemperature={this.state.selectedTemperature}\r\n                selectedCartridge={this.state.selectedCartridge}\r\n                selectedName={this.state.selectedName}\r\n\r\n                handleStationClick={handleStationClick}\r\n                handleSelecTempChange={handleSelecTempChange}\r\n                handleCartridgeChange={handleCartridgeChange}\r\n                handleNameChange={handleNameChange}\r\n                handleNextClick={handleNextClick}\r\n                handleSaveReferenceClick={handleSaveReferenceClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(SolderingAssistantNew);\r\n","import SolderingAssistantNew from './SolderingAssistantNew';\r\n\r\nexport default SolderingAssistantNew;\r\n","import Traceability from './Traceability';\r\n\r\nexport default Traceability;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\n\r\nclass Traceability extends React.PureComponent {\r\n    public render() {\r\n        const getTasks = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/optimization\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Access the list of registered jobs and create new tasks.\r\n                            </CardText>\r\n                            <CardTitle>Tasks</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        const getWorkProcess = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/assistant\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Register your work in the traceability system.\r\n                            </CardText>\r\n                            <CardTitle>Work process</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        const getWorkbenchs = () => {\r\n            return (\r\n                <NavLink tag={Link} to=\"/processes/assistant\">\r\n                    <Card className=\"box-shadow-v2\">\r\n                        <CardBody>\r\n                            <CardText>\r\n                                Manage workbenchs and connected stations.\r\n                            </CardText>\r\n                            <CardTitle>Workbenchs</CardTitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </NavLink>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"list-cards\">\r\n                <Row xs={1} sm={2} md={4}>\r\n                    <Col>{getTasks()}</Col>\r\n                    <Col>{getWorkProcess()}</Col>\r\n                    <Col>{getWorkbenchs()}</Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Traceability;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TasksService {\r\n    static async countTasks(filter) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTasks();\r\n        }\r\n        else {\r\n            count = RestService.countTasks(filter);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTasks(filter, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTasks();\r\n        }\r\n        else {\r\n            tasks = RestService.getTasks(filter, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskById();\r\n        }\r\n        else {\r\n            task = RestService.getTaskById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n\r\n    static async createTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.createTask();\r\n        }\r\n        else {\r\n            RestService.createTask(task);\r\n        }\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.updateTask();\r\n        }\r\n        else {\r\n            RestService.updateTask(task);\r\n        }\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        if (Configuration.FakeMode) {\r\n            FakeService.deleteTask();\r\n        }\r\n        else {\r\n            RestService.deleteTask(id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TasksService;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons'\r\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { faFile } from '@fortawesome/free-regular-svg-icons'\r\nimport * as TaskStore from '../../../store/Task';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\n\r\ntype TasksProps = {\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoading: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\nclass TasksView extends React.PureComponent<TasksProps> {\r\n\r\n    public render() {\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            const options = [];\r\n\r\n            for (const value of this.props.tasks) {\r\n                options.push(\r\n                    <tr>\r\n                        <td scope=\"row\">{value.id}</td>\r\n                        <td>{value.name}</td>\r\n                        <td>{value.timesPerformed}</td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + value.id + \"/detail\"}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + value.id + \"/edit\"}>\r\n                                <FontAwesomeIcon icon={faPen} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\"># of times performed</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <h1>List of Tasks</h1>\r\n\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4 float-right\">\r\n                        <NavLink tag={Link} className=\"p-0\" to=\"/traceability/task/new\">\r\n                            <FontAwesomeIcon icon={faFile} /> Create new\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TasksView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TasksView from './TasksView';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype TasksProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    timer: number,\r\n    isLoading: boolean,\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    filter: string\r\n}\r\n\r\nclass Tasks extends React.PureComponent<TasksProps, IState> {\r\n    constructor(props: TasksProps) {\r\n        super(props);\r\n        this.state = {\r\n            timer: -1,\r\n            isLoading: true,\r\n            nTotalTasks: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1,\r\n            filter: \"\"\r\n        };\r\n\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n    }\r\n\r\n    searchTasks(props: TasksProps, filter: string, pageNumber: number) {\r\n        props.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                tasks.forEach((x: TaskStore.Task) =>\r\n                    props.createTask(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks.bind(this), WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <TasksView\r\n                tasks={this.props.tasks}\r\n                nTotalTasks={this.state.nTotalTasks}\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n                isLoading={this.state.isLoading}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n                handleSearchFieldChange={handleSearchFieldChange}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    TaskStore.actionCreators\r\n)(Tasks);\r\n","import Tasks from './Tasks';\r\n\r\nexport default Tasks;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport { GetTools, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\n\r\ntype TaskNewProps = {\r\n    newTask: (task: TaskStore.Task) => void,\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n    toolImagePath: string;\r\n}\r\n\r\nclass TaskNewView extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        let task = {\r\n            id: 0,\r\n            name: \"\",\r\n            workConfig: {\r\n                tool: 1,\r\n                selectedTemp: 350 * 9,\r\n                changeSelectedTemp: false\r\n            },\r\n            timesPerformed: 0\r\n        }\r\n\r\n        this.state = {\r\n            task: task,\r\n            toolImagePath: ToolImagePath(task.workConfig.tool)\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n            \r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n            let newToolImagePath = ToolImagePath(newTask.workConfig.tool);\r\n\r\n            this.setState({\r\n                task: newTask,\r\n                toolImagePath: newToolImagePath\r\n            });\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            this.props.newTask(this.state.task);\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>New task</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Details</CardTitle>\r\n                            <CardText>\r\n                                <Row form>\r\n                                    <Col md=\"auto\" className=\"p-1\">Name:</Col>\r\n                                    <Col>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            onChange={(e) => handleNameChange(e.target.value)} />\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Configuration</CardTitle>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                className=\"danger\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    <CardImg src={this.state.toolImagePath} alt=\"No image available.\"/>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Create\r\n                    </Button>\r\n\r\n                    <Button color=\"danger\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to=\"/traceability/task\">Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskNewView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as TaskStore from '../../../store/Task';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TaskNewView from './TaskNewView';\r\n\r\ntype TaskNewProps = {\r\n}\r\n\r\ninterface IState {\r\n    redirect: string\r\n}\r\n\r\nclass TaskNew extends React.PureComponent<TaskNewProps, IState> {\r\n    constructor(props: TaskNewProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\"\r\n        };\r\n    }\r\n    \r\n    public render() {\r\n        const handleNewTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .createTask(task);\r\n            \r\n            this.setState({\r\n                redirect: \"/traceability/task\"\r\n            });\r\n        }\r\n\r\n        if (this.state.redirect.length > 0) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        \r\n        return (\r\n            <TaskNewView\r\n                newTask={handleNewTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    TaskStore.actionCreators\r\n)(TaskNew);\r\n","import TaskNew from './TaskNew';\r\n\r\nexport default TaskNew;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Button, CustomInput, Input } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport * as TaskStore from '../../../store/Task';\r\nimport { GetTools, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\n\r\ntype TaskEditProps = {\r\n    task: TaskStore.Task,\r\n    updateTask: (task: TaskStore.Task) => void,\r\n    deleteTask: (id: number) => void\r\n}\r\n\r\ninterface IState {\r\n    task: TaskStore.Task;\r\n    showDeleteModal: boolean;\r\n    toolImagePath: string;\r\n}\r\n\r\nclass TaskEditView extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            task: props.task,\r\n            showDeleteModal: false,\r\n            toolImagePath: ToolImagePath(props.task.workConfig.tool)\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const getListTools = () => {\r\n            let tools = GetTools();\r\n            return (\r\n                <Input type=\"select\" onChange={(e) => handleToolChange(e.target.value)}>\r\n                    {Object.entries(tools).map(([key, value]) => (\r\n                        <option value={key}>{value}</option>\r\n                    ))}\r\n                </Input>\r\n            )\r\n        }\r\n\r\n        const getDeleteButton = () => {\r\n            if (this.props.task.timesPerformed > 0) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4\">\r\n                    <a href=\"#\" className=\"p-0\" onClick={(event) => handleDeleteClick(event)}>\r\n                        <FontAwesomeIcon icon={faTrashAlt} className=\"pr-1\"/> Delete task\r\n                    </a>\r\n                </Button>\r\n            )\r\n        }\r\n\r\n        const handleNameChange = (value: string) => {\r\n            let newTask = this.state.task;\r\n            newTask.name = value;\r\n            \r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleModifySelecTempChange = (value: boolean) => {\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.changeSelectedTemp = value;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleSelecTempChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            nValue *= 9;\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.selectedTemp = nValue;\r\n\r\n            this.setState({\r\n                task: newTask\r\n            });\r\n        }\r\n\r\n        const handleToolChange = (value: string) => {\r\n            let nValue = TryParseInt(value, null);\r\n\r\n            if (nValue == null) {\r\n                return\r\n            }\r\n\r\n            let newTask = this.state.task;\r\n            newTask.workConfig.tool = nValue;\r\n            let newToolImagePath = ToolImagePath(newTask.workConfig.tool);\r\n\r\n            this.setState({\r\n                task: newTask,\r\n                toolImagePath: newToolImagePath\r\n            });\r\n        }\r\n\r\n        const handleConfirmClick = () => {\r\n            if (this.state.task === undefined) {\r\n                return;\r\n            }\r\n\r\n            this.props.updateTask(this.state.task);\r\n        };\r\n\r\n        const handleDeleteClick = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n            event.preventDefault();\r\n            this.setState({\r\n                showDeleteModal: true\r\n            });\r\n        };\r\n\r\n        const handleDeleteConfirmClick = () => {\r\n            this.props.deleteTask(this.state.task.id);\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        const handleDeleteCancelClick = () => {\r\n            this.setState({\r\n                showDeleteModal: false\r\n            });\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.state.task.name}</h1>\r\n                    {getDeleteButton()}\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Details</CardTitle>\r\n                            <CardText>Code: {this.state.task.id}</CardText>\r\n                            <CardText>\r\n                                <Row form>\r\n                                    <Col md=\"auto\" className=\"p-1\">Name:</Col>\r\n                                    <Col>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            defaultValue={this.state.task.name}\r\n                                            onChange={(e) => handleNameChange(e.target.value)} />\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Configuration</CardTitle>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">Tool:</Col>\r\n                                        <Col>{getListTools()}</Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                <CardText>\r\n                                    <Row form>\r\n                                        <Col md=\"auto\" className=\"p-1\">\r\n                                            <CustomInput\r\n                                                type=\"checkbox\"\r\n                                                className=\"danger\"\r\n                                                id=\"taskChangeSelectedTemp\"\r\n                                                label=\"Selected temperature\"\r\n                                                defaultChecked={this.state.task.workConfig.changeSelectedTemp}\r\n                                                onChange={(e) => handleModifySelecTempChange(e.target.checked)}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                pattern=\"[0-9]*\"\r\n                                                defaultValue={this.state.task.workConfig.selectedTemp / 9}\r\n                                                onChange={(e) => handleSelecTempChange(e.target.value)} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardText>\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    <CardImg src={this.state.toolImagePath} alt=\"No image available.\"/>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2\" onClick={() => handleConfirmClick()}>\r\n                        Confirm\r\n                    </Button>\r\n\r\n                    <Button color=\"danger\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/traceability/task/\" + this.state.task.id + \"/detail\"}>Cancel</NavLink>\r\n                    </Button>\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showDeleteModal} toggle={() => handleDeleteCancelClick()}>\r\n                    <ModalHeader toggle={() => handleDeleteCancelClick()}>Delete task</ModalHeader>\r\n                    <ModalBody>Are you sure to delete the task? This action can not be undone.</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"danger\" onClick={() => handleDeleteConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"danger\" onClick={() => handleDeleteCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskEditView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport TaskEditView from './TaskEditView';\r\n\r\ntype TaskEditProps =\r\n    TaskStore.TaskState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{id: string}>;\r\n\r\ninterface IState {\r\n    id: number,\r\n    isLoading: boolean\r\n}\r\n\r\nclass TaskEdit extends React.PureComponent<TaskEditProps, IState> {\r\n    constructor(props: TaskEditProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n    }\r\n\r\n    searchTask(props: TaskEditProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x => {\r\n                props.createTask(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleUpdateTask = (task: TaskStore.Task) => {\r\n            TasksService\r\n                .updateTask(task)\r\n                .then(() =>\r\n                    this.props.history.push(\"/traceability/task/\" + this.state.id + \"/detail\")\r\n                );\r\n        }\r\n\r\n        const handleDeleteTask = (id: number) => {\r\n            TasksService\r\n                .deleteTask(id)\r\n                .then(() =>\r\n                    this.props.history.push(\"/traceability/task\")\r\n                );\r\n        }\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id == this.state.id);\r\n\r\n        if (task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        return (\r\n            <TaskEditView\r\n                task={task}\r\n                updateTask={handleUpdateTask}\r\n                deleteTask={handleDeleteTask}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.task,\r\n    TaskStore.actionCreators\r\n)(TaskEdit);\r\n","import TaskEdit from './TaskEdit';\r\n\r\nexport default TaskEdit;\r\n","import Configuration from '../configuration';\r\nimport FakeService from './fake.service';\r\nimport RestService from './restService';\r\n\r\nclass TaskHistoriessService {\r\n    static async countTaskHistories(taskId) {\r\n        let count;\r\n\r\n        if (Configuration.FakeMode) {\r\n            count = FakeService.countTaskHistories();\r\n        }\r\n        else {\r\n            count = RestService.countTaskHistories(taskId);\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    static async getTaskHistories(id, pageNumber, pageSize) {\r\n        let tasks;\r\n\r\n        if (Configuration.FakeMode) {\r\n            tasks = FakeService.getTaskHistories(id);\r\n\r\n        }\r\n        else {\r\n            tasks = RestService.getTaskHistories(id, pageNumber, pageSize);\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    static async getTaskHistoryById(id) {\r\n        let task;\r\n\r\n        if (Configuration.FakeMode) {\r\n            task = FakeService.getTaskHistoryById(id);\r\n\r\n        }\r\n        else {\r\n            task = RestService.getTaskHistoryById(id);\r\n        }\r\n\r\n        return task;\r\n    }\r\n}\r\n\r\nexport default TaskHistoriessService;\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle, faEye, faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport { ToolToString, ToolImagePath } from '../../../utils/toolUtils';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\n\r\ntype TaskDetailProps = {\r\n    task: TaskStore.Task | undefined,\r\n    taskHistories: TaskHistoryStore.TaskHistory[],\r\n    nTotalTaskHistories: number,\r\n\r\n    pageSize: number,\r\n    pageNumber: number,\r\n\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void\r\n}\r\n\r\nclass TaskDetailView extends React.PureComponent<TaskDetailProps> {\r\n    public render() {\r\n        if (this.props.isLoadingTask) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n\r\n        if (this.props.task === undefined) {\r\n            return \"No item found.\";\r\n        }\r\n\r\n        const getDetailsCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            const COLORS = ['#00C49F', '#dc3545'];\r\n\r\n            let correct = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType === 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            let incorrect = this.props.taskHistories.reduce(((total, x) =>\r\n                total + x.workData.workSolderings.reduce(((total2, x2) =>\r\n                    total2 + ((x2.solderingType !== 0) ? 1 : 0)\r\n                ), 0)\r\n            ), 0);\r\n\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            let stationDetail =\r\n                <Row className=\"h-100\">\r\n                    <Col xs=\"6\">\r\n                        <CardText>Code: {this.props.task.id}</CardText>\r\n                        <CardText># of times performed: {this.props.task.timesPerformed}</CardText>\r\n                    </Col>\r\n                    <Col xs=\"6\">\r\n                        <ResponsiveContainer>\r\n                            <PieChart>\r\n                                <Pie\r\n                                    data={data}\r\n                                    dataKey=\"value\"\r\n                                >\r\n                                    {\r\n                                        data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                                    }\r\n                                </Pie>\r\n                            </PieChart>\r\n                        </ResponsiveContainer>\r\n                    </Col>\r\n                </Row>\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            if (this.props.task === undefined) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                        <Col xs=\"8\">\r\n                            <CardText>Tool: {ToolToString(this.props.task.workConfig.tool)}</CardText>\r\n                                <CardText>\r\n                                    Selected temperature:{\" \"}\r\n                                    {this.props.task.workConfig.changeSelectedTemp ?\r\n                                        Math.floor(this.props.task.workConfig.selectedTemp / 9) + \" ºC\" : \" No change\"}\r\n                                </CardText>\r\n                            </Col>\r\n                            <Col xs=\"4\">\r\n                                <CardImg\r\n                                    src={ToolImagePath(this.props.task.workConfig.tool)}\r\n                                    alt={ToolToString(this.props.task.workConfig.tool)} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getListHistoryTasks = () => {\r\n            if (this.props.task === undefined)\r\n                return \"\";\r\n\r\n            if (this.props.isLoadingHistories) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let items = [];\r\n\r\n            for (const value of this.props.taskHistories) {\r\n                let circleLight = \"circle-light-\" + (value.workData.workSolderings.filter(x => x.solderingType === 1).length === 0 ? \"0\" : \"1\")\r\n\r\n                items.push(\r\n                    <tr>\r\n                        <td scope=\"row\">{value.id}</td>\r\n                        <td>{new Date(value.finishDate).toLocaleDateString('es-ES')}</td>\r\n                        <td>\r\n                            <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"}/>\r\n                        </td>\r\n                        <td>\r\n                            <NavLink tag={Link} className=\"pr-2 d-inline\" to={\"/traceability/task/\" + this.props.task.id + \"/history/\" + value.id}>\r\n                                <FontAwesomeIcon icon={faEye} className=\"fa\" />\r\n                            </NavLink>\r\n                        </td>\r\n                    </tr>)\r\n            }\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Id</th>\r\n                            <th scope=\"col\">Finished date</th>\r\n                            <th scope=\"col\">Detected defects</th>\r\n                            <th scope=\"col\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.props.task.name}</h1>\r\n\r\n                    <Button outline color=\"danger\" size=\"sm\" className=\"m-2 ml-4 float-right\">\r\n                        <NavLink tag={Link} className=\"p-0\" to={\"/traceability/task/\" + this.props.task.id + \"/edit\"}>\r\n                            <FontAwesomeIcon icon={faPen} className=\"pr-1\" /> Edit task\r\n                        </NavLink>\r\n                    </Button>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Task history ({this.props.nTotalTaskHistories} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListHistoryTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTaskHistories}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskDetailView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport TaskDetailView from './TaskDetailView';\r\n\r\ntype TaskDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n  & TaskHistoryStore.TaskHistoryState\r\n  & RouteComponentProps<{ id: string }>\r\n\r\ninterface IState {\r\n    id: number,\r\n    isLoadingTask: boolean,\r\n    isLoadingHistories: boolean,\r\n    nTotalTaskHistories: number,\r\n    pageSize: number,\r\n    pageNumber: number\r\n}\r\n\r\nclass TaskDetail extends React.PureComponent<TaskDetailProps, IState> {\r\n    constructor(props: TaskDetailProps) {\r\n        super(props);\r\n        const id = TryParseInt(this.props.match.params['id'], 0);\r\n\r\n        this.state = {\r\n            id: id,\r\n            isLoadingTask: true,\r\n            isLoadingHistories: true,\r\n            nTotalTaskHistories: 0,\r\n            pageSize: 25,\r\n            pageNumber: 1\r\n        };\r\n\r\n        this.searchTask(this.props, id);\r\n        this.searchTaskHistories(this.props, id, this.state.pageNumber);\r\n    }\r\n\r\n    searchTask(props: TaskDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x => {\r\n                props.taskActions.createTask(x)\r\n                \r\n                this.setState({\r\n                    isLoadingTask: false\r\n                })\r\n            });\r\n    }\r\n\r\n    searchTaskHistories(props: TaskDetailProps, id: string, pageNumber: number) {\r\n        props.taskHistoryActions.deleteAllTaskHistories();\r\n\r\n        TaskHistoriesService\r\n            .getTaskHistories(id, pageNumber, this.state.pageSize)\r\n            .then(taskHistories => {\r\n                taskHistories.forEach((x: TaskHistoryStore.TaskHistory) =>\r\n                    props.taskHistoryActions.createTaskHistory(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoadingHistories: false,\r\n                    pageNumber: pageNumber\r\n                })\r\n            });\r\n\r\n        TaskHistoriesService\r\n            .countTaskHistories(id)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTaskHistories: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTaskHistories(\r\n                this.props,\r\n                this.state.id.toString(),\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTaskHistories / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const task = this.props.tasks.find(x => x.id == this.state.id);\r\n        const taskHistories = this.props.taskHistories;\r\n\r\n        return (\r\n            <TaskDetailView\r\n                task={task}\r\n                taskHistories={taskHistories}\r\n                nTotalTaskHistories={this.state.nTotalTaskHistories}\r\n\r\n                pageSize={this.state.pageSize}\r\n                pageNumber={this.state.pageNumber}\r\n\r\n                isLoadingTask={this.state.isLoadingTask}\r\n                isLoadingHistories={this.state.isLoadingHistories}\r\n\r\n                handlePageClick={handlePageClick}\r\n                handlePreviousPageClick={handlePreviousPageClick}\r\n                handleNextPageClick={handleNextPageClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskDetail);\r\n","import TaskDetail from './TaskDetail';\r\n\r\nexport default TaskDetail;\r\n","export function GetPlotSeriesData(temperature, power) {\r\n    let plotData = [];\r\n\r\n    for (var i = 0; i < temperature.length; i++) {\r\n        plotData.push({\r\n            tick: i,\r\n            temperature: temperature[i] / 9,\r\n            power: power[i] / 10\r\n        });\r\n    }\r\n\r\n    return plotData;\r\n}\r\n\r\nexport function EmptyPlotSeriesData(maxPLotPoints) {\r\n    let data = [];\r\n\r\n    for (var i = 0; i < maxPLotPoints; i++) {\r\n        data.push({\r\n            tick: -1,\r\n            temperature: 0,\r\n            power: 0,\r\n            toolStatus: 0,\r\n            isPortEnabled: true,\r\n            isCalibrating: false,\r\n            isSoldering: false,\r\n            tenthsOfSecondSoldering: 0\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function PushPlotSeriesData(data, realTimeData, maxPLotPoints = 100) {\r\n    data.push({\r\n        tick: data.length > 0 ? data[data.length - 1].tick + 1 : 0,\r\n        temperature: realTimeData.temperature / 9,\r\n        power: realTimeData.power / 10,\r\n        toolStatus: realTimeData.toolStatus,\r\n        isPortEnabled: realTimeData.isPortEnabled,\r\n        isCalibrating: realTimeData.isCalibrating,\r\n        isSoldering: realTimeData.isSoldering\r\n    });\r\n\r\n    if (maxPLotPoints > 0 && maxPLotPoints < data.length) {\r\n        data.splice(0, data.length - maxPLotPoints);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Button, NavLink } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport { ToolToString, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { GetPlotSeriesData } from '../../../utils/plotUtils';\r\nimport { ClassificationToString } from '../../../utils/solderingClassificationUtils';\r\nimport Plot2Axis from '../../content-parts/Plot2Axis';\r\nimport PlotPowerAxisSimple from '../../content-parts/PlotPowerAxisSimple';\r\nimport './TaskHistoryDetail.css';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    task: TaskStore.Task,\r\n    taskHistory: TaskHistoryStore.TaskHistory\r\n}\r\n\r\nclass TaskHistoryDetailView extends React.PureComponent<TaskHistoryDetailProps> {\r\n    public render() {\r\n        const getDetailsCard = () => {\r\n            const COLORS = ['#00C49F', '#dc3545'];\r\n\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n\r\n            let correct = workSolderings.filter(x => x.solderingType === 0).length;\r\n            let incorrect = workSolderings.length - correct;\r\n\r\n            const data = [\r\n                { name: 'Correct', value: correct },\r\n                { name: 'Incorrect', value: incorrect }\r\n            ];\r\n\r\n            let stationDetail =\r\n                <Row>\r\n                    <Col xs=\"6\">\r\n                        <CardText>Finished date: {new Date(this.props.taskHistory.finishDate).toLocaleDateString('es-ES')}</CardText>\r\n                        <CardText>Task name: {this.props.task.name}</CardText>\r\n                        <CardText>Task code: {this.props.task.id}</CardText>\r\n                        <CardText>Station Id: {this.props.taskHistory.workData.stationId}</CardText>\r\n                        <CardText>Station name: {this.props.taskHistory.workData.stationName}</CardText>\r\n                        <CardText>Port: {this.props.taskHistory.workData.stationPort + 1}</CardText>\r\n                    </Col>\r\n                    <Col xs=\"6\">\r\n                        <ResponsiveContainer>\r\n                            <PieChart>\r\n                                <Pie\r\n                                    data={data}\r\n                                    dataKey=\"value\"\r\n                                >\r\n                                    {\r\n                                        data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                                    }\r\n                                </Pie>\r\n                            </PieChart>\r\n                        </ResponsiveContainer>\r\n                    </Col>\r\n                </Row>\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        {stationDetail}\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {card}\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        const getConfigurationCard = () => {\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Configuration</CardTitle>\r\n                        <Row>\r\n                            <Col xs=\"8\">\r\n                                <CardText>Tool: {ToolToString(this.props.taskHistory.workConfig.tool)}</CardText>\r\n                                {this.props.taskHistory.workConfig.change_selected_temp ?\r\n                                    <CardText>Selected temperature: {this.props.taskHistory.workConfig.selected_temp / 9} ºC </CardText>: \"\"}\r\n                            </Col>\r\n                            <Col xs=\"4\">\r\n                                <CardImg\r\n                                    src={ToolImagePath(this.props.taskHistory.workConfig.tool)}\r\n                                    alt={ToolToString(this.props.taskHistory.workConfig.tool)} />\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getRegisteredDataCard = () => {\r\n            let plotData = GetPlotSeriesData(this.props.taskHistory.workData.temperature, this.props.taskHistory.workData.power);\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Registered data</CardTitle>\r\n                        <CardText className=\"p-3\">\r\n                            <Plot2Axis\r\n                                plotData={plotData}\r\n                                counterTenthSecond={plotData.length}\r\n                                interval={Math.floor(plotData.length / 5)}\r\n                            />\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        const getSolderingsCard = () => {\r\n            let workSolderings = this.props.taskHistory.workData.workSolderings;\r\n\r\n            let registeredSolderings = workSolderings.map(x => {\r\n                let circleLight = \"circle-light-\" + (x.solderingType === 0 ? \"0\" : \"1\")\r\n\r\n                return (\r\n                    <Col>\r\n                        <Card className=\"pr-opti-plot\">\r\n                            <CardBody>\r\n                                <CardText>\r\n                                    Detected defect: <FontAwesomeIcon icon={faCircle} className={circleLight + \" pl-1\"}/>\r\n                                    <strong className=\"pl-1\">{ClassificationToString(x.solderingType)}</strong>\r\n                                </CardText>\r\n                                <PlotPowerAxisSimple\r\n                                    plotData={x.power}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Detected solderings</CardTitle>\r\n                        <Row xs={1} sm={2} md={3}>\r\n                            {registeredSolderings}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-1\">\r\n                    <h1>{this.props.task.name}</h1>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Col xs=\"6\" className=\"pl-0\">\r\n                        {getDetailsCard()}\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"pl-0 pr-0\">\r\n                        {getConfigurationCard()}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    {getSolderingsCard()}\r\n                </Row>\r\n                <Row>\r\n                    {getRegisteredDataCard()}\r\n                </Row>\r\n                <Row>\r\n                    <Button color=\"danger\" size=\"sm\" className=\"m-2\">\r\n                        <NavLink\r\n                            tag={Link}\r\n                            className=\"text-white p-0\"\r\n                            to={\"/traceability/task/\" + this.props.task.id + \"/detail\"}>Return</NavLink>\r\n                    </Button>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TaskHistoryDetailView;\r\n","export function GetClassifications()\r\n{\r\n    var values =\r\n    {\r\n        0: \"Correct\",\r\n        1: \"Low thermal contact\",\r\n        2: \"Slow soldering\",\r\n        3: \"Fact soldering\",\r\n        4: \"Oscillations\",\r\n        5: \"Excess tin\",\r\n        6: \"Little tin\"\r\n    }\r\n    return values;\r\n}\r\n\r\nexport function ClassificationToString(id)\r\n{\r\n    let value = GetClassifications()[id];\r\n\r\n    if (typeof(value) === \"undefined\") {\r\n        return \"Undefined\";\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as TaskHistoryStore from '../../../store/TaskHistory';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport TaskHistoriesService from '../../../services/taskHistories.service';\r\nimport { TryParseInt } from '../../../utils/numberUtils';\r\nimport TaskHistoryDetailView from './TaskHistoryDetailView';\r\n\r\ntype TaskHistoryDetailProps = {\r\n    taskActions: typeof TaskStore.actionCreators,\r\n    taskHistoryActions: typeof TaskHistoryStore.actionCreators,\r\n} & TaskStore.TaskState\r\n  & TaskHistoryStore.TaskHistoryState\r\n  & RouteComponentProps<{ taskId: string, historyId: string }>\r\n\r\ninterface IState {\r\n    taskId: number,\r\n    taskHistoryId: number,\r\n    isLoading: boolean\r\n}\r\n\r\nclass TaskHistoryDetail extends React.PureComponent<TaskHistoryDetailProps, IState> {\r\n    constructor(props: TaskHistoryDetailProps) {\r\n        super(props);\r\n        const taskId = TryParseInt(this.props.match.params['taskId'], 0);\r\n        const taskHistoryId = TryParseInt(this.props.match.params['historyId'], 0);\r\n\r\n        this.state = {\r\n            taskId: taskId,\r\n            taskHistoryId: taskHistoryId,\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchTask(this.props, taskId);\r\n        this.searchTaskHistories(this.props, taskHistoryId);\r\n    }\r\n\r\n    searchTask(props: TaskHistoryDetailProps, id: string) {\r\n        TasksService\r\n            .getTaskById(id)\r\n            .then(x =>\r\n                props.taskActions.createTask(x)\r\n            );\r\n    }\r\n\r\n    searchTaskHistories(props: TaskHistoryDetailProps, id: string) {\r\n        TaskHistoriesService\r\n            .getTaskHistoryById(id)\r\n            .then(x => {\r\n                props.taskHistoryActions.createTaskHistory(x)\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const task = this.props.tasks.find(x => x.id == this.state.taskId);\r\n        const taskHistory = this.props.taskHistories.find(x => x.id == this.state.taskHistoryId);\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n\r\n        if (task === undefined || taskHistory === undefined) {\r\n            return \"No item founded.\";\r\n        }\r\n\r\n        return (\r\n            <TaskHistoryDetailView\r\n                task={task}\r\n                taskHistory={taskHistory}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        tasks: state.task.tasks,\r\n        taskHistories: state.taskHistory.taskHistories\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\r\n    return {\r\n        taskActions: bindActionCreators(TaskStore.actionCreators, dispatch),\r\n        taskHistoryActions: bindActionCreators(TaskHistoryStore.actionCreators, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TaskHistoryDetail);\r\n","import TaskHistoryDetail from './TaskHistoryDetail';\r\n\r\nexport default TaskHistoryDetail;\r\n","import * as React from 'react';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\n\r\ntype StationsProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    isLoading: boolean\r\n}\r\n\r\nclass StationListSideView extends React.PureComponent<StationsProps> {\r\n    public render() {\r\n        let items = [];\r\n        items.push(<ListGroupItem className=\"level-0\">Stations</ListGroupItem>);\r\n        \r\n        if (this.props.isLoading) {\r\n            items.push(\r\n                <div className=\"text-center mt-3\">\r\n                    <Spinner color=\"danger\"/>\r\n                </div>);\r\n        }\r\n        else {\r\n            for (const sc of this.props.stationControllers) {\r\n                items.push(<ListGroupItem className=\"level-1\"><strong>{sc.name}</strong></ListGroupItem>)\r\n\r\n                for (const s of sc.stations) {\r\n                    items.push(<ListGroupItem className=\"level-2\">{s.name} [{s.model}]</ListGroupItem>)\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ListGroup className=\"station-list\">{items}</ListGroup>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StationListSideView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport StationService from '../../../services/station.service';\r\nimport StationListSideView from './StationListSideView';\r\n\r\ntype StationsProps = {\r\n    stationControllers: StationStore.StationController[]\r\n} & typeof StationStore.actionCreators\r\n\r\ninterface IState {\r\n    isLoading: boolean\r\n}\r\n\r\nclass StationListSide extends React.PureComponent<StationsProps, IState> {\r\n    constructor(props: StationsProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n    }\r\n\r\n    searchStations(props: StationsProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <StationListSideView\r\n                stationControllers={this.props.stationControllers}\r\n                isLoading={this.state.isLoading}\r\n            />\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(StationListSide);\r\n","import StationListSide from './StationListSide';\r\n\r\nexport default StationListSide;\r\n","import * as React from 'react';\r\nimport { Input } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\nimport PaginationNav from '../../content-components/PaginationNav';\r\n\r\ntype WorkProcessProps = {\r\n    currentStep: number,\r\n    tasks: TaskStore.Task[],\r\n    nTotalTasks: number,\r\n    pageSize: number,\r\n    pageNumber: number,\r\n    isLoadingTasks: boolean,\r\n\r\n    handlePageClick: (pageNumber: number) => void,\r\n    handlePreviousPageClick: () => void,\r\n    handleNextPageClick: () => void,\r\n    handleTaskClick: (task: TaskStore.Task) => void,\r\n    handleSearchFieldChange: (text: string) => void\r\n}\r\n\r\ninterface IState {\r\n    taskFilter: string[]\r\n}\r\n\r\nclass WorkProcessStep1 extends React.PureComponent<WorkProcessProps, IState> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n        this.state = {\r\n            taskFilter: []\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 1) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsTasks = () => {\r\n            if (this.props.isLoadingTasks) {\r\n                return (\r\n                    <div className=\"text-center\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.tasks.map(x => (\r\n                    <tr onClick={() => this.props.handleTaskClick(x)}>\r\n                        <td scope=\"row\">{x.id}</td>\r\n                        <td>{x.name}</td>\r\n                        <td>{ToolToString(x.workConfig.tool)}</td>\r\n                    </tr>\r\n                ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Code</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-4\">\r\n                    <InputGroup>\r\n                        <InputGroupAddon addonType=\"prepend\">Search</InputGroupAddon>\r\n                        <Input onChange={(e) => this.props.handleSearchFieldChange(e.target.value)} />\r\n                    </InputGroup>\r\n                </Row>\r\n                <Row className=\"mb-3\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Search result ({this.props.nTotalTasks} elements)</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsTasks()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <PaginationNav\r\n                        totalElements={this.props.nTotalTasks}\r\n                        pageSize={this.props.pageSize}\r\n                        pageNumber={this.props.pageNumber}\r\n                        handlePageClick={this.props.handlePageClick}\r\n                        handlePreviousPageClick={this.props.handlePreviousPageClick}\r\n                        handleNextPageClick={this.props.handleNextPageClick}\r\n                    />\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep1;\r\n","import * as React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\nimport { ToolToString } from '../../../utils/toolUtils';\r\n\r\ntype WorkProcessProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    taskTool: number,\r\n    currentStep: number,\r\n    handleStationClick: (station: StationStore.Station, port: number) => void\r\n}\r\n\r\nclass WorkProcessStep2 extends React.PureComponent<WorkProcessProps> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 2) {\r\n            return null\r\n        }\r\n\r\n        const getListOptionsStationControllers = () => {\r\n            let options =\r\n                this.props.stationControllers\r\n                    .filter(sc => (\r\n                        sc.stations.some(s => (\r\n                            s.ports.some(p => (\r\n                                p.tool == this.props.taskTool\r\n                            ))\r\n                        ))\r\n                    ))\r\n                    .map(sc => (\r\n                        sc.stations.map(s => (\r\n                            s.ports\r\n                            .filter(p => (\r\n                                p.tool == this.props.taskTool\r\n                            ))\r\n                            .map(p => (\r\n                                <tr onClick={() => this.props.handleStationClick(s, p.id)}>\r\n                                    <td scope=\"row\">{s.name}</td>\r\n                                    <td>{p.id + 1}</td>\r\n                                    <td>{ToolToString(p.tool)}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ))\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Station name</th>\r\n                            <th scope=\"col\">Port</th>\r\n                            <th scope=\"col\">Tool</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Stations available</CardTitle>\r\n                            <CardText>\r\n                                {getListOptionsStationControllers()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep2;\r\n","import * as React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { GetPortStatus2String, GetPortStatus2Lights } from '../../../utils/portUtils';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport Plot2Axis from '../../content-parts/Plot2Axis';\r\n\r\ntype WorkProcessProps = {\r\n    taskId: number,\r\n    stationId: string,\r\n    queueId: number,\r\n    currentStep: number,\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    interval: number\r\n}\r\n\r\nclass WorkProcessStep3 extends React.PureComponent<WorkProcessProps> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.currentStep !== 3) {\r\n            return null\r\n        }\r\n\r\n        let portData = this.props.plotData[this.props.plotData.length - 1];\r\n        let circleLight = \"circle-light-\" + GetPortStatus2Lights(\r\n            portData.toolStatus,\r\n            portData.isCalibrating,\r\n            portData.isSoldering,\r\n            portData.isPortEnabled);\r\n\r\n        return (\r\n            <Row className=\"mb-2\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row className=\"pb-2\">\r\n                            <Col xs=\"auto\">\r\n                                Temperature:{' '}\r\n                                <span className=\"temp-value\"> {Math.floor(portData.temperature)} ºC</span>\r\n                            </Col>\r\n                            <Col>\r\n                                Power:{' '}\r\n                                <span className=\"power-value\">{Math.floor(portData.power)} %</span>\r\n                            </Col>\r\n                            <Col className=\"text-right\">\r\n                                <FontAwesomeIcon icon={faCircle} className={circleLight}/>\r\n                                <strong className=\"pl-1\">{GetPortStatus2String(\r\n                                    portData.toolStatus,\r\n                                    portData.isCalibrating,\r\n                                    portData.isSoldering,\r\n                                    portData.isPortEnabled\r\n                                )}</strong>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Plot2Axis\r\n                                plotData={this.props.plotData}\r\n                                counterTenthSecond={this.props.counterTenthSecond}\r\n                                interval={this.props.interval}\r\n                            />\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Row>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkProcessStep3;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button } from 'reactstrap';\r\nimport { Alert } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { Card, CardText, CardImg, CardBody, CardTitle } from 'reactstrap';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as TaskStore from '../../../store/Task';\r\nimport * as StationStore from '../../../store/Station';\r\nimport TasksService from '../../../services/tasks.service';\r\nimport WorkService from '../../../services/work.service';\r\nimport { IRealTimeData } from './data/IRealTimeData';\r\nimport { ToolToString, ToolImagePath } from '../../../utils/toolUtils';\r\nimport { EmptyPlotSeriesData, PushPlotSeriesData } from '../../../utils/plotUtils';\r\nimport StationListSide from '../../content-parts/StationListSide';\r\nimport WorkProcessStep1 from './WorkProcessStep1';\r\nimport WorkProcessStep2 from './WorkProcessStep2';\r\nimport WorkProcessStep3 from './WorkProcessStep3';\r\n\r\nconst WAIT_INTERVAL = 1000;\r\n\r\ntype WorkProcessProps =\r\n    TaskStore.TaskState &\r\n    StationStore.StationState &\r\n    typeof TaskStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\ninterface IState {\r\n    selectedTask: TaskStore.Task,\r\n    selectedStation: StationStore.Station,\r\n    selectedPort: number,\r\n\r\n    queueId: number,\r\n    plotData: IRealTimeData[],\r\n    counterTenthSecond: number,\r\n    readyGetMoreData: boolean,\r\n\r\n    currentStep: number,\r\n    showFinishTaskModal: boolean,\r\n    timer: number,\r\n\r\n    nTotalTasks: number,\r\n    pageNumber: number,\r\n    pageSize: number,\r\n    filter: string,\r\n\r\n    isLoadingTasks: boolean\r\n}\r\n\r\nconst MAX_POINTS_PLOT = 400;\r\nconst INTERVAL_REFRESH_PLOT_MILLISCONDS = 100;\r\n\r\nclass WorkProcess extends React.PureComponent<WorkProcessProps, IState> {\r\n    constructor(props: WorkProcessProps) {\r\n        super(props);\r\n\r\n        let plotData = EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n        this.state = {\r\n            selectedTask: {\r\n                id: 0,\r\n                name: \"\",\r\n                workConfig: {\r\n                    tool: 0,\r\n                    selectedTemp: 0,\r\n                    changeSelectedTemp: false\r\n                },\r\n                timesPerformed: 0\r\n            },\r\n            selectedStation: {\r\n                id: \"\",\r\n                name: \"\",\r\n                model: \"\",\r\n                isQSTMode: false,\r\n                ports: []\r\n            },\r\n            selectedPort: -1,\r\n\r\n            queueId: -1,\r\n            plotData: plotData,\r\n            counterTenthSecond: 0,\r\n            readyGetMoreData: true,\r\n\r\n            currentStep: 1,\r\n            showFinishTaskModal: false,\r\n            timer: -1,\r\n\r\n            nTotalTasks: 0,\r\n            pageNumber: 1,\r\n            pageSize: 25,\r\n            filter: \"\",\r\n\r\n            isLoadingTasks: true\r\n        };\r\n\r\n        this.searchTasks(this.props, this.state.filter, this.state.pageNumber);\r\n\r\n        setInterval(() => {\r\n            if (this.state.queueId > -1 &&\r\n                this.state.readyGetMoreData) {\r\n\r\n                this.setState({\r\n                    readyGetMoreData: false\r\n                })\r\n\r\n                WorkService\r\n                    .getRealTimeData(this.state.selectedStation.id, this.state.queueId)\r\n                    .then((values: IRealTimeData[]) => {\r\n                        let plotData = this.state.plotData;\r\n                        let counterTenthSecond = this.state.counterTenthSecond\r\n\r\n                        values.forEach(x => {\r\n                            PushPlotSeriesData(plotData, x, MAX_POINTS_PLOT);\r\n                            counterTenthSecond++\r\n                        });\r\n\r\n                        this.setState({\r\n                            plotData: plotData,\r\n                            readyGetMoreData: true,\r\n                            counterTenthSecond: counterTenthSecond\r\n                        })\r\n                    })\r\n            }\r\n        }, INTERVAL_REFRESH_PLOT_MILLISCONDS);\r\n    }\r\n\r\n    searchTasks(props: WorkProcessProps, filter: string, pageNumber: number) {\r\n        props.deleteAllTasks();\r\n\r\n        this.setState({\r\n            isLoadingTasks: true,\r\n            pageNumber: pageNumber,\r\n            filter: filter\r\n        })\r\n\r\n        TasksService\r\n            .getTasks(filter, pageNumber, this.state.pageSize)\r\n            .then(tasks => {\r\n                tasks.forEach((x: TaskStore.Task) =>\r\n                    props.createTask(x)\r\n                )\r\n\r\n                this.setState({\r\n                    isLoadingTasks: false\r\n                })\r\n            });\r\n\r\n        TasksService\r\n            .countTasks(filter)\r\n            .then(value => {\r\n                this.setState({\r\n                    nTotalTasks: value\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const getMetadata = () => {\r\n            if (this.state.currentStep == 1) {\r\n                return (\r\n                    <Alert color=\"danger\">\r\n                        Select a task to continue.\r\n                    </Alert>\r\n                )\r\n            }\r\n\r\n            let alert;\r\n            if (this.state.selectedStation.id == \"\") {\r\n                alert =\r\n                    <Alert color=\"danger\" className=\"mt-3\">\r\n                        Select a station to continue.\r\n                    </Alert>\r\n            }\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    {getDetails()}\r\n                    {getConfiguration()}\r\n                    {alert}\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        const getDetails = () => {\r\n            let taskDetail =\r\n                <React.Fragment>\r\n                    <CardText>Task name: {this.state.selectedTask.name}</CardText>\r\n                    <CardText>Task code: {this.state.selectedTask.id}</CardText>\r\n                </React.Fragment>\r\n\r\n            let stationDetail;\r\n            if (this.state.selectedStation.id != \"\") {\r\n                stationDetail =\r\n                    <React.Fragment>\r\n                        <CardText>Station Id: {this.state.selectedStation.id}</CardText>\r\n                        <CardText>Station: {this.state.selectedStation.name} [{this.state.selectedStation.model}]</CardText>\r\n                        <CardText>Port: {this.state.selectedPort + 1}</CardText>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            let card =\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Details</CardTitle>\r\n                        <Row className=\"pd-1\">\r\n                            <Col xs=\"6\">{taskDetail}</Col>\r\n                            <Col xs=\"6\">{stationDetail}</Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            return (\r\n                <Row className=\"mb-2\">\r\n                    {card}\r\n                </Row>\r\n            )\r\n        };\r\n\r\n        const getConfiguration = () => {\r\n            return (\r\n                <Row className=\"mb-2\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Configuration</CardTitle>\r\n                            <Row>\r\n                                <Col xs=\"8\">\r\n                                    <CardText>Tool: {ToolToString(this.state.selectedTask.workConfig.tool)}</CardText>\r\n                                    {this.state.selectedTask.workConfig.changeSelectedTemp ?\r\n                                        <CardText>Selected temperature: {this.state.selectedTask.workConfig.selectedTemp / 9} ºC </CardText>: \"\"}\r\n                                </Col>\r\n                                <Col xs=\"4\">\r\n                                    <CardImg\r\n                                        src={ToolImagePath(this.state.selectedTask.workConfig.tool)}\r\n                                        alt={ToolToString(this.state.selectedTask.workConfig.tool)} />\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        const getPreviousButton = () => {\r\n            if (this.state.currentStep == 2) {\r\n                return (\r\n                    <Button\r\n                        outline\r\n                        color=\"danger\"\r\n                        size=\"sm\"\r\n                        className=\"m-2\"\r\n                        onClick={() => previous()}\r\n                    >Previous</Button>\r\n                )\r\n            }\r\n        }\r\n\r\n        const getNextButton = () => {\r\n            let text = \"\";\r\n            let isValid = false;\r\n\r\n            if (this.state.currentStep == 2) {\r\n                text = \"Start task\";\r\n                isValid = this.state.selectedStation.id != \"\";\r\n            }\r\n            else if (this.state.currentStep == 3) {\r\n                text = \"Stop task\";\r\n                isValid = true;\r\n            }\r\n\r\n            if (!isValid) {\r\n                return \"\";\r\n            }\r\n\r\n            return (\r\n                <Button\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    className=\"m-2\"\r\n                    onClick={() => next()}\r\n                >{text}</Button>\r\n            )\r\n        }\r\n\r\n        const previous = () => {\r\n            this.setState({\r\n                currentStep: this.state.currentStep - 1\r\n            })\r\n        }\r\n\r\n        const next = () => {\r\n            if (this.state.currentStep == 1) {\r\n                this.setState({\r\n                    currentStep: 2\r\n                })\r\n            }\r\n            else if (this.state.currentStep == 2) {\r\n                let plotData = EmptyPlotSeriesData(MAX_POINTS_PLOT) as IRealTimeData[];\r\n\r\n                this.setState({\r\n                    plotData: plotData,\r\n                    counterTenthSecond: 0\r\n                })\r\n\r\n                WorkService\r\n                    .startTrace(this.state.selectedTask.id, this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then(() =>\r\n                        this.setState({\r\n                            currentStep: 3\r\n                        })\r\n                );\r\n\r\n                WorkService\r\n                    .startRealTimeData(this.state.selectedStation.id, this.state.selectedPort)\r\n                    .then((value) => {\r\n                        this.setState({\r\n                            queueId: value\r\n                        })\r\n                    })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    showFinishTaskModal: true\r\n                })\r\n            }\r\n        }\r\n\r\n        const handleTaskClick = (task: TaskStore.Task) => {\r\n            this.setState({\r\n                selectedTask: task,\r\n                currentStep: 2\r\n            })\r\n        }\r\n\r\n        const handleStationClick = (station: StationStore.Station, port: number) => {\r\n            this.setState({\r\n                selectedStation: station,\r\n                selectedPort: port\r\n            })\r\n        }\r\n\r\n        const handleFinishTaskConfirmClick = () => {\r\n            WorkService\r\n                .stopTrace(this.state.selectedStation.id, this.state.selectedPort);\r\n\r\n            var queueId = this.state.queueId;\r\n\r\n            this.setState({\r\n                queueId: -1,\r\n                currentStep: 2,\r\n                showFinishTaskModal: false\r\n            });\r\n\r\n            WorkService\r\n                .stopRealTimeData(this.state.selectedStation.id, queueId);\r\n        };\r\n\r\n        const handleFinishTaskCancelClick = () => {\r\n            this.setState({\r\n                showFinishTaskModal: false\r\n            });\r\n        };\r\n\r\n        const handlePageClick = (pageNumber: number) => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                pageNumber);\r\n        }\r\n\r\n        const handlePreviousPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.max(1, this.state.pageNumber - 1));\r\n        }\r\n\r\n        const handleNextPageClick = () => {\r\n            this.searchTasks(\r\n                this.props,\r\n                this.state.filter,\r\n                Math.min(\r\n                    Math.ceil(this.state.nTotalTasks / this.state.pageSize),\r\n                    this.state.pageNumber + 1));\r\n        }\r\n\r\n        const handleSearchFieldChange = (filter: string) => {\r\n            if (this.state.timer > 0)\r\n                window.clearTimeout(this.state.timer);\r\n\r\n            this.setState({\r\n                pageNumber: 1,\r\n                timer: setTimeout(this.searchTasks, WAIT_INTERVAL, this.props, filter, 1)\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Work process</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"9\">\r\n                        <WorkProcessStep3\r\n                            taskId={this.state.selectedTask.id}\r\n                            stationId={this.state.selectedStation.id}\r\n                            queueId={this.state.queueId}\r\n                            currentStep={this.state.currentStep}\r\n                            plotData={this.state.plotData}\r\n                            counterTenthSecond={this.state.counterTenthSecond}\r\n                            interval={MAX_POINTS_PLOT / 5}\r\n                        />\r\n                        {getMetadata()}\r\n                        <WorkProcessStep1\r\n                            currentStep={this.state.currentStep}\r\n                            tasks={this.props.tasks}\r\n                            nTotalTasks={this.state.nTotalTasks}\r\n                            pageSize={this.state.pageSize}\r\n                            pageNumber={this.state.pageNumber}\r\n                            isLoadingTasks={this.state.isLoadingTasks}\r\n\r\n                            handlePageClick={handlePageClick}\r\n                            handlePreviousPageClick={handlePreviousPageClick}\r\n                            handleNextPageClick={handleNextPageClick}\r\n                            handleTaskClick={handleTaskClick}\r\n                            handleSearchFieldChange={handleSearchFieldChange}\r\n                        />\r\n                        <WorkProcessStep2\r\n                            stationControllers={this.props.stationControllers}\r\n                            taskTool={this.state.selectedTask.workConfig.tool}\r\n                            currentStep={this.state.currentStep}\r\n                            handleStationClick={handleStationClick}\r\n                        />\r\n                        <Row>\r\n                            {getPreviousButton()}\r\n                            {getNextButton()}\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"3\">\r\n                        <StationListSide/>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Modal isOpen={this.state.showFinishTaskModal} toggle={() => handleFinishTaskCancelClick()}>\r\n                    <ModalHeader toggle={() => handleFinishTaskCancelClick()}>Finish task</ModalHeader>\r\n                    <ModalBody>Are you sure to finish the task?</ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"danger\" onClick={() => handleFinishTaskConfirmClick()}>Confirm</Button>{' '}\r\n                        <Button color=\"danger\" onClick={() => handleFinishTaskCancelClick()}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers,\r\n        tasks: state.task.tasks\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    TaskStore.actionCreators\r\n)(WorkProcess);\r\n","import WorkProcess from './WorkProcess';\r\n\r\nexport default WorkProcess;\r\n","import * as React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Row } from 'reactstrap';\r\nimport { Card, CardText, CardBody } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport * as StationStore from '../../../store/Station';\r\n\r\ntype WorkbenchsProps = {\r\n    stationControllers: StationStore.StationController[],\r\n    isLoading: boolean,\r\n    handleSetTraceabilityModeClick: (scUrl: string, newState: boolean) => void\r\n}\r\n\r\nclass WorkbenchsView extends React.PureComponent<WorkbenchsProps> {\r\n    constructor(props: WorkbenchsProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const getListOptionsStationControllers = () => {\r\n            if (this.props.isLoading) {\r\n                return (\r\n                    <div className=\"text-center mt-3\">\r\n                        <Spinner color=\"danger\"/>\r\n                    </div>);\r\n            }\r\n\r\n            let options =\r\n                this.props.stationControllers\r\n                    .map(sc => {\r\n                        let items = [];\r\n                        items.push(\r\n                            <tr className=\"level-1\">\r\n                                <td scope=\"row\" className=\"text-left\"><strong>{sc.name}</strong></td>\r\n                                <td></td>\r\n                                <td>\r\n                                    <Button\r\n                                        outline\r\n                                        color={(sc.isQSTMode ? \"danger\" : \"secondary\")}\r\n                                        size=\"sm\"\r\n                                        className=\"pt-0 pb-0\"\r\n                                        onClick={() => this.props.handleSetTraceabilityModeClick(sc.url, !sc.isQSTMode)}\r\n                                    >\r\n                                        {sc.isQSTMode ? \"Enabled\" : \"Disabled\"}\r\n                                    </Button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                        items.push(\r\n                            sc.stations.map(s => (\r\n                                <tr className=\"level-2\">\r\n                                    <td scope=\"row\" className=\"pl-3 text-left\">{s.name}</td>\r\n                                    <td>{s.model}</td>\r\n                                    <td>\r\n                                        <span className={(sc.isQSTMode && s.isQSTMode) ? \"highlight-color\" : \"\"}>{\r\n                                            sc.isQSTMode ?\r\n                                                (s.isQSTMode ? \"QST enabled\" : \"QST disabled\" ) :\r\n                                                \"--\"\r\n                                        }</span>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        )\r\n                        return items;\r\n                    })\r\n\r\n            return (\r\n                <table className=\"table table-hover table-sm station-list\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Workbench / Station</th>\r\n                            <th scope=\"col\">Station model</th>\r\n                            <th scope=\"col\">Traceability state</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {options}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"mb-2\">\r\n                    <h1>Workbenchs</h1>\r\n                </Row>\r\n                <Row>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardText>\r\n                                {getListOptionsStationControllers()}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WorkbenchsView;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../../store';\r\nimport * as StationStore from '../../../store/Station';\r\nimport StationService from '../../../services/station.service';\r\nimport WorkbenchsView from './WorkbenchsView';\r\n\r\ntype WorkbenchsProps =\r\n    StationStore.StationState &\r\n    typeof StationStore.actionCreators;\r\n\r\ninterface IState {\r\n    isLoading: boolean\r\n}\r\n\r\nclass Workbenchs extends React.PureComponent<WorkbenchsProps, IState> {\r\n    constructor(props: WorkbenchsProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true\r\n        };\r\n\r\n        this.searchStations(this.props);\r\n    }\r\n\r\n    searchStations(props: WorkbenchsProps) {\r\n        props.deleteAllStationControllers();\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        StationService\r\n            .getStations()\r\n            .then(scs => {\r\n                scs.forEach((sc: StationStore.StationController) => {\r\n                    props.createStationController(sc);\r\n\r\n                    sc.stations.forEach((s: StationStore.Station) =>\r\n                        props.createStation(s, sc.id)\r\n                    )\r\n                })\r\n\r\n                this.setState({\r\n                    isLoading: false\r\n                })\r\n            });\r\n    }\r\n\r\n    public render() {\r\n        const handleSetTraceabilityModeClick = (scUrl: string, newState: boolean) => {\r\n            StationService.setTraceabilityMode(scUrl, newState);\r\n        }\r\n\r\n        return (\r\n            <WorkbenchsView\r\n                stationControllers={this.props.stationControllers}\r\n                isLoading={this.state.isLoading}\r\n                handleSetTraceabilityModeClick={handleSetTraceabilityModeClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        stationControllers: state.station.stationControllers\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    StationStore.actionCreators\r\n)(Workbenchs);\r\n","import Home from './components/content-pages/Home';\r\nimport Processes from './components/content-pages/Processes';\r\nimport ProcessOptimization from './components/content-pages/ProcessOptimization';\r\nimport SolderingAssistant from './components/content-pages/SolderingAssistant';\r\nimport SolderingAssistantNew from './components/content-pages/SolderingAssistantNew';\r\nimport Traceability from './components/content-pages/Traceability';\r\nimport Tasks from './components/content-pages/Tasks';\r\nimport TaskNew from './components/content-pages/TaskNew';\r\nimport TaskEdit from './components/content-pages/TaskEdit';\r\nimport TaskDetail from './components/content-pages/TaskDetail';\r\nimport TaskHistoryDetail from './components/content-pages/TaskHistoryDetail';\r\nimport WorkProcess from './components/content-pages/WorkProcess';\r\nimport Workbenchs from './components/content-pages/Workbenchs';\r\n\r\nexport default [\r\n  { path: \"/\", name: \"Home\", Component: Home },\r\n  { path: \"/processes\", name: \"Processes\", Component: Processes },\r\n  { path: \"/processes/optimization\", name: \"Process optimization\", Component: ProcessOptimization },\r\n  { path: \"/processes/assistant\", name: \"Soldering assistant\", Component: SolderingAssistant },\r\n  { path: \"/processes/assistant/new\", name: \"New\", Component: SolderingAssistantNew },\r\n  { path: \"/traceability\", name: \"Traceability\", Component: Traceability },\r\n  { path: \"/traceability/task\", name: \"Tasks\", Component: Tasks },\r\n  { path: \"/traceability/task/new\", name: \"New\", Component: TaskNew },\r\n  { path: \"/traceability/task/:id/detail\", name: \"Details\", Component: TaskDetail },\r\n  { path: \"/traceability/task/:id/edit\", name: \"Edit\", Component: TaskEdit },\r\n  { path: \"/traceability/task/:taskId/history/:historyId\", name: \"History\", Component: TaskHistoryDetail },\r\n  { path: \"/traceability/workprocess\", name: \"Work process\", Component: WorkProcess },\r\n  { path: \"/traceability/workbenchs\", name: \"Workbenchs\", Component: Workbenchs }\r\n];\r\n","import * as React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { Container } from 'reactstrap';\r\nimport Breadcrumbs from './components/content-components/Breadcrumbs';\r\nimport Layout from './components/Layout';\r\nimport routes from \"./routes\";\r\n\r\nimport './custom.scss'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Switch>\r\n            {routes.map(({ path, name, Component }, key) => (\r\n                <Route\r\n                    exact\r\n                    path={path}\r\n                    key={key}\r\n                    render={props => {\r\n                        const crumbs = routes\r\n                            .filter(({ path }) => props.match.path.includes(path))\r\n                            .map(({ path, ...rest }) => ({\r\n                                path: Object.keys(props.match.params).length\r\n                                    ? Object.keys(props.match.params).reduce(\r\n                                        (path, param) =>\r\n                                            path.replace(`:${param}`, props.match.params[param]),\r\n                                            path\r\n                                    )\r\n                                    : path,\r\n                                ...rest\r\n                            }));\r\n\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Breadcrumbs crumbs={crumbs} />\r\n                                <Container id=\"content-wrap\" className=\"mt-3\">\r\n                                    <Route exact path={path} key={key} component={Component} />\r\n                                </Container>\r\n                            </React.Fragment>\r\n                        );\r\n                    }}\r\n                />\r\n            ))}\r\n        </Switch>\r\n    </Layout>\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}